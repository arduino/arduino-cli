{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Arduino CLI is an all-in-one solution that provides Boards/Library Managers, sketch builder, board detection, uploader, and many other tools needed to use any Arduino compatible board and platform from command line or machine interfaces. In addition to being a standalone tool, Arduino CLI is the heart of all official Arduino development software (Arduino IDE, Arduino Web Editor). Parts of this documentation apply to those tools as well. Installation \u00b6 You have several options to install the latest version of the Arduino CLI on your system, see the installation page. Getting started \u00b6 Follow the Getting started guide to see how to use the most common CLI commands available. Using the gRPC interface \u00b6 The client_example folder contains a sample program that shows how to use the gRPC interface of the CLI. Available services and messages are detailed in the gRPC reference pages. Versioning and backward compatibility policy \u00b6 This software is currently under active development: anything can change at any time, API and UI must be considered unstable until we release version 1.0.0. For more information see our versioning and backward compatibility policy.","title":"Home"},{"location":"#installation","text":"You have several options to install the latest version of the Arduino CLI on your system, see the installation page.","title":"Installation"},{"location":"#getting-started","text":"Follow the Getting started guide to see how to use the most common CLI commands available.","title":"Getting started"},{"location":"#using-the-grpc-interface","text":"The client_example folder contains a sample program that shows how to use the gRPC interface of the CLI. Available services and messages are detailed in the gRPC reference pages.","title":"Using the gRPC interface"},{"location":"#versioning-and-backward-compatibility-policy","text":"This software is currently under active development: anything can change at any time, API and UI must be considered unstable until we release version 1.0.0. For more information see our versioning and backward compatibility policy.","title":"Versioning and backward compatibility policy"},{"location":"CONTRIBUTING/","text":"How to contribute \u00b6 First of all, thanks for contributing! This document provides some basic guidelines for contributing to this repository. There are several ways you can get involved: Type of contribution Contribution method - Support request - Question - Discussion Post on the Arduino Forum - Bug report - Feature request Issue report (read the issue guidelines ) Testing Try out the nightly build - Bug fix - Enhancement Pull Request (read the pull request guidelines ) Translations for Arduino CLI Use the transifex platform Monetary - Donate - Buy official products Issue Reports \u00b6 Do you need help or have a question about using Arduino CLI? Support requests should be made to Arduino CLI's dedicated board in the Arduino forum . High quality bug reports and feature requests are valuable contributions to the Arduino CLI project. Before reporting an issue \u00b6 Give the nightly build a test drive to see if your issue was already resolved. Search existing pull requests and issues to see if it was already reported. If you have additional information to provide about an existing issue, please comment there. You can use the Reactions feature if you only want to express support. Qualities of an excellent report \u00b6 The issue title should be descriptive. Vague titles make it difficult to understand the purpose of the issue, which might cause your issue to be overlooked. Provide a full set of steps necessary to reproduce the issue. Demonstration code or commands should be complete and simplified to the minimum necessary to reproduce the issue. Be responsive. We may need you to provide additional information in order to investigate and resolve the issue. If you find a solution to your problem, please comment on your issue report with an explanation of how you were able to fix it and close the issue. Pull Requests \u00b6 To propose improvements or fix a bug, feel free to submit a PR. Legal requirements \u00b6 Before we can accept your contributions you have to sign the Contributor License Agreement Pull request checklist \u00b6 In order to ease code reviews and have your contributions merged faster, here is a list of items you can check before submitting a PR: Create small PRs that are narrowly focused on addressing a single concern. PR titles indirectly become part of the CHANGELOG so it's crucial to provide a good record of what change is being made in the title; why it was made will go in the PR description, along with a link to a GitHub issue if it exists. If the PR contains a breaking change, please start the commit message and PR title with the string [breaking] . Don't forget to describe in the PR description and in the UPGRADING.md file what changes users might need to make in their workflow or application due to this PR. A breaking change is a change that forces users to change their code, command-line invocations, build scripts or data files when upgrading from an older version of Arduino CLI. Write tests for the code you wrote. Open your PR against the master branch. Maintain clean commit history and use meaningful commit messages . PRs with messy commit history are difficult to review and require a lot of work to be merged. Your PR must pass all CI tests before we will merge it. If you're seeing an error and don't think it's your fault, it may not be! The reviewer will help you if there are test failures that seem not related to the change you are making. Prerequisites \u00b6 To build the Arduino CLI from sources you need the following tools to be available in your local environment: Go version 1.21 or later Taskfile to help you run the most common tasks from the command line If you want to run integration tests you will also need: A serial port with an Arduino board attached If you're working on the gRPC interface you will also have to: download and install the protoc compiler (use the version required to match the generated code, please note that the latest releases does not follow semantic versioning anymore so, for example, the version 4.24.3 must be searched as 24.3 dropping the major number) install protoc-gen-go using: go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.31.0 (use the version required to match the generated code) install protoc-gen-go-grpc using: go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.3.0 (use the version required to match the generated code) Building the source code \u00b6 From the project folder root, just run: task build The project uses Go modules so dependencies will be downloaded automatically. At the end of the build, you should find an arduino-cli executable in the same folder. Running the tests \u00b6 There are several checks and test suites in place to ensure the code works as expected and is written in a way that's consistent across the whole codebase. To avoid pushing changes that will cause the CI system to fail, you can run most of the tests locally. To ensure code style is consistent, run: task check To run unit tests: task go:test To run integration tests (these will take some time and require special setup, see following paragraph): task go:integration-test Running only some tests \u00b6 By default, all tests from all go packages are run. To run only unit tests from one or more specific packages, you can set the TARGETS environment variable, e.g.: TARGETS=./arduino/cores/packagemanager task go:test Alternatively, to run only some specific test(s), you can specify a regex to match against the test function name: TEST_REGEX='^TestTryBuild.*' task go:test Both can be combined as well, typically to run only a specific test: TEST_REGEX='^TestFindBoardWithFQBN$' TARGETS=./arduino/cores/packagemanager task go:test Integration tests \u00b6 Being a command line interface, Arduino CLI is heavily interactive and it has to stay consistent in accepting the user input and providing the expected output and proper exit codes. On top of this, many Arduino CLI features involve communicating with external devices, most likely through a serial port, so unit tests can only go so far in giving us confidence that the code is working. For these reasons, in addition to regular unit tests the project has a suite of integration tests that actually run Arduino CLI in a different process and assess the options are correctly understood and the output is what we expect. Hardware requirements for running the full suite of integration tests: \u00b6 An Arduino board attached to a serial port. The board must: Use one of the VID/PID pairs used by Arduino or their partners (as is the case with all modern official Arduino boards except the classic Nano). Accept uploads using the FQBN associated with that VID/PID (which will be the case unless you have installed a custom bootloader or removed the bootloader). Note that running the integration tests will result in a sketch being uploaded to every attached Arduino board meeting the above requirements. Software requirements for running integration tests: \u00b6 A working Go environment. Chances are that you already have Go installed in your system, if this is not the case you can download the official distribution or use the package manager provided by your Operating System. Running tests \u00b6 After the software requirements have been installed you should be able to run the tests with: task go:integration-test This will run the integration tests automatically. To run specific packages you must run go test . go test -v github.com/arduino/arduino-cli/internal/integrationtest/lib To run very specific test functions: go test -v github.com/arduino/arduino-cli/internal/integrationtest/lib -run TestLibUpgradeCommand Dependency license metadata \u00b6 Metadata about the license types of all dependencies is cached in the repository. To update this cache, run the following command from the repository root folder: task general:cache-dep-licenses The necessary Licensed tool can be installed by following these instructions . Configuration files formatting \u00b6 To keep the configurations tidy and in order we use Prettier to automatically format all YAML files in the project. Keeping and enforcing a formatting standard helps everyone make small PRs and avoids the introduction of formatting changes made by unconfigured editors. There are several ways to run Prettier. If you're using Visual Studio Code you can easily use the prettier-vscode extension to automatically format as you write. Otherwise you can use the following tasks. To do so you'll need to install npm if not already installed. Check the official documentation to learn how to install npm for your platform. Ensure the formatting is compliant by running the command: task general:format-prettier When opening a new Pull Request, checks are automatically run to verify that configuration files are correctly formatted. In case of failures we might ask you to update the PR with correct formatting. Working on docs \u00b6 Documentation is provided to final users in form of static HTML content generated from a tool called MkDocs and hosted on GitHub Pages . Local development \u00b6 Most of the documentation consists of static content written over several Markdown files under the docs folder at the root of this git repository but some other content is dynamically generated from the CI pipelines - this is the case with the command line reference and the gRPC interface, for example. If you want to check out how the documentation would look after some local changes, you might need to reproduce what happens in the CI, generating the full documentation website from your personal computer. To run the docs toolchain locally, you need to have a few dependencies and tools installed: Go version 1.17 or later Taskfile to help you run the most common tasks from the command line A working Python environment, see this paragraph if you need to setup one Before running the toolchain, perform the following operations from the root of the git repository (if you have a Python virtual environment, activate it before proceeding): go get -u github.com/pseudomuto/protoc-gen-doc/cmd/protoc-gen-doc poetry install When working on docs, you can launch a command that will take care of generating the docs, build the static website and start a local server you can later access with a web browser to see a preview of your changes. From the root of the git repository run: task website:serve If you don't see any error, hit http://127.0.0.1:8000 with your browser to navigate the generated docs. Docs publishing \u00b6 The present git repository has a special branch called gh-pages that contains the generated HTML code for the docs website; every time a change is pushed to this special branch, GitHub automatically triggers a deployment to pull the change and publish a new version of the website. Do not open Pull Requests to push changes to the gh-pages branch, that will be done exclusively from the CI. Docs formatting \u00b6 To keep the documentation tidy and in order we use Prettier to automatically format all Markdown files in the project. Keeping and enforcing a formatting standard helps everyone make small PRs and avoids the introduction of formatting changes made by unconfigured editors. There are several ways to run Prettier. If you're using Visual Studio Code you can easily use the prettier-vscode extension to automatically format as you write. Otherwise you can use the following tasks. To do so you'll need to install npm if not already installed. Check the official documentation to learn how to install npm for your platform. Ensure the formatting is compliant by running the command: task general:format-prettier When opening a new Pull Request, checks are automatically run to verify that documentation is correctly formatted. In case of failures we might ask you to update the PR with correct formatting. Docs automation \u00b6 In order to avoid unwanted changes to the public website hosting the Arduino CLI documentation, only Mike is allowed to push changes to the gh-pages branch, and this only happens from within the CI, in a workflow named Deploy Website . Details on the documentation publishing system are available here . Internationalization (i18n) \u00b6 In order to support i18n in the CLI, any messages that are intended to be translated should be wrapped in a call to i18n.Tr . This call allows us to build a catalog of translatable strings, replacing the reference string at runtime with the localized value. Example usage: package main import ( \"fmt\" \"github.com/arduino/arduino-cli/i18n\" ) func main () { fmt . Println ( i18n . Tr ( \"Hello World!\" )) } About easyjson golang library \u00b6 We use the hi-performance easyjson library to parse the large JSON index files for libraries and platforms. To obtain the best performance we must do some code generation, this is done via task go:easyjson-generate . If you ever touch source code using the easyjson library, make sure to re-run the go:easyjson-generate task to see if there are changes in the generated code. Additional settings \u00b6 If you need to push a commit that's only shipping documentation changes or example files, thus a complete no-op for the test suite, please start the commit message with the string [skip ci] to skip the build and give that slot to someone else who does need it. If your PR doesn't need to be included in the changelog, please start the commit message and PR title with the string [skip changelog]","title":"How to contribute"},{"location":"CONTRIBUTING/#how-to-contribute","text":"First of all, thanks for contributing! This document provides some basic guidelines for contributing to this repository. There are several ways you can get involved: Type of contribution Contribution method - Support request - Question - Discussion Post on the Arduino Forum - Bug report - Feature request Issue report (read the issue guidelines ) Testing Try out the nightly build - Bug fix - Enhancement Pull Request (read the pull request guidelines ) Translations for Arduino CLI Use the transifex platform Monetary - Donate - Buy official products","title":"How to contribute"},{"location":"CONTRIBUTING/#issue-reports","text":"Do you need help or have a question about using Arduino CLI? Support requests should be made to Arduino CLI's dedicated board in the Arduino forum . High quality bug reports and feature requests are valuable contributions to the Arduino CLI project.","title":"Issue Reports"},{"location":"CONTRIBUTING/#before-reporting-an-issue","text":"Give the nightly build a test drive to see if your issue was already resolved. Search existing pull requests and issues to see if it was already reported. If you have additional information to provide about an existing issue, please comment there. You can use the Reactions feature if you only want to express support.","title":"Before reporting an issue"},{"location":"CONTRIBUTING/#qualities-of-an-excellent-report","text":"The issue title should be descriptive. Vague titles make it difficult to understand the purpose of the issue, which might cause your issue to be overlooked. Provide a full set of steps necessary to reproduce the issue. Demonstration code or commands should be complete and simplified to the minimum necessary to reproduce the issue. Be responsive. We may need you to provide additional information in order to investigate and resolve the issue. If you find a solution to your problem, please comment on your issue report with an explanation of how you were able to fix it and close the issue.","title":"Qualities of an excellent report"},{"location":"CONTRIBUTING/#pull-requests","text":"To propose improvements or fix a bug, feel free to submit a PR.","title":"Pull Requests"},{"location":"CONTRIBUTING/#legal-requirements","text":"Before we can accept your contributions you have to sign the Contributor License Agreement","title":"Legal requirements"},{"location":"CONTRIBUTING/#pull-request-checklist","text":"In order to ease code reviews and have your contributions merged faster, here is a list of items you can check before submitting a PR: Create small PRs that are narrowly focused on addressing a single concern. PR titles indirectly become part of the CHANGELOG so it's crucial to provide a good record of what change is being made in the title; why it was made will go in the PR description, along with a link to a GitHub issue if it exists. If the PR contains a breaking change, please start the commit message and PR title with the string [breaking] . Don't forget to describe in the PR description and in the UPGRADING.md file what changes users might need to make in their workflow or application due to this PR. A breaking change is a change that forces users to change their code, command-line invocations, build scripts or data files when upgrading from an older version of Arduino CLI. Write tests for the code you wrote. Open your PR against the master branch. Maintain clean commit history and use meaningful commit messages . PRs with messy commit history are difficult to review and require a lot of work to be merged. Your PR must pass all CI tests before we will merge it. If you're seeing an error and don't think it's your fault, it may not be! The reviewer will help you if there are test failures that seem not related to the change you are making.","title":"Pull request checklist"},{"location":"CONTRIBUTING/#prerequisites","text":"To build the Arduino CLI from sources you need the following tools to be available in your local environment: Go version 1.21 or later Taskfile to help you run the most common tasks from the command line If you want to run integration tests you will also need: A serial port with an Arduino board attached If you're working on the gRPC interface you will also have to: download and install the protoc compiler (use the version required to match the generated code, please note that the latest releases does not follow semantic versioning anymore so, for example, the version 4.24.3 must be searched as 24.3 dropping the major number) install protoc-gen-go using: go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.31.0 (use the version required to match the generated code) install protoc-gen-go-grpc using: go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.3.0 (use the version required to match the generated code)","title":"Prerequisites"},{"location":"CONTRIBUTING/#building-the-source-code","text":"From the project folder root, just run: task build The project uses Go modules so dependencies will be downloaded automatically. At the end of the build, you should find an arduino-cli executable in the same folder.","title":"Building the source code"},{"location":"CONTRIBUTING/#running-the-tests","text":"There are several checks and test suites in place to ensure the code works as expected and is written in a way that's consistent across the whole codebase. To avoid pushing changes that will cause the CI system to fail, you can run most of the tests locally. To ensure code style is consistent, run: task check To run unit tests: task go:test To run integration tests (these will take some time and require special setup, see following paragraph): task go:integration-test","title":"Running the tests"},{"location":"CONTRIBUTING/#running-only-some-tests","text":"By default, all tests from all go packages are run. To run only unit tests from one or more specific packages, you can set the TARGETS environment variable, e.g.: TARGETS=./arduino/cores/packagemanager task go:test Alternatively, to run only some specific test(s), you can specify a regex to match against the test function name: TEST_REGEX='^TestTryBuild.*' task go:test Both can be combined as well, typically to run only a specific test: TEST_REGEX='^TestFindBoardWithFQBN$' TARGETS=./arduino/cores/packagemanager task go:test","title":"Running only some tests"},{"location":"CONTRIBUTING/#integration-tests","text":"Being a command line interface, Arduino CLI is heavily interactive and it has to stay consistent in accepting the user input and providing the expected output and proper exit codes. On top of this, many Arduino CLI features involve communicating with external devices, most likely through a serial port, so unit tests can only go so far in giving us confidence that the code is working. For these reasons, in addition to regular unit tests the project has a suite of integration tests that actually run Arduino CLI in a different process and assess the options are correctly understood and the output is what we expect.","title":"Integration tests"},{"location":"CONTRIBUTING/#hardware-requirements-for-running-the-full-suite-of-integration-tests","text":"An Arduino board attached to a serial port. The board must: Use one of the VID/PID pairs used by Arduino or their partners (as is the case with all modern official Arduino boards except the classic Nano). Accept uploads using the FQBN associated with that VID/PID (which will be the case unless you have installed a custom bootloader or removed the bootloader). Note that running the integration tests will result in a sketch being uploaded to every attached Arduino board meeting the above requirements.","title":"Hardware requirements for running the full suite of integration tests:"},{"location":"CONTRIBUTING/#software-requirements-for-running-integration-tests","text":"A working Go environment. Chances are that you already have Go installed in your system, if this is not the case you can download the official distribution or use the package manager provided by your Operating System.","title":"Software requirements for running integration tests:"},{"location":"CONTRIBUTING/#running-tests","text":"After the software requirements have been installed you should be able to run the tests with: task go:integration-test This will run the integration tests automatically. To run specific packages you must run go test . go test -v github.com/arduino/arduino-cli/internal/integrationtest/lib To run very specific test functions: go test -v github.com/arduino/arduino-cli/internal/integrationtest/lib -run TestLibUpgradeCommand","title":"Running tests"},{"location":"CONTRIBUTING/#dependency-license-metadata","text":"Metadata about the license types of all dependencies is cached in the repository. To update this cache, run the following command from the repository root folder: task general:cache-dep-licenses The necessary Licensed tool can be installed by following these instructions .","title":"Dependency license metadata"},{"location":"CONTRIBUTING/#configuration-files-formatting","text":"To keep the configurations tidy and in order we use Prettier to automatically format all YAML files in the project. Keeping and enforcing a formatting standard helps everyone make small PRs and avoids the introduction of formatting changes made by unconfigured editors. There are several ways to run Prettier. If you're using Visual Studio Code you can easily use the prettier-vscode extension to automatically format as you write. Otherwise you can use the following tasks. To do so you'll need to install npm if not already installed. Check the official documentation to learn how to install npm for your platform. Ensure the formatting is compliant by running the command: task general:format-prettier When opening a new Pull Request, checks are automatically run to verify that configuration files are correctly formatted. In case of failures we might ask you to update the PR with correct formatting.","title":"Configuration files formatting"},{"location":"CONTRIBUTING/#working-on-docs","text":"Documentation is provided to final users in form of static HTML content generated from a tool called MkDocs and hosted on GitHub Pages .","title":"Working on docs"},{"location":"CONTRIBUTING/#local-development","text":"Most of the documentation consists of static content written over several Markdown files under the docs folder at the root of this git repository but some other content is dynamically generated from the CI pipelines - this is the case with the command line reference and the gRPC interface, for example. If you want to check out how the documentation would look after some local changes, you might need to reproduce what happens in the CI, generating the full documentation website from your personal computer. To run the docs toolchain locally, you need to have a few dependencies and tools installed: Go version 1.17 or later Taskfile to help you run the most common tasks from the command line A working Python environment, see this paragraph if you need to setup one Before running the toolchain, perform the following operations from the root of the git repository (if you have a Python virtual environment, activate it before proceeding): go get -u github.com/pseudomuto/protoc-gen-doc/cmd/protoc-gen-doc poetry install When working on docs, you can launch a command that will take care of generating the docs, build the static website and start a local server you can later access with a web browser to see a preview of your changes. From the root of the git repository run: task website:serve If you don't see any error, hit http://127.0.0.1:8000 with your browser to navigate the generated docs.","title":"Local development"},{"location":"CONTRIBUTING/#docs-publishing","text":"The present git repository has a special branch called gh-pages that contains the generated HTML code for the docs website; every time a change is pushed to this special branch, GitHub automatically triggers a deployment to pull the change and publish a new version of the website. Do not open Pull Requests to push changes to the gh-pages branch, that will be done exclusively from the CI.","title":"Docs publishing"},{"location":"CONTRIBUTING/#docs-formatting","text":"To keep the documentation tidy and in order we use Prettier to automatically format all Markdown files in the project. Keeping and enforcing a formatting standard helps everyone make small PRs and avoids the introduction of formatting changes made by unconfigured editors. There are several ways to run Prettier. If you're using Visual Studio Code you can easily use the prettier-vscode extension to automatically format as you write. Otherwise you can use the following tasks. To do so you'll need to install npm if not already installed. Check the official documentation to learn how to install npm for your platform. Ensure the formatting is compliant by running the command: task general:format-prettier When opening a new Pull Request, checks are automatically run to verify that documentation is correctly formatted. In case of failures we might ask you to update the PR with correct formatting.","title":"Docs formatting"},{"location":"CONTRIBUTING/#docs-automation","text":"In order to avoid unwanted changes to the public website hosting the Arduino CLI documentation, only Mike is allowed to push changes to the gh-pages branch, and this only happens from within the CI, in a workflow named Deploy Website . Details on the documentation publishing system are available here .","title":"Docs automation"},{"location":"CONTRIBUTING/#internationalization-i18n","text":"In order to support i18n in the CLI, any messages that are intended to be translated should be wrapped in a call to i18n.Tr . This call allows us to build a catalog of translatable strings, replacing the reference string at runtime with the localized value. Example usage: package main import ( \"fmt\" \"github.com/arduino/arduino-cli/i18n\" ) func main () { fmt . Println ( i18n . Tr ( \"Hello World!\" )) }","title":"Internationalization (i18n)"},{"location":"CONTRIBUTING/#about-easyjson-golang-library","text":"We use the hi-performance easyjson library to parse the large JSON index files for libraries and platforms. To obtain the best performance we must do some code generation, this is done via task go:easyjson-generate . If you ever touch source code using the easyjson library, make sure to re-run the go:easyjson-generate task to see if there are changes in the generated code.","title":"About easyjson golang library"},{"location":"CONTRIBUTING/#additional-settings","text":"If you need to push a commit that's only shipping documentation changes or example files, thus a complete no-op for the test suite, please start the commit message with the string [skip ci] to skip the build and give that slot to someone else who does need it. If your PR doesn't need to be included in the changelog, please start the commit message and PR title with the string [skip changelog]","title":"Additional settings"},{"location":"FAQ/","text":"Arduino Nano/Uno/Mega is not detected \u00b6 When you run arduino-cli board list , your board doesn't show up. Possible causes: Your board is a cheaper derivative, or It's a board, such the classic Nano, that uses a USB to serial converter like FTDI FT232 or CH340. These chips always report the same USB VID/PID to the operating system, so the only thing we know is that the board mounts that specific USB2Serial chip, but we don\u2019t know which board that chip is on. What's the FQBN string? \u00b6 FQBN stands for Fully Qualified Board Name. It has the following format: VENDOR:ARCHITECTURE:BOARD_ID[:MENU_ID=OPTION_ID[,MENU2_ID=OPTION_ID ...]] , with each MENU_ID=OPTION_ID being an optional key-value pair configuration. Each field accepts letters ( A-Z or a-z ), numbers ( 0-9 ), underscores ( _ ), dashes( - ) and dots( . ). The special character = is accepted in the configuration value. The VENDOR and ARCHITECTURE parts can be empty. For a deeper understanding of how FQBN works, you should understand the Arduino platform specification . How to set multiple board options? \u00b6 Additional board options have to be separated by commas (instead of colon): $ arduino-cli compile --fqbn \"esp8266:esp8266:generic:xtal=160,baud=57600\" TestSketch Where is the Serial Monitor? \u00b6 The serial monitor is available through the monitor command . By the way, the functionality provided by this command is very limited and you may want to look for other tools if you need more advanced functionality. There are many excellent serial terminals to chose from. On Linux or macOS, you may already have screen installed. On Windows, a good choice for command line usage is Plink, included with PuTTY . How to change monitor configuration? \u00b6 Configuration parameters of the monitor can be obtained by executing the following command: $ arduino-cli monitor -p <port> --describe These parameters can be modified by passing a list of <key>=<desiredValue> pairs to the --config flag. For example, when using a serial port, the monitor baud rate can be set to 4800 with the following command: $ arduino-cli monitor -p <port> --config baudrate=4800 \"Permission denied\" error in sketch upload \u00b6 This problem might happen on some Linux systems, and can be solved by setting up serial port permissions. First, search for the port your board is connected to, with the command: $ arduino-cli board list Then add your user to the group with the following command, replacing <username> with your username and <group> with your group name. Logging out and in again is necessary for the changes to take effect. $ sudo usermod -a -G <group> <username> Additional assistance \u00b6 If your question wasn't answered, feel free to ask on Arduino CLI's forum board .","title":"FAQ"},{"location":"FAQ/#arduino-nanounomega-is-not-detected","text":"When you run arduino-cli board list , your board doesn't show up. Possible causes: Your board is a cheaper derivative, or It's a board, such the classic Nano, that uses a USB to serial converter like FTDI FT232 or CH340. These chips always report the same USB VID/PID to the operating system, so the only thing we know is that the board mounts that specific USB2Serial chip, but we don\u2019t know which board that chip is on.","title":"Arduino Nano/Uno/Mega is not detected"},{"location":"FAQ/#whats-the-fqbn-string","text":"FQBN stands for Fully Qualified Board Name. It has the following format: VENDOR:ARCHITECTURE:BOARD_ID[:MENU_ID=OPTION_ID[,MENU2_ID=OPTION_ID ...]] , with each MENU_ID=OPTION_ID being an optional key-value pair configuration. Each field accepts letters ( A-Z or a-z ), numbers ( 0-9 ), underscores ( _ ), dashes( - ) and dots( . ). The special character = is accepted in the configuration value. The VENDOR and ARCHITECTURE parts can be empty. For a deeper understanding of how FQBN works, you should understand the Arduino platform specification .","title":"What's the FQBN string?"},{"location":"FAQ/#how-to-set-multiple-board-options","text":"Additional board options have to be separated by commas (instead of colon): $ arduino-cli compile --fqbn \"esp8266:esp8266:generic:xtal=160,baud=57600\" TestSketch","title":"How to set multiple board options?"},{"location":"FAQ/#where-is-the-serial-monitor","text":"The serial monitor is available through the monitor command . By the way, the functionality provided by this command is very limited and you may want to look for other tools if you need more advanced functionality. There are many excellent serial terminals to chose from. On Linux or macOS, you may already have screen installed. On Windows, a good choice for command line usage is Plink, included with PuTTY .","title":"Where is the Serial Monitor?"},{"location":"FAQ/#how-to-change-monitor-configuration","text":"Configuration parameters of the monitor can be obtained by executing the following command: $ arduino-cli monitor -p <port> --describe These parameters can be modified by passing a list of <key>=<desiredValue> pairs to the --config flag. For example, when using a serial port, the monitor baud rate can be set to 4800 with the following command: $ arduino-cli monitor -p <port> --config baudrate=4800","title":"How to change monitor configuration?"},{"location":"FAQ/#permission-denied-error-in-sketch-upload","text":"This problem might happen on some Linux systems, and can be solved by setting up serial port permissions. First, search for the port your board is connected to, with the command: $ arduino-cli board list Then add your user to the group with the following command, replacing <username> with your username and <group> with your group name. Logging out and in again is necessary for the changes to take effect. $ sudo usermod -a -G <group> <username>","title":"\"Permission denied\" error in sketch upload"},{"location":"FAQ/#additional-assistance","text":"If your question wasn't answered, feel free to ask on Arduino CLI's forum board .","title":"Additional assistance"},{"location":"UPGRADING/","text":"Upgrading \u00b6 Here you can find a list of migration guides to handle breaking changes between releases of the CLI. 0.36.0 \u00b6 YAML output format is no more supported \u00b6 The yaml option of the --format flag is no more supported. Use --format json if machine parsable output is needed. The gRPC cc.arduino.cli.commands.v1.CompileRequest.export_binaries changed type. \u00b6 Previously the field export_binaries was a google.protobuf.BoolValue . We used this type because it expresses this field's optional nature (that is, it could be true , false , and null if not set). Now the field is an optional bool , since the latest protobuf protocol changes now allows optional fields. The gRPC cc.arduino.cli.commands.v1.UpdateIndexResponse and UpdateLibrariesIndexResponse have changed. \u00b6 The responses coming from the update index commands: message UpdateIndexResponse { // Progress of the package index download. DownloadProgress download_progress = 1 ; } message UpdateLibrariesIndexResponse { // Progress of the libraries index download. DownloadProgress download_progress = 1 ; } are now more explicit and contains details about the result of the operation: message UpdateIndexResponse { message Result { // The result of the packages index update. repeated IndexUpdateReport updated_indexes = 1 ; } oneof message { // Progress of the package index download. DownloadProgress download_progress = 1 ; // The result of the index update. Result result = 2 ; } } message UpdateLibrariesIndexResponse { message Result { // The result of the libraries index update. IndexUpdateReport libraries_index = 1 ; } oneof message { // Progress of the libraries index download. DownloadProgress download_progress = 1 ; // The result of the index update. Result result = 2 ; } } The IndexUpdateReport message contains details for each index update operation performed: message IndexUpdateReport { enum Status { // The status of the index update is unspecified. STATUS_UNSPECIFIED = 0 ; // The index has been successfully updated. STATUS_UPDATED = 1 ; // The index was already up to date. STATUS_ALREADY_UP_TO_DATE = 2 ; // The index update failed. STATUS_FAILED = 3 ; // The index update was skipped. STATUS_SKIPPED = 4 ; } // The URL of the index that was updated. string index_url = 1 ; // The result of the index update. Status status = 2 ; } The gRPC cc.arduino.cli.commands.v1.Profile message has been removed in favor of SketchProfile \u00b6 The message Profile has been replaced with SketchProfile in the InitResponse.profile field: message InitResponse { oneof message { Progress init_progress = 1 ; google.rpc.Status error = 2 ; // Selected profile information SketchProfile profile = 3 ; } } The gRPC cc.arduino.cli.commands.v1.LoadSketchResponse message has been changed. \u00b6 Previously the LoadSketchResponse containted all the information about the sketch: message LoadSketchResponse { string main_file = 1 ; string location_path = 2 ; repeated string other_sketch_files = 3 ; repeated string additional_files = 4 ; repeated string root_folder_files = 5 ; string default_fqbn = 6 ; string default_port = 7 ; string default_protocol = 8 ; repeated SketchProfile profiles = 9 ; SketchProfile default_profile = 10 ; } Now all the metadata have been moved into a specific Sketch message: message LoadSketchResponse { Sketch sketch = 1 ; } message Sketch { string main_file = 1 ; string location_path = 2 ; repeated string other_sketch_files = 3 ; repeated string additional_files = 4 ; repeated string root_folder_files = 5 ; string default_fqbn = 6 ; string default_port = 7 ; string default_protocol = 8 ; repeated SketchProfile profiles = 9 ; SketchProfile default_profile = 10 ; } Drop support for builtin.tools \u00b6 We're dropping the builtin.tools support. It was the equivalent of Arduino IDE 1.x bundled tools directory. The gRPC cc.arduino.cli.commands.v1.MonitorRequest message has been changed. \u00b6 Previously the MonitorRequest was a single message used to open the monitor, to stream data, and to change the port configuration: message MonitorRequest { // Arduino Core Service instance from the `Init` response. Instance instance = 1 ; // Port to open, must be filled only on the first request Port port = 2 ; // The board FQBN we are trying to connect to. This is optional, and it's // needed to disambiguate if more than one platform provides the pluggable // monitor for a given port protocol. string fqbn = 3 ; // Data to send to the port bytes tx_data = 4 ; // Port configuration, optional, contains settings of the port to be applied MonitorPortConfiguration port_configuration = 5 ; } Now the meaning of the fields has been clarified with the oneof clause, making it more explicit: message MonitorRequest { oneof message { // Open request, it must be the first incoming message MonitorPortOpenRequest open_request = 1 ; // Data to send to the port bytes tx_data = 2 ; // Port configuration, contains settings of the port to be changed MonitorPortConfiguration updated_configuration = 3 ; // Close message, set to true to gracefully close a port (this ensure // that the gRPC streaming call is closed by the daemon AFTER the port // has been successfully closed) bool close = 4 ; } } message MonitorPortOpenRequest { // Arduino Core Service instance from the `Init` response. Instance instance = 1 ; // Port to open, must be filled only on the first request Port port = 2 ; // The board FQBN we are trying to connect to. This is optional, and it's // needed to disambiguate if more than one platform provides the pluggable // monitor for a given port protocol. string fqbn = 3 ; // Port configuration, optional, contains settings of the port to be applied MonitorPortConfiguration port_configuration = 4 ; } Now the message field MonitorPortOpenRequest.open_request must be sent in the first message after opening the streaming gRPC call. The identification number of the fields has been changed, this change is not binary compatible with old clients. Some golang modules from github.com/arduino/arduino-cli/* have been made private. \u00b6 The following golang modules are no longer available as public API: github.com/arduino/arduino-cli/arduino github.com/arduino/arduino-cli/buildcache github.com/arduino/arduino-cli/client_example github.com/arduino/arduino-cli/configuration github.com/arduino/arduino-cli/docsgen github.com/arduino/arduino-cli/executils github.com/arduino/arduino-cli/i18n github.com/arduino/arduino-cli/table Most of the executils library has been integrated inside the go-paths library github.com/arduino/go-paths-helper . The other packages are not intended for usage outside the Arduino CLI, we will keep them internal to allow future breaking changes as needed. CLI changed JSON output for some lib , core , config , board , and sketch commands. \u00b6 arduino-cli lib list --format json results are now wrapped under installed_libraries key { \"installed_libraries\": [ {...}, {...} ] } arduino-cli lib examples --format json results are now wrapped under examples key { \"examples\": [ {...}, {...} ] } arduino-cli core search --format json and arduino-cli core list --format json results are now wrapped under platforms key { \"platforms\": [ {...}, {...} ] } arduino-cli config init --format json now correctly returns a json object containg the config path { \"config_path\": \"/home/user/.arduino15/arduino-cli.yaml\" } arduino-cli config dump --format json results are now wrapped under config key { \"config\": { ... } } arduino-cli board search --format json results are now wrapped under boards key { \"boards\": [ {...}, {...} ] } arduino-cli board list --format json results are now wrapped under detected_ports key { \"detected_ports\": [ {...}, {...} ] } arduino-cli sketch new now correctly returns a json object containing the sketch path { \"sketch_path\": \"/tmp/my_sketch\" } The gRPC response cc.arduino.cli.commands.v1.CompileResponse has been changed. \u00b6 The CompilerResponse message has been refactored to made explicit which fields are intended for streaming the build process and which fields are part of the build result. The old CompilerResposne : message CompileResponse { // The output of the compilation process (stream) bytes out_stream = 1; // The error output of the compilation process (stream) bytes err_stream = 2; // The compiler build path string build_path = 3; // The libraries used in the build repeated Library used_libraries = 4; // The size of the executable split by sections repeated ExecutableSectionSize executable_sections_size = 5; // The platform where the board is defined InstalledPlatformReference board_platform = 6; // The platform used for the build (if referenced from the board platform) InstalledPlatformReference build_platform = 7; // Completions reports of the compilation process (stream) TaskProgress progress = 8; // Build properties used for compiling repeated string build_properties = 9; // Compiler errors and warnings repeated CompileDiagnostic diagnostics = 10; } has been split into a CompilerResponse and a BuilderResult : message CompileResponse { oneof message { // The output of the compilation process (stream) bytes out_stream = 1; // The error output of the compilation process (stream) bytes err_stream = 2; // Completions reports of the compilation process (stream) TaskProgress progress = 3; // The compilation result BuilderResult result = 4; } } message BuilderResult { // The compiler build path string build_path = 1; // The libraries used in the build repeated Library used_libraries = 2; // The size of the executable split by sections repeated ExecutableSectionSize executable_sections_size = 3; // The platform where the board is defined InstalledPlatformReference board_platform = 4; // The platform used for the build (if referenced from the board platform) InstalledPlatformReference build_platform = 5; // Build properties used for compiling repeated string build_properties = 7; // Compiler errors and warnings repeated CompileDiagnostic diagnostics = 8; } with a clear distinction on which fields are streamed. The gRPC response cc.arduino.cli.commands.v1.UploadUsingProgrammerResponse and cc.arduino.cli.commands.v1.BurnBootloaderResponse has been changed. \u00b6 The old messages: message UploadUsingProgrammerResponse { // The output of the upload process. bytes out_stream = 1; // The error output of the upload process. bytes err_stream = 2; } message BurnBootloaderResponse { // The output of the burn bootloader process. bytes out_stream = 1; // The error output of the burn bootloader process. bytes err_stream = 2; } now have the oneof clause that makes explicit the streaming nature of the response: message UploadUsingProgrammerResponse { oneof message { // The output of the upload process. bytes out_stream = 1; // The error output of the upload process. bytes err_stream = 2; } } message BurnBootloaderResponse { oneof message { // The output of the burn bootloader process. bytes out_stream = 1; // The error output of the burn bootloader process. bytes err_stream = 2; } } The gRPC cc.arduino.cli.commands.v1.PlatformRelease has been changed. \u00b6 We've added a new field called compatible . This field indicates if the current platform release is installable or not. It may happen that a platform doesn't have a dependency available for an OS/ARCH, in such cases, if we try to install the platform it will fail. The new field can be used to know upfront if a specific release is installable. The gRPC cc.arduino.cli.commands.v1.PlatformSummary has been changed. \u00b6 We've modified the behavior of latest_version . Now this field indicates the latest version that can be installed in the current OS/ARCH. core list now returns only the latest version that can be installed. \u00b6 Previously, we showed the latest version without checking if all the dependencies were available in the current OS/ARCH. Now, the latest version will always point to an installable one even if a newer incompatible one is present. core search now returns the latest installable version of a core. \u00b6 We now show in the version column the latest installable version. If none are available then we show a n/a label. The corresponding command with --format json now returns the same output of arduino-cli core search --all --format json . core upgrade and core install will install the latest compatible version. \u00b6 Previously, we'd have tried the installation/upgrade of a core even if all the required tools weren't available in the current OS/ARCH. Now we check this upfront, and allowing the installation of incompatible versions only if a user explicitly provides it like: core install arduino:renesas_uno@1.0.2 gRPC service cc.arduino.cli.settings.v1 has been removed, and all RPC calls have been migrated to cc.arduino.cli.commands.v1 \u00b6 The service cc.arduino.cli.settings.v1 no longer exists and all existing RPC calls have been moved to the cc.arduino.cli.commands.v1 service adding a Settings prefix to the names of all messages. The existing RPC calls: rpc GetAll(GetAllRequest) returns (GetAllResponse) rpc Merge(MergeRequest) returns (MergeResponse) rpc GetValue(GetValueRequest) returns (GetValueResponse) rpc SetValue(SetValueRequest) returns (SetValueResponse) rpc Write(WriteRequest) returns (WriteResponse) rpc Delete(DeleteRequest) returns (DeleteResponse) are now renamed to: rpc SettingsGetAll(SettingsGetAllRequest) returns (SettingsGetAllResponse) rpc SettingsMerge(SettingsMergeRequest) returns (SettingsMergeResponse) rpc SettingsGetValue(SettingsGetValueRequest) returns (SettingsGetValueResponse) rpc SettingsSetValue(SettingsSetValueRequest) returns (SettingsSetValueResponse) rpc SettingsWrite(SettingsWriteRequest) returns (SettingsWriteResponse) rpc SettingsDelete(SettingsDeleteRequest) returns (SettingsDeleteResponse) gRPC cc.arduino.cli.commands.v1.LibrarySearchRequest message has been changed. \u00b6 The query field has been removed, use search_args instead. CLI core list and core search changed JSON output. \u00b6 Below is an example of the response containing an object with all possible keys set. [ { \"id\" : \"arduino:avr\" , \"maintainer\" : \"Arduino\" , \"website\" : \"http://www.arduino.cc/\" , \"email\" : \"packages@arduino.cc\" , \"indexed\" : true , \"manually_installed\" : true , \"deprecated\" : true , \"releases\" : { \"1.6.2\" : { \"name\" : \"Arduino AVR Boards\" , \"version\" : \"1.6.2\" , \"type\" : [ \"Arduino\" ], \"installed\" : true , \"boards\" : [ { \"name\" : \"Arduino Robot Motor\" } ], \"help\" : { \"online\" : \"http://www.arduino.cc/en/Reference/HomePage\" }, \"missing_metadata\" : true , \"deprecated\" : true }, \"1.8.3\" : { ... } }, \"installed_version\" : \"1.6.2\" , \"latest_version\" : \"1.8.3\" } ] gRPC cc.arduino.cli.commands.v1.PlatformSearchResponse message has been changed. \u00b6 The old behavior was a bit misleading to the client because, to list all the available versions for each platform, we used to use the latest as it was describing the current platform version. We introduced a new message: PlatformSummary , with the intent to make the response more straightforward and less error-prone. message PlatformSearchResponse { // Results of the search. repeated PlatformSummary search_output = 1 ; } // PlatformSummary is a structure containing all the information about // a platform and all its available releases. message PlatformSummary { // Generic information about a platform PlatformMetadata metadata = 1 ; // Maps version to the corresponding PlatformRelease map < string , PlatformRelease > releases = 2 ; // The installed version of the platform, or empty string if none installed string installed_version = 3 ; // The latest available version of the platform, or empty if none available string latest_version = 4 ; } The new response contains an array of PlatformSummary . PlatformSummary contains all the information about a platform and all its available releases. Releases contain all the PlatformReleases of a specific platform, and the key is the semver string of a specific version. We've added the installed_version and latest_version to make more convenient the access of such values in the map. A few notes about the behavior of the releases map: It can be empty if no releases are found It can contain a single-release It can contain multiple releases If in the request we provide the manually_installed=true , the key of such release is an empty string. Removed gRPC API: cc.arduino.cli.commands.v1.PlatformList , PlatformListRequest , and PlatformListResponse . \u00b6 The following gRPC API have been removed: cc.arduino.cli.commands.v1.PlatformList : you can use the already available gRPC method PlatformSearch to perform the same task. Setting the all_versions=true and manually_installed=true in the PlatformSearchRequest returns all the data needed to produce the same result of the old api. cc.arduino.cli.commands.v1.PlatformListRequest . cc.arduino.cli.commands.v1.PlatformListResponse . gRPC cc.arduino.cli.commands.v1.Platform message has been changed. \u00b6 The old Platform and other information such as name, website, and email... contained details about the currently installed version and the latest available. We noticed an ambiguous use of the latest field, especially when such a message came in the PlatformSearchResponse response. In that use case, the latest field contained the specific version of a particular platform: this is a hack because the value doesn't always reflect the meaning of that property. Another inconsistent case occurs when a platform maintainer changes the name of a particular release. We always pick the value from the latest release, but this might not be what we want to do all the time. We concluded that the design of that message isn't something to be considered future-proof proof, so we decided to modify it as follows: // Platform is a structure containing all the information about a single // platform release. message Platform { // Generic information about a platform PlatformMetadata metadata = 1 ; // Information about a specific release of a platform PlatformRelease release = 2 ; } // PlatformMetadata contains generic information about a platform (not // correlated to a specific release). message PlatformMetadata { // Platform ID (e.g., `arduino:avr`). string id = 1 ; // Maintainer of the platform's package. string maintainer = 2 ; // A URL provided by the author of the platform's package, intended to point // to their website. string website = 3 ; // Email of the maintainer of the platform's package. string email = 4 ; // If true this Platform has been installed manually in the user' sketchbook // hardware folder bool manually_installed = 5 ; // True if the latest release of this Platform has been deprecated bool deprecated = 6 ; // If true the platform is indexed bool indexed = 7 ; } // PlatformRelease contains information about a specific release of a platform. message PlatformRelease { // Name used to identify the platform to humans (e.g., \"Arduino AVR Boards\"). string name = 1 ; // Version of the platform release string version = 5 ; // Type of the platform. repeated string type = 6 ; // True if the platform is installed bool installed = 7 ; // List of boards provided by the platform. If the platform is installed, // this is the boards listed in the platform's boards.txt. If the platform is // not installed, this is an arbitrary list of board names provided by the // platform author for display and may not match boards.txt. repeated Board boards = 8 ; // A URL provided by the author of the platform's package, intended to point // to their online help service. HelpResources help = 9 ; // This field is true if the platform is missing installation metadata (this // happens if the platform has been installed with the legacy Arduino IDE // <=1.8.x). If the platform miss metadata and it's not indexed through a // package index, it may fail to work correctly in some circumstances, and it // may need to be reinstalled. This should be evaluated only when the // PlatformRelease is `Installed` otherwise is an undefined behaviour. bool missing_metadata = 10 ; // True this release is deprecated bool deprecated = 11 ; } To address all the inconsistencies/inaccuracies we introduced two messages: PlatformMetadata contains generic information about a platform (not correlated to a specific release). PlatformRelease contains information about a specific release of a platform. debugging_supported field has been removed from gRPC cc.arduino.cli.commands.v1.BoardDetails and board details command in CLI \u00b6 The debugging_supported field has been removed, since the possibility to debug is determined by: the board selected the board option selected the programmer selected the board details command has no sufficient information to determine it. If you need to determine if a specific selection of board + option + programmer supports debugging, use the gRPC call cc.arduino.cli.commands.v1.GetDebugConfig : if the call is successful, it means that the debugging is supported. 0.35.0 \u00b6 CLI debug --info changed JSON output. \u00b6 The string field server_configuration.script is now an array and has been renamed scripts , here an example: { \"executable\" : \"/tmp/arduino/sketches/002050EAA7EFB9A4FC451CDFBC0FA2D3/Blink.ino.elf\" , \"toolchain\" : \"gcc\" , \"toolchain_path\" : \"/home/user/.arduino15/packages/arduino/tools/arm-none-eabi-gcc/7-2017q4/bin/\" , \"toolchain_prefix\" : \"arm-none-eabi\" , \"server\" : \"openocd\" , \"server_path\" : \"/home/user/.arduino15/packages/arduino/tools/openocd/0.10.0-arduino7/bin/openocd\" , \"server_configuration\" : { \"path\" : \"/home/user/.arduino15/packages/arduino/tools/openocd/0.10.0-arduino7/bin/openocd\" , \"scripts_dir\" : \"/home/user/.arduino15/packages/arduino/tools/openocd/0.10.0-arduino7/share/openocd/scripts/\" , \"scripts\" : [ \"/home/user/Workspace/arduino-cli/internal/integrationtest/debug/testdata/hardware/my/samd/variants/arduino:mkr1000/openocd_scripts/arduino_zero.cfg\" ] } } gRPC cc.arduino.cli.commands.v1.GetDebugConfigResponse message has been changed. \u00b6 The fields toolchain_configuration and server_configuration are no more generic map<string, string> but they have changed type to goog.protobuf.Any , the concrete type is assigned at runtime based on the value of toolchain and server fields respectively. For the moment: only gcc is supported for toolchain , and the concrete type for toolchain_configuration is DebugGCCToolchainConfiguration . only openocd is supported for server , and the concrete type for server_configuration is DebugOpenOCDServerConfiguration More concrete type may be added in the future as more servers/toolchains support is implemented. gRPC service cc.arduino.cli.debug.v1 moved to cc.arduino.cli.commands.v1 . \u00b6 The gRPC service cc.arduino.cli.debug.v1 has been removed and all gRPC messages and rpc calls have been moved to cc.arduino.cli.commands.v1 . The gRPC message DebugConfigRequest has been renamed to the proper GetDebugConfigRequest . All the generated API has been updated as well. The gRPC cc.arduino.cli.commands.v1.BoardListWatchRequest command request has been changed. \u00b6 The gRPC message BoardListWatchRequest has been changed from: message BoardListWatchRequest { // Arduino Core Service instance from the `Init` response. Instance instance = 1; // Set this to true to stop the discovery process bool interrupt = 2; } to message BoardListWatchRequest { // Arduino Core Service instance from the `Init` response. Instance instance = 1; } The gRPC cc.arduino.cli.commands.v1.BoardListWatch service is now server stream only. \u00b6 rpc BoardListWatch(BoardListWatchRequest) returns (stream BoardListWatchResponse); 0.34.0 \u00b6 The gRPC cc.arduino.cli.commands.v1.UploadRepsonse command response has been changed. \u00b6 Previously the UploadResponse was used only to stream the tool output: message UploadResponse { // The output of the upload process. bytes out_stream = 1; // The error output of the upload process. bytes err_stream = 2; } Now the API logic has been clarified using the oneof clause and another field has been added providing an UploadResult message that is sent when a successful upload completes. message UploadResponse { oneof message { // The output of the upload process. bytes out_stream = 1; // The error output of the upload process. bytes err_stream = 2; // The upload result UploadResult result = 3; } } message UploadResult { // When a board requires a port disconnection to perform the upload, this // field returns the port where the board reconnects after the upload. Port updated_upload_port = 1; } golang API: method github.com/arduino/arduino-cli/commands/upload.Upload changed signature \u00b6 The Upload method signature has been changed from: func Upload ( ctx context . Context , req * rpc . UploadRequest , outStream io . Writer , errStream io . Writer ) error { ... } to: func Upload ( ctx context . Context , req * rpc . UploadRequest , outStream io . Writer , errStream io . Writer ) ( * rpc . UploadResult , error ) { ... } Now an UploadResult structure is returned together with the error. If you are not interested in the information contained in the structure you can safely ignore it. golang package github.com/arduino/arduino-cli/inventory removed from public API \u00b6 The package inventory is no more a public golang API. board list --watch command JSON output has changed \u00b6 board list --watch command JSON output changed from: { \"type\": \"add\", \"address\": \"COM3\", \"label\": \"COM3\", \"protocol\": \"serial\", \"protocol_label\": \"Serial Port (USB)\", \"hardwareId\": \"93B0245008567CB2\", \"properties\": { \"pid\": \"0x005E\", \"serialNumber\": \"93B0245008567CB2\", \"vid\": \"0x2341\" }, \"boards\": [ { \"name\": \"Arduino Nano RP2040 Connect\", \"fqbn\": \"arduino:mbed_nano:nanorp2040connect\" } ] } to: { \"eventType\": \"add\", \"matching_boards\": [ { \"name\": \"Arduino Nano RP2040 Connect\", \"fqbn\": \"arduino:mbed_nano:nanorp2040connect\" } ], \"port\": { \"address\": \"COM3\", \"label\": \"COM3\", \"protocol\": \"serial\", \"protocol_label\": \"Serial Port (USB)\", \"properties\": { \"pid\": \"0x005E\", \"serialNumber\": \"93B0245008567CB2\", \"vid\": \"0x2341\" }, \"hardware_id\": \"93B0245008567CB2\" } } Updated sketch name specifications \u00b6 Sketch name specifications have been updated to achieve cross-platform compatibility. Existing sketch names violating the new constraint need to be updated. golang API: LoadSketch function has been moved \u00b6 The function github.com/arduino/arduino-cli/commands.LoadSketch has been moved to package github.com/arduino/arduino-cli/commands/sketch.LoadSketch . You must change the import accordingly. 0.33.0 \u00b6 gRPC cc.arduino.cli.commands.v1.Compile command now return expanded build_properties by default. \u00b6 The gRPC cc.arduino.cli.commands.v1.Compile command now return expanded build_properties by default. If you want the **un**expanded build_properties you must set to true the field do_not_expand_build_properties in the CompileRequest . compile --show-properties now return the expanded build properties. \u00b6 The command compile --show-properties now returns the expanded build properties, with the variable placeholders replaced with their current value. If you need the **un**expanded build properties you must change the command line to compile --show-properties=unexpanded . Before: $ arduino-cli board details -b arduino:avr:uno --show-properties | grep ^tools.avrdude.path tools.avrdude.path={runtime.tools.avrdude.path} Now: $ arduino-cli board details -b arduino:avr:uno --show-properties | grep ^tools.avrdude.path tools.avrdude.path=/home/megabug/.arduino15/packages/arduino/tools/avrdude/6.3.0-arduino17 $ arduino-cli board details -b arduino:avr:uno --show-properties=unexpanded | grep ^tools.avrdude.path tools.avrdude.path={runtime.tools.avrdude.path} 0.32.2 \u00b6 golang API: method github.com/arduino/arduino-cli/arduino/cores/Board.GetBuildProperties changed signature \u00b6 The method: func ( b * Board ) GetBuildProperties ( userConfigs * properties . Map ) ( * properties . Map , error ) { ... } now requires a full FQBN object; func ( b * Board ) GetBuildProperties ( fqbn * FQBN ) ( * properties . Map , error ) { ... } Existing code may be updated from: b . GetBuildProperties ( fqbn . Configs ) to b.GetBuildProperties(fqbn) 0.32.0 \u00b6 arduino-cli doesn't lookup anymore in the current directory for configuration file. \u00b6 Configuration file lookup in current working directory and its parents is dropped. The command line flag --config-file must be specified to use an alternative configuration file from the one in the data directory. Command outdated output change \u00b6 For text format (default), the command prints now a single table for platforms and libraries instead of two separate tables. Similarly, for JSON and YAML formats, the command prints now a single valid object, with platform and libraries top-level keys. For example, for JSON output: $ arduino-cli outdated --format json { \"platforms\": [ { \"id\": \"arduino:avr\", \"installed\": \"1.6.3\", \"latest\": \"1.8.6\", \"name\": \"Arduino AVR Boards\", ... } ], \"libraries\": [ { \"library\": { \"name\": \"USBHost\", \"author\": \"Arduino\", \"maintainer\": \"Arduino \\u003cinfo@arduino.cc\\u003e\", \"category\": \"Device Control\", \"version\": \"1.0.0\", ... }, \"release\": { \"author\": \"Arduino\", \"version\": \"1.0.5\", \"maintainer\": \"Arduino \\u003cinfo@arduino.cc\\u003e\", \"category\": \"Device Control\", ... } } ] } Command compile does not support --vid-pid flag anymore \u00b6 It was a legacy and undocumented feature that is now useless. The corresponding field in gRPC CompileRequest.vid_pid has been removed as well. golang API: method github.com/arduino/arduino-cli/arduino/libraries/Library.LocationPriorityFor removed \u00b6 That method was outdated and must not be used. golang API: method github.com/arduino/arduino-cli/commands/core/GetPlatforms renamed \u00b6 The following method in github.com/arduino/arduino-cli/commands/core : func GetPlatforms ( req * rpc . PlatformListRequest ) ([] * rpc . Platform , error ) { ... } has been changed to: func PlatformList ( req * rpc . PlatformListRequest ) ( * rpc . PlatformListResponse , error ) { ... } now it better follows the gRPC API interface. Old code like the following: platforms , _ := core . GetPlatforms ( & rpc . PlatformListRequest { Instance : inst }) for _ , i := range platforms { ... } must be changed as follows: // Use PlatformList function instead of GetPlatforms platforms , _ := core . PlatformList ( & rpc . PlatformListRequest { Instance : inst }) // Access installed platforms through the .InstalledPlatforms field for _ , i := range platforms . InstalledPlatforms { ... } 0.31.0 \u00b6 Added post_install script support for tools \u00b6 The post_install script now runs when a tool is correctly installed and the CLI is in \"interactive\" mode. This behavior can be configured . golang API: methods in github.com/arduino/arduino-cli/arduino/cores/packagemanager changed signature \u00b6 The following methods in github.com/arduino/arduino-cli/arduino/cores/packagemanager : func ( pme * Explorer ) InstallTool ( toolRelease * cores . ToolRelease , taskCB rpc . TaskProgressCB ) error { ... } func ( pme * Explorer ) RunPostInstallScript ( platformRelease * cores . PlatformRelease ) error { ... } have changed. InstallTool requires the new skipPostInstall parameter, which must be set to true to skip the post install script. RunPostInstallScript does not require a *cores.PlatformRelease parameter but requires a *paths.Path parameter: func ( pme * Explorer ) InstallTool ( toolRelease * cores . ToolRelease , taskCB rpc . TaskProgressCB , skipPostInstall bool ) error { ... } func ( pme * Explorer ) RunPostInstallScript ( installDir * paths . Path ) error { ... } 0.30.0 \u00b6 Sketch name validation \u00b6 The sketch name submitted via the sketch new command of the CLI or the gRPC command cc.arduino.cli.commands.v1.NewSketch are now validated. The applied rules follow the sketch specifications . Existing sketch names violating the new constraint need to be updated. daemon CLI command's --ip flag removal \u00b6 The daemon CLI command no longer allows to set a custom ip for the gRPC communication. Currently there is not enough bandwith to support this feature. For this reason, the --ip flag has been removed. board attach CLI command changed behaviour \u00b6 The board attach CLI command has changed behaviour: now it just pick whatever port and FQBN is passed as parameter and saves it in the sketch.yaml file, without any validity check or board autodetection. The sketch.json file is now completely ignored. cc.arduino.cli.commands.v1.BoardAttach gRPC interface command removal \u00b6 The cc.arduino.cli.commands.v1.BoardAttach gRPC command has been removed. This feature is no longer available through gRPC. golang API: methods in github.com/arduino/arduino-cli/commands/upload changed return type \u00b6 The following methods in github.com/arduino/arduino-cli/commands/upload : func Upload ( ctx context . Context , req * rpc . UploadRequest , outStream io . Writer , errStream io . Writer ) ( * rpc . UploadResponse , error ) { ... } func UsingProgrammer ( ctx context . Context , req * rpc . UploadUsingProgrammerRequest , outStream io . Writer , errStream io . Writer ) ( * rpc . UploadUsingProgrammerResponse , error ) { ... } do not return anymore the response (because it's always empty): func Upload ( ctx context . Context , req * rpc . UploadRequest , outStream io . Writer , errStream io . Writer ) error { ... } func UsingProgrammer ( ctx context . Context , req * rpc . UploadUsingProgrammerRequest , outStream io . Writer , errStream io . Writer ) error { ... } golang API: methods in github.com/arduino/arduino-cli/commands/compile changed signature \u00b6 The following method in github.com/arduino/arduino-cli/commands/compile : func Compile ( ctx context . Context , req * rpc . CompileRequest , outStream , errStream io . Writer , progressCB rpc . TaskProgressCB , debug bool ) ( r * rpc . CompileResponse , e error ) { ... } do not require the debug parameter anymore: func Compile ( ctx context . Context , req * rpc . CompileRequest , outStream , errStream io . Writer , progressCB rpc . TaskProgressCB ) ( r * rpc . CompileResponse , e error ) { ... } golang API: package github.com/arduino/arduino-cli/cli is no more public \u00b6 The package cli has been made internal. The code in this package is no more public API and can not be directly imported in other projects. golang API change in github.com/arduino/arduino-cli/arduino/libraries/librariesmanager.LibrariesManager \u00b6 The following LibrariesManager.InstallPrerequisiteCheck methods have changed prototype, from: func ( lm * LibrariesManager ) InstallPrerequisiteCheck ( indexLibrary * librariesindex . Release , installLocation libraries . LibraryLocation ) ( * paths . Path , * libraries . Library , error ) { ... } func ( lm * LibrariesManager ) InstallZipLib ( ctx context . Context , archivePath string , overwrite bool ) error { ... } to func ( lm * LibrariesManager ) InstallPrerequisiteCheck ( indexLibrary * librariesindex . Release , installLocation libraries . LibraryLocation ) ( * paths . Path , * libraries . Library , error ) { ... } func ( lm * LibrariesManager ) InstallZipLib ( ctx context . Context , archivePath * paths . Path , overwrite bool ) error { ... } InstallPrerequisiteCheck now requires an explicit name and version instead of a librariesindex.Release , because it can now be used to check any library, not only the libraries available in the index. Also the return value has changed to a LibraryInstallPlan structure, it contains the same information as before ( TargetPath and ReplacedLib ) plus Name , Version , and an UpToDate boolean flag. InstallZipLib method archivePath is now a paths.Path instead of a string . golang API change in github.com/arduino/arduino-cli/rduino/cores/packagemanager.Explorer \u00b6 The packagemanager.Explorer method FindToolsRequiredForBoard : func ( pme * Explorer ) FindToolsRequiredForBoard ( board * cores . Board ) ([] * cores . ToolRelease , error ) { ... } has been renamed to `FindToolsRequiredForBuild: func ( pme * Explorer ) FindToolsRequiredForBuild ( platform , buildPlatform * cores . PlatformRelease ) ([] * cores . ToolRelease , error ) { ... } moreover it now requires the platform and the buildPlatform (a.k.a. the referenced platform core used for the compile) instead of the board . Usually these two value are obtained from the Explorer.ResolveFQBN(...) method. 0.29.0 \u00b6 Removed gRPC API: cc.arduino.cli.commands.v1.UpdateCoreLibrariesIndex , Outdated , and Upgrade \u00b6 The following gRPC API have been removed: cc.arduino.cli.commands.v1.UpdateCoreLibrariesIndex : you can use the already available gRPC methods UpdateIndex and UpdateLibrariesIndex to perform the same tasks. cc.arduino.cli.commands.v1.Outdated : you can use the already available gRPC methods PlatformList and LibraryList to perform the same tasks. cc.arduino.cli.commands.v1.Upgrade : you can use the already available gRPC methods PlatformUpgrade and LibraryUpgrade to perform the same tasks. The golang API implementation of the same functions has been removed as well, so the following function are no more available: github.com/arduino/arduino-cli/commands.UpdateCoreLibrariesIndex(...) github.com/arduino/arduino-cli/commands/outdated.Outdated(...) github.com/arduino/arduino-cli/commands/upgrade.Upgrade(...) you can use the following functions as a replacement to do the same tasks: github.com/arduino/arduino-cli/commands.UpdateLibrariesIndex(...) github.com/arduino/arduino-cli/commands.UpdateIndex(...) github.com/arduino/arduino-cli/commands/core.GetPlatforms(...) github.com/arduino/arduino-cli/commands/lib.LibraryList(...) github.com/arduino/arduino-cli/commands/lib.LibraryUpgrade(...) github.com/arduino/arduino-cli/commands/lib.LibraryUpgradeAll(...) github.com/arduino/arduino-cli/commands/core.PlatformUpgrade(...) Changes in golang functions github.com/arduino/arduino-cli/cli/instance.Init and InitWithProfile \u00b6 The following functions: func Init ( instance * rpc . Instance ) [] error { } func InitWithProfile ( instance * rpc . Instance , profileName string , sketchPath * paths . Path ) ( * rpc . Profile , [] error ) { } no longer return the errors array: func Init ( instance * rpc . Instance ) { } func InitWithProfile ( instance * rpc . Instance , profileName string , sketchPath * paths . Path ) * rpc . Profile { } The errors are automatically sent to output via feedback package, as for the other Init* functions. 0.28.0 \u00b6 Breaking changes in libraries name handling \u00b6 In the structure github.com/arduino/arduino-cli/arduino/libraries.Library the field: RealName has been renamed to Name Name has been renamed to DirName Now Name is the name of the library as it appears in the library.properties file and DirName it's the name of the directory containing the library. The DirName is usually the name of the library with non-alphanumeric characters converted to underscore, but it could be actually anything since the directory where the library is installed can be freely renamed. This change improves the overall code base naming coherence since all the structures involving libraries have the Name field that refers to the library name as it appears in the library.properties file. gRPC message cc.arduino.cli.commands.v1.Library no longer has real_name field \u00b6 You must use the name field instead. Machine readable lib list output no longer has \"real name\" field \u00b6 JSON \u00b6 The [*].library.real_name field has been removed. You must use the [*].library.name field instead. YAML \u00b6 The [*].library.realname field has been removed. You must use the [*].library.name field instead. github.com/arduino/arduino-cli/arduino/libraries/librariesmanager.LibrariesManager.Install removed parameter installLocation \u00b6 The method: func ( lm * LibrariesManager ) Install ( indexLibrary * librariesindex . Release , libPath * paths . Path , installLocation libraries . LibraryLocation ) error { ... } no more needs the installLocation parameter: func ( lm * LibrariesManager ) Install ( indexLibrary * librariesindex . Release , libPath * paths . Path ) error { ... } The install location is determined from the libPath. github.com/arduino/arduino-cli/arduino/libraries/librariesmanager.LibrariesManager.FindByReference now returns a list of libraries. \u00b6 The method: func ( lm * LibrariesManager ) FindByReference ( libRef * librariesindex . Reference , installLocation libraries . LibraryLocation ) * libraries . Library { ... } has been changed to: func ( lm * LibrariesManager ) FindByReference ( libRef * librariesindex . Reference , installLocation libraries . LibraryLocation ) libraries . List { ... } the method now returns all the libraries matching the criteria and not just the first one. github.com/arduino/arduino-cli/arduino/libraries/librariesmanager.LibraryAlternatives removed \u00b6 The structure librariesmanager.LibraryAlternatives has been removed. The libraries.List object can be used as a replacement. Breaking changes in UpdateIndex API (both gRPC and go-lang) \u00b6 The gRPC message cc.arduino.cli.commands.v1.DownloadProgress has been changed from: message DownloadProgress { // URL of the download. string url = 1; // The file being downloaded. string file = 2; // Total size of the file being downloaded. int64 total_size = 3; // Size of the downloaded portion of the file. int64 downloaded = 4; // Whether the download is complete. bool completed = 5; } to message DownloadProgress { oneof message { DownloadProgressStart start = 1; DownloadProgressUpdate update = 2; DownloadProgressEnd end = 3; } } message DownloadProgressStart { // URL of the download. string url = 1; // The label to display on the progress bar. string label = 2; } message DownloadProgressUpdate { // Size of the downloaded portion of the file. int64 downloaded = 1; // Total size of the file being downloaded. int64 total_size = 2; } message DownloadProgressEnd { // True if the download is successful bool success = 1; // Info or error message, depending on the value of 'success'. Some examples: // \"File xxx already downloaded\" or \"Connection timeout\" string message = 2; } The new message format allows a better handling of the progress update reports on downloads. Every download now will report a sequence of message as follows: DownloadProgressStart{url=\"https://...\", label=\"Downloading package index...\"} DownloadProgressUpdate{downloaded=0, total_size=103928} DownloadProgressUpdate{downloaded=29380, total_size=103928} DownloadProgressUpdate{downloaded=69540, total_size=103928} DownloadProgressEnd{success=true, message=\"\"} or if an error occurs: DownloadProgressStart{url=\"https://...\", label=\"Downloading package index...\"} DownloadProgressUpdate{downloaded=0, total_size=103928} DownloadProgressEnd{success=false, message=\"Server closed connection\"} or if the file is already cached: DownloadProgressStart{url=\"https://...\", label=\"Downloading package index...\"} DownloadProgressEnd{success=true, message=\"Index already downloaded\"} About the go-lang API the following functions in github.com/arduino/arduino-cli/commands : func UpdateIndex ( ctx context . Context , req * rpc . UpdateIndexRequest , downloadCB rpc . DownloadProgressCB ) ( * rpc . UpdateIndexResponse , error ) { ... } have changed their signature to: func UpdateIndex ( ctx context . Context , req * rpc . UpdateIndexRequest , downloadCB rpc . DownloadProgressCB , downloadResultCB rpc . DownloadResultCB ) error { ... } UpdateIndex do not return anymore the latest UpdateIndexResponse (beacuse it was always empty). 0.27.0 \u00b6 Breaking changes in golang API github.com/arduino/arduino-cli/arduino/cores/packagemanager.PackageManager \u00b6 The PackageManager API has been heavily refactored to correctly handle multitasking and concurrency. Many fields in the PackageManager object are now private. All the PackageManager methods have been moved into other objects. In particular: the methods that query the PackageManager without changing its internal state, have been moved into the new Explorer object the methods that change the PackageManager internal state, have been moved into the new Builder object. The Builder object must be used to create a new PackageManager . Previously the function NewPackageManager was used to get a clean PackageManager object and then use the LoadHardware* methods to build it. Now the function NewBuilder must be used to create a Builder , run the LoadHardware* methods to load platforms, and finally call the Builder.Build() method to obtain the final PackageManager . Previously we did: pm := packagemanager . NewPackageManager ( ... ) err = pm . LoadHardware () err = pm . LoadHardwareFromDirectories ( ... ) err = pm . LoadHardwareFromDirectory ( ... ) err = pm . LoadToolsFromPackageDir ( ... ) err = pm . LoadToolsFromBundleDirectories ( ... ) err = pm . LoadToolsFromBundleDirectory ( ... ) pack = pm . GetOrCreatePackage ( \"packagername\" ) // ...use `pack` to tweak or load more hardware... err = pm . LoadPackageIndex ( ... ) err = pm . LoadPackageIndexFromFile ( ... ) err = pm . LoadHardwareForProfile ( ... ) // ...use `pm` to implement business logic... Now we must do: var pm * packagemanager . PackageManager { pmb := packagemanager . Newbuilder ( ... ) err = pmb . LoadHardware () err = pmb . LoadHardwareFromDirectories ( ... ) err = pmb . LoadHardwareFromDirectory ( ... ) err = pmb . LoadToolsFromPackageDir ( ... ) err = pmb . LoadToolsFromBundleDirectories ( ... ) err = pmb . LoadToolsFromBundleDirectory ( ... ) pack = pmb . GetOrCreatePackage ( \"packagername\" ) // ...use `pack` to tweak or load more hardware... err = pmb . LoadPackageIndex ( ... ) err = pmb . LoadPackageIndexFromFile ( ... ) err = pmb . LoadHardwareForProfile ( ... ) pm = pmb . Build () } // ...use `pm` to implement business logic... It's not mandatory but highly recommended, to drop the Builder object once it has built the PackageManager (that's why in the example the pmb builder is created in a limited scope between braces). To query the PackagerManager now it is required to obtain an Explorer object through the PackageManager.NewExplorer() method. Previously we did: func DoStuff ( pm * packagemanager . PackageManager , ... ) { // ...implement business logic through PackageManager methods... ... := pm . Packages ... := pm . CustomGlobalProperties ... := pm . FindPlatform ( ... ) ... := pm . FindPlatformRelease ( ... ) ... := pm . FindPlatformReleaseDependencies ( ... ) ... := pm . DownloadToolRelease ( ... ) ... := pm . DownloadPlatformRelease ( ... ) ... := pm . IdentifyBoard ( ... ) ... := pm . DownloadAndInstallPlatformUpgrades ( ... ) ... := pm . DownloadAndInstallPlatformAndTools ( ... ) ... := pm . InstallPlatform ( ... ) ... := pm . InstallPlatformInDirectory ( ... ) ... := pm . RunPostInstallScript ( ... ) ... := pm . IsManagedPlatformRelease ( ... ) ... := pm . UninstallPlatform ( ... ) ... := pm . InstallTool ( ... ) ... := pm . IsManagedToolRelease ( ... ) ... := pm . UninstallTool ( ... ) ... := pm . IsToolRequired ( ... ) ... := pm . LoadDiscoveries ( ... ) ... := pm . GetProfile ( ... ) ... := pm . GetEnvVarsForSpawnedProcess ( ... ) ... := pm . DiscoveryManager ( ... ) ... := pm . FindPlatformReleaseProvidingBoardsWithVidPid ( ... ) ... := pm . FindBoardsWithVidPid ( ... ) ... := pm . FindBoardsWithID ( ... ) ... := pm . FindBoardWithFQBN ( ... ) ... := pm . ResolveFQBN ( ... ) ... := pm . Package ( ... ) ... := pm . GetInstalledPlatformRelease ( ... ) ... := pm . GetAllInstalledToolsReleases ( ... ) ... := pm . InstalledPlatformReleases ( ... ) ... := pm . InstalledBoards ( ... ) ... := pm . FindToolsRequiredFromPlatformRelease ( ... ) ... := pm . GetTool ( ... ) ... := pm . FindToolsRequiredForBoard ( ... ) ... := pm . FindToolDependency ( ... ) ... := pm . FindDiscoveryDependency ( ... ) ... := pm . FindMonitorDependency ( ... ) } Now we must obtain the Explorer object to access the same methods, moreover, we must call the release callback function once we complete the task: func DoStuff ( pm * packagemanager . PackageManager , ... ) { pme , release := pm . NewExplorer () defer release () ... := pme . GetPackages () ... := pme . GetCustomGlobalProperties () ... := pme . FindPlatform ( ... ) ... := pme . FindPlatformRelease ( ... ) ... := pme . FindPlatformReleaseDependencies ( ... ) ... := pme . DownloadToolRelease ( ... ) ... := pme . DownloadPlatformRelease ( ... ) ... := pme . IdentifyBoard ( ... ) ... := pme . DownloadAndInstallPlatformUpgrades ( ... ) ... := pme . DownloadAndInstallPlatformAndTools ( ... ) ... := pme . InstallPlatform ( ... ) ... := pme . InstallPlatformInDirectory ( ... ) ... := pme . RunPostInstallScript ( ... ) ... := pme . IsManagedPlatformRelease ( ... ) ... := pme . UninstallPlatform ( ... ) ... := pme . InstallTool ( ... ) ... := pme . IsManagedToolRelease ( ... ) ... := pme . UninstallTool ( ... ) ... := pme . IsToolRequired ( ... ) ... := pme . LoadDiscoveries ( ... ) ... := pme . GetProfile ( ... ) ... := pme . GetEnvVarsForSpawnedProcess ( ... ) ... := pme . DiscoveryManager ( ... ) ... := pme . FindPlatformReleaseProvidingBoardsWithVidPid ( ... ) ... := pme . FindBoardsWithVidPid ( ... ) ... := pme . FindBoardsWithID ( ... ) ... := pme . FindBoardWithFQBN ( ... ) ... := pme . ResolveFQBN ( ... ) ... := pme . Package ( ... ) ... := pme . GetInstalledPlatformRelease ( ... ) ... := pme . GetAllInstalledToolsReleases ( ... ) ... := pme . InstalledPlatformReleases ( ... ) ... := pme . InstalledBoards ( ... ) ... := pme . FindToolsRequiredFromPlatformRelease ( ... ) ... := pme . GetTool ( ... ) ... := pme . FindToolsRequiredForBoard ( ... ) ... := pme . FindToolDependency ( ... ) ... := pme . FindDiscoveryDependency ( ... ) ... := pme . FindMonitorDependency ( ... ) } The Explorer object keeps a read-lock on the underlying PackageManager that must be released once the task is done by calling the release callback function. This ensures that no other task will change the status of the PackageManager while the current task is in progress. The PackageManager.Clean() method has been removed and replaced by the methods: PackageManager.NewBuilder() (*Builder, commit func()) Builder.BuildIntoExistingPackageManager(target *PackageManager) Previously, to update a PackageManager instance we did: func Reload ( pm * packagemanager . PackageManager ) { pm . Clear () ... = pm . LoadHardware ( ... ) // ...other pm.Load* calls... } now we have two options: func Reload ( pm * packagemanager . PackageManager ) { // Create a new builder and build a package manager pmb := packagemanager . NewBuilder ( ... /* config params */ ) ... = pmb . LoadHardware ( ... ) // ...other pmb.Load* calls... // apply the changes to the original pm pmb . BuildIntoExistingPackageManager ( pm ) } in this case, we create a new Builder with the given config params and once the package manager is built we apply the changes atomically with BuildIntoExistingPackageManager . This procedure may be even more simplified with: func Reload ( pm * packagemanager . PackageManager ) { // Create a new builder using the same config params // as the original package manager pmb , commit := pm . NewBuilder () // build the new package manager ... = pmb . LoadHardware ( ... ) // ...other pmb.Load* calls... // apply the changes to the original pm commit () } In this case, we don't even need to bother to provide the configuration parameters because they are taken from the previous PackageManager instance. Some gRPC-mapped methods now accepts the gRPC request instead of the instance ID as parameter \u00b6 The following methods in subpackages of github.com/arduino/arduino-cli/commands/* : func Watch ( instanceID int32 ) ( <- chan * rpc . BoardListWatchResponse , func (), error ) { ... } func LibraryUpgradeAll ( instanceID int32 , downloadCB rpc . DownloadProgressCB , taskCB rpc . TaskProgressCB ) error { ... } func LibraryUpgrade ( instanceID int32 , libraryNames [] string , downloadCB rpc . DownloadProgressCB , taskCB rpc . TaskProgressCB ) error { ... } have been changed to: func Watch ( req * rpc . BoardListWatchRequest ) ( <- chan * rpc . BoardListWatchResponse , func (), error ) { ... } func LibraryUpgradeAll ( req * rpc . LibraryUpgradeAllRequest , downloadCB rpc . DownloadProgressCB , taskCB rpc . TaskProgressCB ) error { ... } func LibraryUpgrade ( ctx context . Context , req * rpc . LibraryUpgradeRequest , downloadCB rpc . DownloadProgressCB , taskCB rpc . TaskProgressCB ) error { ... } The following methods in package github.com/arduino/arduino-cli/commands func GetInstance ( id int32 ) * CoreInstance { ... } func GetPackageManager ( id int32 ) * packagemanager . PackageManager { ... } func GetLibraryManager ( instanceID int32 ) * librariesmanager . LibrariesManager { ... } have been changed to: func GetPackageManager ( instance rpc . InstanceCommand ) * packagemanager . PackageManager { ... } // Deprecated func GetPackageManagerExplorer ( req rpc . InstanceCommand ) ( explorer * packagemanager . Explorer , release func ()) { ... } func GetLibraryManager ( req rpc . InstanceCommand ) * librariesmanager . LibrariesManager { ... } Old code passing the instanceID inside the gRPC request must be changed to pass directly the whole gRPC request, for example: eventsChan , closeWatcher , err := board . Watch ( req . Instance . Id ) must be changed to: eventsChan , closeWatcher , err := board . Watch ( req ) Removed detection of Arduino IDE bundling \u00b6 Arduino CLI does not check anymore if it's bundled with the Arduino IDE 1.x. Previously this check allowed the Arduino CLI to automatically use the libraries and tools bundled in the Arduino IDE, now this is not supported anymore unless the configuration keys directories.builtin.libraries and directories.builtin.tools are set. gRPC enumeration renamed enum value in cc.arduino.cli.commands.v1.LibraryLocation \u00b6 LIBRARY_LOCATION_IDE_BUILTIN has been renamed to LIBRARY_LOCATION_BUILTIN go-lang API change in LibraryManager \u00b6 The following methods: func ( lm * LibrariesManager ) InstallPrerequisiteCheck ( indexLibrary * librariesindex . Release ) ( * paths . Path , * libraries . Library , error ) { ... } func ( lm * LibrariesManager ) Install ( indexLibrary * librariesindex . Release , libPath * paths . Path ) error { ... ] func ( alts * LibraryAlternatives ) FindVersion ( version * semver . Version , installLocation libraries . LibraryLocation ) * libraries . Library { ... } func ( lm * LibrariesManager ) FindByReference ( libRef * librariesindex . Reference ) * libraries . Library { ... } now requires a new parameter LibraryLocation : func ( lm * LibrariesManager ) InstallPrerequisiteCheck ( indexLibrary * librariesindex . Release , installLocation libraries . LibraryLocation ) ( * paths . Path , * libraries . Library , error ) { ... } func ( lm * LibrariesManager ) Install ( indexLibrary * librariesindex . Release , libPath * paths . Path , installLocation libraries . LibraryLocation ) error { ... ] func ( alts * LibraryAlternatives ) FindVersion ( version * semver . Version , installLocation libraries . LibraryLocation ) * libraries . Library { ... } + func ( lm * LibrariesManager ) FindByReference ( libRef * librariesindex . Reference , installLocation libraries . LibraryLocation ) * libraries . Library { ... } If you're not interested in specifying the LibraryLocation you can use libraries.User to refer to the user directory. go-lang functions changes in github.com/arduino/arduino-cli/configuration \u00b6 github.com/arduino/arduino-cli/configuration.IsBundledInDesktopIDE function has been removed. github.com/arduino/arduino-cli/configuration.BundleToolsDirectories has been renamed to BuiltinToolsDirectories github.com/arduino/arduino-cli/configuration.IDEBundledLibrariesDir has been renamed to IDEBuiltinLibrariesDir Removed utils.FeedStreamTo and utils.ConsumeStreamFrom \u00b6 github.com/arduino/arduino-cli/arduino/utils.FeedStreamTo and github.com/arduino/arduino-cli/arduino/utils.ConsumeStreamFrom are now private. They are mainly used internally for gRPC stream handling and are not suitable to be public API. 0.26.0 \u00b6 github.com/arduino/arduino-cli/commands.DownloadToolRelease , and InstallToolRelease functions have been removed \u00b6 This functionality was duplicated and already available via PackageManager methods. github.com/arduino/arduino-cli/commands.Outdated and Upgrade functions have been moved \u00b6 github.com/arduino/arduino-cli/commands.Outdated is now github.com/arduino/arduino-cli/commands/outdated.Outdated github.com/arduino/arduino-cli/commands.Upgrade is now github.com/arduino/arduino-cli/commands/upgrade.Upgrade Old code must change the imports accordingly. github.com/arduino-cli/arduino/cores/packagemanager.PackageManager methods and fields change \u00b6 The PackageManager.Log and TempDir fields are now private. The PackageManager.DownloadToolRelease method has no more the label parameter: func ( pm * PackageManager ) DownloadToolRelease ( tool * cores . ToolRelease , config * downloader . Config , label string , progressCB rpc . DownloadProgressCB ) error { has been changed to: func ( pm * PackageManager ) DownloadToolRelease ( tool * cores . ToolRelease , config * downloader . Config , progressCB rpc . DownloadProgressCB ) error { Old code should remove the label parameter. The PackageManager.UninstallPlatform , PackageManager.InstallTool , and PackageManager.UninstallTool methods now requires a github.com/arduino/arduino-cli/rpc/cc/arduino/cli/commands/v1.TaskProgressCB func ( pm * PackageManager ) UninstallPlatform ( platformRelease * cores . PlatformRelease ) error { func ( pm * PackageManager ) InstallTool ( toolRelease * cores . ToolRelease ) error { func ( pm * PackageManager ) UninstallTool ( toolRelease * cores . ToolRelease ) error { have been changed to: func ( pm * PackageManager ) UninstallPlatform ( platformRelease * cores . PlatformRelease , taskCB rpc . TaskProgressCB ) error { func ( pm * PackageManager ) InstallTool ( toolRelease * cores . ToolRelease , taskCB rpc . TaskProgressCB ) error { func ( pm * PackageManager ) UninstallTool ( toolRelease * cores . ToolRelease , taskCB rpc . TaskProgressCB ) error { If you're not interested in getting the task events you can pass an empty callback function. 0.25.0 \u00b6 go-lang function github.com/arduino/arduino-cli/arduino/utils.FeedStreamTo has been changed \u00b6 The function FeedStreamTo has been changed from: func FeedStreamTo ( writer func ( data [] byte )) io . Writer to func FeedStreamTo ( writer func ( data [] byte )) ( io . WriteCloser , context . Context ) The user must call the Close method on the returned io.WriteClose to correctly dispose the streaming channel. The context Done() method may be used to wait for the internal subroutines to complete. 0.24.0 \u00b6 gRPC Monitor service and related gRPC calls have been removed \u00b6 The gRPC Monitor service and the gRPC call Monitor.StreamingOpen have been removed in favor of the new Pluggable Monitor API in the gRPC Commands service: Commands.Monitor : open a monitor connection to a communication port. Commands.EnumerateMonitorPortSettings : enumerate the possible configurations parameters for a communication port. Please refer to the official documentation and the reference client implementation for details on how to use the new API. https://arduino.github.io/arduino-cli/dev/rpc/commands/#monitorrequest https://arduino.github.io/arduino-cli/dev/rpc/commands/#monitorresponse https://arduino.github.io/arduino-cli/dev/rpc/commands/#enumeratemonitorportsettingsrequest https://arduino.github.io/arduino-cli/dev/rpc/commands/#enumeratemonitorportsettingsresponse https://github.com/arduino/arduino-cli/blob/master/commands/daemon/term_example/main.go 0.23.0 \u00b6 Arduino IDE builtin libraries are now excluded from the build when running arduino-cli standalone \u00b6 Previously the \"builtin libraries\" in the Arduino IDE 1.8.x were always included in the build process. This wasn't the intended behaviour, arduino-cli should include them only if run as a daemon from the Arduino IDE. Now this is fixed, but since it has been the default behaviour from a very long time we decided to report it here as a breaking change. If a compilation fail for a missing bundled library, you can fix it just by installing the missing library from the library manager as usual. gRPC: Changes in message cc.arduino.cli.commands.v1.PlatformReference \u00b6 The gRPC message structure cc.arduino.cli.commands.v1.PlatformReference has been renamed to cc.arduino.cli.commands.v1.InstalledPlatformReference , and some new fields have been added: install_dir is the installation directory of the platform package_url is the 3rd party platform URL of the platform It is currently used only in cc.arduino.cli.commands.v1.CompileResponse , so the field type has been changed as well. Old gRPC clients must only update gRPC bindings. They can safely ignore the new fields if not needed. golang API: github.com/arduino/arduino-cli/cli/globals.DefaultIndexURL has been moved under github.com/arduino/arduino-cli/arduino/globals \u00b6 Legacy code should just update the import. golang API: PackageManager.DownloadPlatformRelease no longer need label parameter \u00b6 func ( pm * PackageManager ) DownloadPlatformRelease ( platform * cores . PlatformRelease , config * downloader . Config , label string , progressCB rpc . DownloadProgressCB ) error { is now: func ( pm * PackageManager ) DownloadPlatformRelease ( platform * cores . PlatformRelease , config * downloader . Config , progressCB rpc . DownloadProgressCB ) error { Just remove the label parameter from legacy code. 0.22.0 \u00b6 github.com/arduino/arduino-cli/arduino.MultipleBoardsDetectedError field changed type \u00b6 Now the Port field of the error is a github.com/arduino/arduino-cli/rpc/cc/arduino/cli/commands/v1.Port , usually imported as rpc.Port . The old discovery.Port can be converted to the new one using the .ToRPC() method. Function github.com/arduino/arduino-cli/commands/upload.DetectConnectedBoard(...) has been removed \u00b6 Use github.com/arduino/arduino-cli/commands/board.List(...) to detect boards. Function arguments.GetDiscoveryPort(...) has been removed \u00b6 NOTE: the functions in the arguments package doesn't have much use outside of the arduino-cli so we are considering to remove them from the public golang API making them internal . The old function: func ( p * Port ) GetDiscoveryPort ( instance * rpc . Instance , sk * sketch . Sketch ) * discovery . Port { } is now replaced by the more powerful: func ( p * Port ) DetectFQBN ( inst * rpc . Instance ) ( string , * rpc . Port ) { } func CalculateFQBNAndPort ( portArgs * Port , fqbnArg * Fqbn , instance * rpc . Instance , sk * sketch . Sketch ) ( string , * rpc . Port ) { } gRPC: address parameter has been removed from commands.SupportedUserFieldsRequest \u00b6 The parameter is no more needed. Lagacy code will continue to work without modification (the value of the parameter will be just ignored). The content of package github.com/arduino/arduino-cli/httpclient has been moved to a different path \u00b6 In particular: UserAgent and NetworkProxy have been moved to github.com/arduino/arduino-cli/configuration the remainder of the package github.com/arduino/arduino-cli/httpclient has been moved to github.com/arduino/arduino-cli/arduino/httpclient The old imports must be updated according to the list above. commands.DownloadProgressCB and commands.TaskProgressCB have been moved to package github.com/arduino/arduino-cli/rpc/cc/arduino/cli/commands/v1 \u00b6 All references to these types must be updated with the new import. commands.GetDownloaderConfig has been moved to package github.com/arduino/arduino-cli/arduino/httpclient \u00b6 All references to this function must be updated with the new import. commands.Download has been removed and replaced by github.com/arduino/arduino-cli/arduino/httpclient.DownloadFile \u00b6 The old function must be replaced by the new one that is much more versatile. packagemanager.PackageManager.DownloadToolRelease , packagemanager.PackageManager.DownloadPlatformRelease , and resources.DownloadResource.Download functions change signature and behaviour \u00b6 The following functions: func ( pm * PackageManager ) DownloadToolRelease ( tool * cores . ToolRelease , config * downloader . Config ) ( * downloader . Downloader , error ) func ( pm * PackageManager ) DownloadPlatformRelease ( platform * cores . PlatformRelease , config * downloader . Config ) ( * downloader . Downloader , error ) func ( r * DownloadResource ) Download ( downloadDir * paths . Path , config * downloader . Config ) ( * downloader . Downloader , error ) now requires a label and a progress callback parameter, do not return the Downloader object anymore, and they automatically handles the download internally: func ( pm * PackageManager ) DownloadToolRelease ( tool * cores . ToolRelease , config * downloader . Config , label string , progressCB rpc . DownloadProgressCB ) error func ( pm * PackageManager ) DownloadPlatformRelease ( platform * cores . PlatformRelease , config * downloader . Config , label string , progressCB rpc . DownloadProgressCB ) error func ( r * DownloadResource ) Download ( downloadDir * paths . Path , config * downloader . Config , label string , downloadCB rpc . DownloadProgressCB ) error The new progress parameters must be added to legacy code, if progress reports are not needed an empty stub for label and progressCB must be provided. There is no more need to execute the downloader.Run() or downloader.RunAndPoll(...) method. For example, the old legacy code like: downloader , err := pm . DownloadPlatformRelease ( platformToDownload , config ) if err != nil { ... } if err := downloader . Run (); err != nil { ... } may be ported to the new version as: err := pm . DownloadPlatformRelease ( platformToDownload , config , \"\" , func ( progress * rpc . DownloadProgress ) {}) packagemanager.Load* functions now returns error instead of *status.Status \u00b6 The following functions signature: func ( pm * PackageManager ) LoadHardware () [] * status . Status { ... } func ( pm * PackageManager ) LoadHardwareFromDirectories ( hardwarePaths paths . PathList ) [] * status . Status { ... } func ( pm * PackageManager ) LoadHardwareFromDirectory ( path * paths . Path ) [] * status . Status { ... } func ( pm * PackageManager ) LoadToolsFromBundleDirectories ( dirs paths . PathList ) [] * status . Status { ... } func ( pm * PackageManager ) LoadDiscoveries () [] * status . Status { ... } have been changed to: func ( pm * PackageManager ) LoadHardware () [] error { ... } func ( pm * PackageManager ) LoadHardwareFromDirectories ( hardwarePaths paths . PathList ) [] error { ... } func ( pm * PackageManager ) LoadHardwareFromDirectory ( path * paths . Path ) [] error { ... } func ( pm * PackageManager ) LoadToolsFromBundleDirectories ( dirs paths . PathList ) [] error { ... } func ( pm * PackageManager ) LoadDiscoveries () [] error { ... } These function no longer returns a gRPC status, so the errors can be handled as any other error . Removed error return from discovery.New(...) function \u00b6 The discovery.New(...) function never fails, so the error has been removed, the old signature: func New ( id string , args ... string ) ( * PluggableDiscovery , error ) { ... } is now: func New ( id string , args ... string ) * PluggableDiscovery { ... } 0.21.0 \u00b6 packagemanager.NewPackageManager function change \u00b6 A new argument userAgent has been added to packagemanager.NewPackageManager , the new function signature is: func NewPackageManager ( indexDir , packagesDir , downloadDir , tempDir * paths . Path , userAgent string ) * PackageManager { The userAgent string must be in the format \"ProgramName/Version\" , for example \"arduino-cli/0.20.1\" . commands.Create function change \u00b6 A new argument extraUserAgent has been added to commands.Create , the new function signature is: func Create ( req * rpc . CreateRequest , extraUserAgent ... string ) ( * rpc . CreateResponse , error ) { extraUserAgent is an array of strings, so multiple user agent may be provided. Each user agent must be in the format \"ProgramName/Version\" , for example \"arduino-cli/0.20.1\" . commands.Compile function change \u00b6 A new argument progressCB has been added to commands.Compile , the new function signature is: func Compile ( ctx context . Context , req * rpc . CompileRequest , outStream , errStream io . Writer , progressCB commands . TaskProgressCB , debug bool ) ( r * rpc . CompileResponse , e error ) { if a callback function is provided the Compile command will call it periodically with progress reports with the percentage of compilation completed, otherwise, if the parameter is nil , no progress reports will be performed. github.com/arduino/arduino-cli/cli/arguments.ParseReferences function change \u00b6 The parseArch parameter was removed since it was unused and was always true. This means that the architecture gets always parsed by the function. github.com/arduino/arduino-cli/cli/arguments.ParseReference function change \u00b6 The parseArch parameter was removed since it was unused and was always true. This means that the architecture gets always parsed by the function. Furthermore the function now should also correctly interpret packager:arch spelled with the wrong casing. github.com/arduino/arduino-cli/executils.NewProcess and executils.NewProcessFromPath function change \u00b6 A new argument extraEnv has been added to executils.NewProcess and executils.NewProcessFromPath , the new function signature is: func NewProcess ( extraEnv [] string , args ... string ) ( * Process , error ) { func NewProcessFromPath ( extraEnv [] string , executable * paths . Path , args ... string ) ( * Process , error ) { The extraEnv params allow to pass environment variables (in addition to the default ones) to the spawned process. github.com/arduino/arduino-cli/i18n.Init(...) now requires an empty string to be passed for autodetection of locale \u00b6 For automated detection of locale, change the call from: i18n . Init () to i18n . Init ( \"\" ) github.com/arduino/arduino-cli/legacy/i18n module has been removed (in particular the i18n.Logger ) \u00b6 The i18n.Logger is no longer available. It was mainly used in the legacy builder struct field Context.Logger . The Context.Logger field has been replaced with plain io.Writer fields Contex.Stdout and Context.Stderr . All existing logger functionality has been dropped, for example the Java-Style formatting with tags like {0} {1}... must be replaced with one of the equivalent golang printf-based alternatives and logging levels must be replaced with direct writes to Stdout or Stderr . 0.20.0 \u00b6 board details arguments change \u00b6 The board details command now accepts only the --fqbn or -b flags to specify the FQBN. The previously deprecated board details <FQBN> syntax is no longer supported. board attach arguments change \u00b6 The board attach command now uses --port and -p flags to set board port and --board and -b flags to select its FQBN. The previous syntax board attach <port>|<FQBN> [sketchPath] is no longer supported. --timeout flag in board list command has been replaced by --discovery-timeout \u00b6 The flag --timeout in the board list command is no longer supported. 0.19.0 \u00b6 board list command JSON output change \u00b6 The board list command JSON output has been changed quite a bit, from: $ arduino-cli board list --format json [ { \"address\": \"/dev/ttyACM1\", \"protocol\": \"serial\", \"protocol_label\": \"Serial Port (USB)\", \"boards\": [ { \"name\": \"Arduino Uno\", \"fqbn\": \"arduino:avr:uno\", \"vid\": \"0x2341\", \"pid\": \"0x0043\" } ], \"serial_number\": \"954323132383515092E1\" } ] to: $ arduino-cli board list --format json [ { \"matching_boards\": [ { \"name\": \"Arduino Uno\", \"fqbn\": \"arduino:avr:uno\" } ], \"port\": { \"address\": \"/dev/ttyACM1\", \"label\": \"/dev/ttyACM1\", \"protocol\": \"serial\", \"protocol_label\": \"Serial Port (USB)\", \"properties\": { \"pid\": \"0x0043\", \"serialNumber\": \"954323132383515092E1\", \"vid\": \"0x2341\" } } } ] The boards array has been renamed matching_boards , each contained object will now contain only name and fqbn . Properties that can be used to identify a board are now moved to the new properties object, it can contain any key name. pid and vid have been moved to properties , serial_number has been renamed serialNumber and moved to properties . The new label field is the name of the port if it should be displayed in a GUI. gRPC interface DebugConfigRequest , UploadRequest , UploadUsingProgrammerRequest , BurnBootloaderRequest , DetectedPort field changes \u00b6 DebugConfigRequest , UploadRequest , UploadUsingProgrammerRequest and BurnBootloaderRequest had their port field change from type string to Port . Port contains the following information: // Port represents a board port that may be used to upload or to monitor a board message Port { // Address of the port (e.g., `/dev/ttyACM0`). string address = 1; // The port label to show on the GUI (e.g. \"ttyACM0\") string label = 2; // Protocol of the port (e.g., `serial`, `network`, ...). string protocol = 3; // A human friendly description of the protocol (e.g., \"Serial Port (USB)\" string protocol_label = 4; // A set of properties of the port map<string, string> properties = 5; } The gRPC interface message DetectedPort has been changed from: message DetectedPort { // Address of the port (e.g., `serial:///dev/ttyACM0`). string address = 1; // Protocol of the port (e.g., `serial`). string protocol = 2; // A human friendly description of the protocol (e.g., \"Serial Port (USB)\"). string protocol_label = 3; // The boards attached to the port. repeated BoardListItem boards = 4; // Serial number of connected board string serial_number = 5; } to: message DetectedPort { // The possible boards attached to the port. repeated BoardListItem matching_boards = 1; // The port details Port port = 2; } The properties previously contained directly in the message are now stored in the port property. These changes are necessary for the pluggable discovery. gRPC interface BoardListItem change \u00b6 The vid and pid fields of the BoardListItem message have been removed. They used to only be available when requesting connected board lists, now that information is stored in the port field of DetectedPort . Change public library interface \u00b6 github.com/arduino/arduino-cli/i18n package \u00b6 The behavior of the Init function has changed. The user specified locale code is no longer read from the github.com/arduino/arduino-cli/configuration package and now must be passed directly to Init as a string: i18n . Init ( \"it\" ) Omit the argument for automated locale detection: i18n . Init () github.com/arduino/arduino-cli/arduino/builder package \u00b6 GenBuildPath() function has been moved to github.com/arduino/arduino-cli/arduino/sketch package. The signature is unchanged. EnsureBuildPathExists function from has been completely removed, in its place use github.com/arduino/go-paths-helper.MkDirAll() . SketchSaveItemCpp function signature is changed from path string, contents []byte, destPath string to path *paths.Path, contents []byte, destPath *paths.Path . paths is github.com/arduino/go-paths-helper . SketchLoad function has been removed, in its place use New from github.com/arduino/arduino-cli/arduino/sketch package. - SketchLoad(\"/some/path\", \"\") + sketch.New(paths.New(\"some/path)) } If you need to set a custom build path you must instead set it after creating the Sketch. - SketchLoad(\"/some/path\", \"/my/build/path\") + s, err := sketch.New(paths.New(\"some/path)) + s.BuildPath = paths.new(\"/my/build/path\") } SketchCopyAdditionalFiles function signature is changed from sketch *sketch.Sketch, destPath string, overrides map[string]string to sketch *sketch.Sketch, destPath *paths.Path, overrides map[string]string . github.com/arduino/arduino-cli/arduino/sketch package \u00b6 Item struct has been removed, use go-paths-helper.Path in its place. NewItem has been removed too, use go-paths-helper.New in its place. GetSourceBytes has been removed, in its place use go-paths-helper.Path.ReadFile . GetSourceStr too has been removed, in its place: - s, err := item.GetSourceStr() + data, err := file.ReadFile() + s := string(data) } ItemByPath type and its member functions have been removed, use go-paths-helper.PathList in its place. Sketch.LocationPath has been renamed to FullPath and its type changed from string to go-paths-helper.Path . Sketch.MainFile type has changed from *Item to go-paths-helper.Path . Sketch.OtherSketchFiles , Sketch.AdditionalFiles and Sketch.RootFolderFiles type has changed from []*Item to go-paths-helper.PathList . New signature has been changed from sketchFolderPath, mainFilePath, buildPath string, allFilesPaths []string to path *go-paths-helper.Path . CheckSketchCasing function is now private, the check is done internally by New . InvalidSketchFoldernameError has been renamed InvalidSketchFolderNameError . github.com/arduino/arduino-cli/arduino/sketches package \u00b6 Sketch struct has been merged with sketch.Sketch struct. Metadata and BoardMetadata structs have been moved to github.com/arduino/arduino-cli/arduino/sketch package. NewSketchFromPath has been deleted, use sketch.New in its place. ImportMetadata is now private called internally by sketch.New . ExportMetadata has been moved to github.com/arduino/arduino-cli/arduino/sketch package. BuildPath has been removed, use sketch.Sketch.BuildPath in its place. CheckForPdeFiles has been moved to github.com/arduino/arduino-cli/arduino/sketch package. github.com/arduino/arduino-cli/legacy/builder/types package \u00b6 Sketch has been removed, use sketch.Sketch in its place. SketchToLegacy and SketchFromLegacy have been removed, nothing replaces them. Context.Sketch types has been changed from Sketch to sketch.Sketch . Change in board details response (gRPC and JSON output) \u00b6 The board details output WRT board identification properties has changed, before it was: $ arduino-cli board details arduino:samd:mkr1000 Board name: Arduino MKR1000 FQBN: arduino:samd:mkr1000 Board version: 1.8.11 Debugging supported: \u2714 Official Arduino board: \u2714 Identification properties: VID:0x2341 PID:0x824e VID:0x2341 PID:0x024e VID:0x2341 PID:0x804e VID:0x2341 PID:0x004e [...] $ arduino-cli board details arduino:samd:mkr1000 --format json [...] \"identification_prefs\": [ { \"usb_id\": { \"vid\": \"0x2341\", \"pid\": \"0x804e\" } }, { \"usb_id\": { \"vid\": \"0x2341\", \"pid\": \"0x004e\" } }, { \"usb_id\": { \"vid\": \"0x2341\", \"pid\": \"0x824e\" } }, { \"usb_id\": { \"vid\": \"0x2341\", \"pid\": \"0x024e\" } } ], [...] now the properties have been renamed from identification_prefs to identification_properties and they are no longer specific to USB but they can theoretically be any set of key/values: $ arduino-cli board details arduino:samd:mkr1000 Board name: Arduino MKR1000 FQBN: arduino:samd:mkr1000 Board version: 1.8.11 Debugging supported: \u2714 Official Arduino board: \u2714 Identification properties: vid=0x2341 pid=0x804e Identification properties: vid=0x2341 pid=0x004e Identification properties: vid=0x2341 pid=0x824e Identification properties: vid=0x2341 pid=0x024e [...] $ arduino-cli board details arduino:samd:mkr1000 --format json [...] \"identification_properties\": [ { \"properties\": { \"pid\": \"0x804e\", \"vid\": \"0x2341\" } }, { \"properties\": { \"pid\": \"0x004e\", \"vid\": \"0x2341\" } }, { \"properties\": { \"pid\": \"0x824e\", \"vid\": \"0x2341\" } }, { \"properties\": { \"pid\": \"0x024e\", \"vid\": \"0x2341\" } } ] } Change of behaviour of gRPC Init function \u00b6 Previously the Init function was used to both create a new CoreInstance and initialize it, so that the internal package and library managers were already populated with all the information available from *_index.json files, installed platforms and libraries and so on. Now the initialization phase is split into two, first the client must create a new CoreInstance with the Create function, that does mainly two things: create all folders necessary to correctly run the CLI if not already existing create and return a new CoreInstance The Create function will only fail if folders creation is not successful. The returned instance is relatively unusable since no library and no platform is loaded, some functions that don't need that information can still be called though. The Init function has been greatly overhauled and it doesn't fail completely if one or more platforms or libraries fail to load now. Also the option library_manager_only has been removed, the package manager is always initialized and platforms are loaded. The Init was already a server-side streaming function but it would always return one and only one response, this has been modified so that each response is either an error or a notification on the initialization process so that it works more like an actual stream of information. Previously a client would call the function like so: const initReq = new InitRequest () initReq . setLibraryManagerOnly ( false ) const initResp = await new Promise < InitResponse > (( resolve , reject ) => { let resp : InitResponse | undefined = undefined const stream = client . init ( initReq ) stream . on ( \"data\" , ( data : InitResponse ) => ( resp = data )) stream . on ( \"end\" , () => resolve ( resp ! )) stream . on ( \"error\" , ( err ) => reject ( err )) }) const instance = initResp . getInstance () if ( ! instance ) { throw new Error ( \"Could not retrieve instance from the initialize response.\" ) } Now something similar should be done. const createReq = new CreateRequest () const instance = client . create ( createReq ) if ( ! instance ) { throw new Error ( \"Could not retrieve instance from the initialize response.\" ) } const initReq = new InitRequest () initReq . setInstance ( instance ) const initResp = client . init ( initReq ) initResp . on ( \"data\" , ( o : InitResponse ) => { const downloadProgress = o . getDownloadProgress () if ( downloadProgress ) { // Handle download progress } const taskProgress = o . getTaskProgress () if ( taskProgress ) { // Handle task progress } const err = o . getError () if ( err ) { // Handle error } }) await new Promise < void > (( resolve , reject ) => { initResp . on ( \"error\" , ( err ) => reject ( err )) initResp . on ( \"end\" , resolve ) }) Previously if even one platform or library failed to load everything else would fail too, that doesn't happen anymore. Now it's easier for both the CLI and the gRPC clients to handle gracefully platforms or libraries updates that might break the initialization step and make everything unusable. Removal of gRPC Rescan function \u00b6 The Rescan function has been removed, in its place the Init function must be used. Change of behaviour of gRPC UpdateIndex and UpdateLibrariesIndex functions \u00b6 Previously both UpdateIndex and UpdateLibrariesIndex functions implicitly called Rescan so that the internal CoreInstance was updated with the eventual new information obtained in the update. This behaviour is now removed and the internal CoreInstance must be explicitly updated by the gRPC client using the Init function. Removed rarely used golang API \u00b6 The following function from the github.com/arduino/arduino-cli/arduino/libraries module is no longer available: func ( lm * LibrariesManager ) UpdateIndex ( config * downloader . Config ) ( * downloader . Downloader , error ) { We recommend using the equivalent gRPC API to perform the update of the index. 0.18.0 \u00b6 Breaking changes in gRPC API and CLI JSON output. \u00b6 Starting from this release we applied a more rigorous and stricter naming conventions in gRPC API following the official guidelines: https://developers.google.com/protocol-buffers/docs/style We also started using a linter to implement checks for gRPC API style errors. This provides a better consistency and higher quality API but inevitably introduces breaking changes. gRPC API breaking changes \u00b6 Consumers of the gRPC API should regenerate their bindings and update all structures naming where necessary. Most of the changes are trivial and falls into the following categories: Service names have been suffixed with ...Service (for example ArduinoCore -> ArduinoCoreService ) Message names suffix has been changed from ...Req / ...Resp to ...Request / ...Response (for example BoardDetailsReq -> BoardDetailsRequest ) Enumerations now have their class name prefixed (for example the enumeration value FLAT in LibraryLayout has been changed to LIBRARY_LAYOUT_FLAT ) Use of lower-snake case on all fields (for example: ID -> id , FQBN -> fqbn , Name -> name , ArchiveFilename -> archive_filename ) Package names are now versioned (for example cc.arduino.cli.commands -> cc.arduino.cli.commands.v1 ) Repeated responses are now in plural form ( identification_pref -> identification_prefs , platform -> platforms ) arduino-cli JSON output breaking changes \u00b6 Consumers of the JSON output of the CLI must update their clients if they use one of the following commands: in core search command the following fields have been renamed: Boards -> boards Email -> email ID -> id Latest -> latest Maintainer -> maintainer Name -> name Website -> website The new output is like: $ arduino-cli core search Due --format json [ { \"id\": \"arduino:sam\", \"latest\": \"1.6.12\", \"name\": \"Arduino SAM Boards (32-bits ARM Cortex-M3)\", \"maintainer\": \"Arduino\", \"website\": \"http://www.arduino.cc/\", \"email\": \"packages@arduino.cc\", \"boards\": [ { \"name\": \"Arduino Due (Native USB Port)\", \"fqbn\": \"arduino:sam:arduino_due_x\" }, { \"name\": \"Arduino Due (Programming Port)\", \"fqbn\": \"arduino:sam:arduino_due_x_dbg\" } ] } ] in board details command the following fields have been renamed: identification_pref -> identification_prefs usbID -> usb_id PID -> pid VID -> vid websiteURL -> website_url archiveFileName -> archive_filename propertiesId -> properties_id toolsDependencies -> tools_dependencies The new output is like: $ arduino-cli board details arduino:avr:uno --format json { \"fqbn\": \"arduino:avr:uno\", \"name\": \"Arduino Uno\", \"version\": \"1.8.3\", \"properties_id\": \"uno\", \"official\": true, \"package\": { \"maintainer\": \"Arduino\", \"url\": \"https://downloads.arduino.cc/packages/package_index.json\", \"website_url\": \"http://www.arduino.cc/\", \"email\": \"packages@arduino.cc\", \"name\": \"arduino\", \"help\": { \"online\": \"http://www.arduino.cc/en/Reference/HomePage\" } }, \"platform\": { \"architecture\": \"avr\", \"category\": \"Arduino\", \"url\": \"http://downloads.arduino.cc/cores/avr-1.8.3.tar.bz2\", \"archive_filename\": \"avr-1.8.3.tar.bz2\", \"checksum\": \"SHA-256:de8a9b982477762d3d3e52fc2b682cdd8ff194dc3f1d46f4debdea6a01b33c14\", \"size\": 4941548, \"name\": \"Arduino AVR Boards\" }, \"tools_dependencies\": [ { \"packager\": \"arduino\", \"name\": \"avr-gcc\", \"version\": \"7.3.0-atmel3.6.1-arduino7\", \"systems\": [ { \"checksum\": \"SHA-256:3903553d035da59e33cff9941b857c3cb379cb0638105dfdf69c97f0acc8e7b5\", \"host\": \"arm-linux-gnueabihf\", \"archive_filename\": \"avr-gcc-7.3.0-atmel3.6.1-arduino7-arm-linux-gnueabihf.tar.bz2\", \"url\": \"http://downloads.arduino.cc/tools/avr-gcc-7.3.0-atmel3.6.1-arduino7-arm-linux-gnueabihf.tar.bz2\", \"size\": 34683056 }, { ... } ] }, { ... } ], \"identification_prefs\": [ { \"usb_id\": { \"vid\": \"0x2341\", \"pid\": \"0x0043\" } }, { ... } ], \"programmers\": [ { \"platform\": \"Arduino AVR Boards\", \"id\": \"parallel\", \"name\": \"Parallel Programmer\" }, { ... } ] } in board listall command the following fields have been renamed: FQBN -> fqbn Email -> email ID -> id Installed -> installed Latest -> latest Name -> name Maintainer -> maintainer Website -> website The new output is like: $ arduino-cli board listall Uno --format json { \"boards\": [ { \"name\": \"Arduino Uno\", \"fqbn\": \"arduino:avr:uno\", \"platform\": { \"id\": \"arduino:avr\", \"installed\": \"1.8.3\", \"latest\": \"1.8.3\", \"name\": \"Arduino AVR Boards\", \"maintainer\": \"Arduino\", \"website\": \"http://www.arduino.cc/\", \"email\": \"packages@arduino.cc\" } } ] } in board search command the following fields have been renamed: FQBN -> fqbn Email -> email ID -> id Installed -> installed Latest -> latest Name -> name Maintainer -> maintainer Website -> website The new output is like: $ arduino-cli board search Uno --format json [ { \"name\": \"Arduino Uno\", \"fqbn\": \"arduino:avr:uno\", \"platform\": { \"id\": \"arduino:avr\", \"installed\": \"1.8.3\", \"latest\": \"1.8.3\", \"name\": \"Arduino AVR Boards\", \"maintainer\": \"Arduino\", \"website\": \"http://www.arduino.cc/\", \"email\": \"packages@arduino.cc\" } } ] in lib deps command the following fields have been renamed: versionRequired -> version_required versionInstalled -> version_installed The new output is like: $ arduino-cli lib deps Arduino_MKRIoTCarrier --format json { \"dependencies\": [ { \"name\": \"Adafruit seesaw Library\", \"version_required\": \"1.3.1\" }, { \"name\": \"SD\", \"version_required\": \"1.2.4\", \"version_installed\": \"1.2.3\" }, { ... } ] } in lib search command the following fields have been renamed: archivefilename -> archive_filename cachepath -> cache_path The new output is like: $ arduino-cli lib search NTPClient --format json { \"libraries\": [ { \"name\": \"NTPClient\", \"releases\": { \"1.0.0\": { \"author\": \"Fabrice Weinberg\", \"version\": \"1.0.0\", \"maintainer\": \"Fabrice Weinberg \\u003cfabrice@weinberg.me\\u003e\", \"sentence\": \"An NTPClient to connect to a time server\", \"paragraph\": \"Get time from a NTP server and keep it in sync.\", \"website\": \"https://github.com/FWeinb/NTPClient\", \"category\": \"Timing\", \"architectures\": [ \"esp8266\" ], \"types\": [ \"Arduino\" ], \"resources\": { \"url\": \"https://downloads.arduino.cc/libraries/github.com/arduino-libraries/NTPClient-1.0.0.zip\", \"archive_filename\": \"NTPClient-1.0.0.zip\", \"checksum\": \"SHA-256:b1f2907c9d51ee253bad23d05e2e9c1087ab1e7ba3eb12ee36881ba018d81678\", \"size\": 6284, \"cache_path\": \"libraries\" } }, \"2.0.0\": { ... }, \"3.0.0\": { ... }, \"3.1.0\": { ... }, \"3.2.0\": { ... } }, \"latest\": { \"author\": \"Fabrice Weinberg\", \"version\": \"3.2.0\", \"maintainer\": \"Fabrice Weinberg \\u003cfabrice@weinberg.me\\u003e\", \"sentence\": \"An NTPClient to connect to a time server\", \"paragraph\": \"Get time from a NTP server and keep it in sync.\", \"website\": \"https://github.com/arduino-libraries/NTPClient\", \"category\": \"Timing\", \"architectures\": [ \"*\" ], \"types\": [ \"Arduino\" ], \"resources\": { \"url\": \"https://downloads.arduino.cc/libraries/github.com/arduino-libraries/NTPClient-3.2.0.zip\", \"archive_filename\": \"NTPClient-3.2.0.zip\", \"checksum\": \"SHA-256:122d00df276972ba33683aff0f7fe5eb6f9a190ac364f8238a7af25450fd3e31\", \"size\": 7876, \"cache_path\": \"libraries\" } } } ], \"status\": 1 } in board list command the following fields have been renamed: FQBN -> fqbn VID -> vid PID -> pid The new output is like: $ arduino-cli board list --format json [ { \"address\": \"/dev/ttyACM0\", \"protocol\": \"serial\", \"protocol_label\": \"Serial Port (USB)\", \"boards\": [ { \"name\": \"Arduino Nano 33 BLE\", \"fqbn\": \"arduino:mbed:nano33ble\", \"vid\": \"0x2341\", \"pid\": \"0x805a\" }, { \"name\": \"Arduino Nano 33 BLE\", \"fqbn\": \"arduino-dev:mbed:nano33ble\", \"vid\": \"0x2341\", \"pid\": \"0x805a\" }, { \"name\": \"Arduino Nano 33 BLE\", \"fqbn\": \"arduino-dev:nrf52:nano33ble\", \"vid\": \"0x2341\", \"pid\": \"0x805a\" }, { \"name\": \"Arduino Nano 33 BLE\", \"fqbn\": \"arduino-beta:mbed:nano33ble\", \"vid\": \"0x2341\", \"pid\": \"0x805a\" } ], \"serial_number\": \"BECC45F754185EC9\" } ] $ arduino-cli board list -w --format json { \"type\": \"add\", \"address\": \"/dev/ttyACM0\", \"protocol\": \"serial\", \"protocol_label\": \"Serial Port (USB)\", \"boards\": [ { \"name\": \"Arduino Nano 33 BLE\", \"fqbn\": \"arduino-dev:nrf52:nano33ble\", \"vid\": \"0x2341\", \"pid\": \"0x805a\" }, { \"name\": \"Arduino Nano 33 BLE\", \"fqbn\": \"arduino-dev:mbed:nano33ble\", \"vid\": \"0x2341\", \"pid\": \"0x805a\" }, { \"name\": \"Arduino Nano 33 BLE\", \"fqbn\": \"arduino-beta:mbed:nano33ble\", \"vid\": \"0x2341\", \"pid\": \"0x805a\" }, { \"name\": \"Arduino Nano 33 BLE\", \"fqbn\": \"arduino:mbed:nano33ble\", \"vid\": \"0x2341\", \"pid\": \"0x805a\" } ], \"serial_number\": \"BECC45F754185EC9\" } { \"type\": \"remove\", \"address\": \"/dev/ttyACM0\" } 0.16.0 \u00b6 Change type of CompileReq.ExportBinaries message in gRPC interface \u00b6 This change affects only the gRPC consumers. In the CompileReq message the export_binaries property type has been changed from bool to google.protobuf.BoolValue . This has been done to handle settings bindings by gRPC consumers and the CLI in the same way so that they an identical behaviour. 0.15.0 \u00b6 Rename telemetry settings to metrics \u00b6 All instances of the term telemetry in the code and the documentation has been changed to metrics . This has been done to clarify that no data is currently gathered from users of the CLI. To handle this change the users must edit their config file, usually arduino-cli.yaml , and change the telemetry key to metrics . The modification must be done by manually editing the file using a text editor, it can't be done via CLI. No other action is necessary. The default folders for the arduino-cli.yaml are: Linux: /home/<your_username>/.arduino15/arduino-cli.yaml OS X: /Users/<your_username>/Library/Arduino15/arduino-cli.yaml Windows: C:\\Users\\<your_username>\\AppData\\Local\\Arduino15\\arduino-cli.yaml 0.14.0 \u00b6 Changes in debug command \u00b6 Previously it was required: To provide a debug command line recipe in platform.txt like tools.reciped-id.debug.pattern=..... that will start a gdb session for the selected board. To add a debug.tool definition in the boards.txt to recall that recipe, for example myboard.debug.tool=recipe-id Now: Only the configuration needs to be supplied, the arduino-cli or the GUI tool will figure out how to call and setup the gdb session. An example of configuration is the following: debug.executable={build.path}/{build.project_name}.elf debug.toolchain=gcc debug.toolchain.path={runtime.tools.arm-none-eabi-gcc-7-2017q4.path}/bin/ debug.toolchain.prefix=arm-none-eabi debug.server=openocd debug.server.openocd.path={runtime.tools.openocd-0.10.0-arduino7.path}/bin/ debug.server.openocd.scripts_dir={runtime.tools.openocd-0.10.0-arduino7.path}/share/openocd/scripts/ debug.server.openocd.script={runtime.platform.path}/variants/{build.variant}/{build.openocdscript} The debug.executable key must be present and non-empty for debugging to be supported. The debug.server.XXXX subkeys are optional and also \"free text\", this means that the configuration may be extended as needed by the specific server. For now only openocd is supported. Anyway, if this change works, any other kind of server may be fairly easily added. The debug.xxx=yyy definitions above may be supplied and overlayed in the usual ways: on platform.txt : definition here will be shared through all boards in the platform on boards.txt as part of a board definition: they will override the global platform definitions on programmers.txt : they will override the boards and global platform definitions if the programmer is selected Binaries export must now be explicitly specified \u00b6 Previously, if the --build-path was not specified, compiling a Sketch would copy the generated binaries in <sketch_folder>/build/<fqbn>/ , uploading to a board required that path to exist and contain the necessary binaries. The --dry-run flag was removed. The default, compile does not copy generated binaries to the sketch folder. The --export-binaries ( -e ) flag was introduced to copy the binaries from the build folder to the sketch one. --export-binaries is not required when using the --output-dir flag. A related configuration key and environment variable has been added to avoid the need to always specify the --export-binaries flag: sketch.always_export_binaries and ARDUINO_SKETCH_ALWAYS_EXPORT_BINARIES . If --input-dir or --input-file is not set when calling upload the command will search for the deterministically created build directory in the temp folder and use the binaries found there. The gRPC interface has been updated accordingly, dryRun is removed. Programmers can't be listed anymore using burn-bootloader -P list \u00b6 The -P flag is used to select the programmer used to burn the bootloader on the specified board. Using -P list to list all the possible programmers for the current board was hackish. This way has been removed in favour of board details <fqbn> --list-programmers . lib install --git-url and --zip-file must now be explicitly enabled \u00b6 With the introduction of the --git-url and --zip-file flags the new config key library.enable_unsafe_install has been added to enable them. This changes the ouput of the config dump command. Change behaviour of --config-file flag with config commands \u00b6 To create a new config file with config init one must now use --dest-dir or the new --dest-file flags. Previously the config file would always be overwritten by this command, now it fails if the it already exists, to force the previous behaviour the user must set the --overwrite flag.","title":"Upgrading"},{"location":"UPGRADING/#upgrading","text":"Here you can find a list of migration guides to handle breaking changes between releases of the CLI.","title":"Upgrading"},{"location":"UPGRADING/#0360","text":"","title":"0.36.0"},{"location":"UPGRADING/#yaml-output-format-is-no-more-supported","text":"The yaml option of the --format flag is no more supported. Use --format json if machine parsable output is needed.","title":"YAML output format is no more supported"},{"location":"UPGRADING/#the-grpc-ccarduinoclicommandsv1compilerequestexport_binaries-changed-type","text":"Previously the field export_binaries was a google.protobuf.BoolValue . We used this type because it expresses this field's optional nature (that is, it could be true , false , and null if not set). Now the field is an optional bool , since the latest protobuf protocol changes now allows optional fields.","title":"The gRPC cc.arduino.cli.commands.v1.CompileRequest.export_binaries changed type."},{"location":"UPGRADING/#the-grpc-ccarduinoclicommandsv1updateindexresponse-and-updatelibrariesindexresponse-have-changed","text":"The responses coming from the update index commands: message UpdateIndexResponse { // Progress of the package index download. DownloadProgress download_progress = 1 ; } message UpdateLibrariesIndexResponse { // Progress of the libraries index download. DownloadProgress download_progress = 1 ; } are now more explicit and contains details about the result of the operation: message UpdateIndexResponse { message Result { // The result of the packages index update. repeated IndexUpdateReport updated_indexes = 1 ; } oneof message { // Progress of the package index download. DownloadProgress download_progress = 1 ; // The result of the index update. Result result = 2 ; } } message UpdateLibrariesIndexResponse { message Result { // The result of the libraries index update. IndexUpdateReport libraries_index = 1 ; } oneof message { // Progress of the libraries index download. DownloadProgress download_progress = 1 ; // The result of the index update. Result result = 2 ; } } The IndexUpdateReport message contains details for each index update operation performed: message IndexUpdateReport { enum Status { // The status of the index update is unspecified. STATUS_UNSPECIFIED = 0 ; // The index has been successfully updated. STATUS_UPDATED = 1 ; // The index was already up to date. STATUS_ALREADY_UP_TO_DATE = 2 ; // The index update failed. STATUS_FAILED = 3 ; // The index update was skipped. STATUS_SKIPPED = 4 ; } // The URL of the index that was updated. string index_url = 1 ; // The result of the index update. Status status = 2 ; }","title":"The gRPC cc.arduino.cli.commands.v1.UpdateIndexResponse and UpdateLibrariesIndexResponse have changed."},{"location":"UPGRADING/#the-grpc-ccarduinoclicommandsv1profile-message-has-been-removed-in-favor-of-sketchprofile","text":"The message Profile has been replaced with SketchProfile in the InitResponse.profile field: message InitResponse { oneof message { Progress init_progress = 1 ; google.rpc.Status error = 2 ; // Selected profile information SketchProfile profile = 3 ; } }","title":"The gRPC cc.arduino.cli.commands.v1.Profile message has been removed in favor of SketchProfile"},{"location":"UPGRADING/#the-grpc-ccarduinoclicommandsv1loadsketchresponse-message-has-been-changed","text":"Previously the LoadSketchResponse containted all the information about the sketch: message LoadSketchResponse { string main_file = 1 ; string location_path = 2 ; repeated string other_sketch_files = 3 ; repeated string additional_files = 4 ; repeated string root_folder_files = 5 ; string default_fqbn = 6 ; string default_port = 7 ; string default_protocol = 8 ; repeated SketchProfile profiles = 9 ; SketchProfile default_profile = 10 ; } Now all the metadata have been moved into a specific Sketch message: message LoadSketchResponse { Sketch sketch = 1 ; } message Sketch { string main_file = 1 ; string location_path = 2 ; repeated string other_sketch_files = 3 ; repeated string additional_files = 4 ; repeated string root_folder_files = 5 ; string default_fqbn = 6 ; string default_port = 7 ; string default_protocol = 8 ; repeated SketchProfile profiles = 9 ; SketchProfile default_profile = 10 ; }","title":"The gRPC cc.arduino.cli.commands.v1.LoadSketchResponse message has been changed."},{"location":"UPGRADING/#drop-support-for-builtintools","text":"We're dropping the builtin.tools support. It was the equivalent of Arduino IDE 1.x bundled tools directory.","title":"Drop support for builtin.tools"},{"location":"UPGRADING/#the-grpc-ccarduinoclicommandsv1monitorrequest-message-has-been-changed","text":"Previously the MonitorRequest was a single message used to open the monitor, to stream data, and to change the port configuration: message MonitorRequest { // Arduino Core Service instance from the `Init` response. Instance instance = 1 ; // Port to open, must be filled only on the first request Port port = 2 ; // The board FQBN we are trying to connect to. This is optional, and it's // needed to disambiguate if more than one platform provides the pluggable // monitor for a given port protocol. string fqbn = 3 ; // Data to send to the port bytes tx_data = 4 ; // Port configuration, optional, contains settings of the port to be applied MonitorPortConfiguration port_configuration = 5 ; } Now the meaning of the fields has been clarified with the oneof clause, making it more explicit: message MonitorRequest { oneof message { // Open request, it must be the first incoming message MonitorPortOpenRequest open_request = 1 ; // Data to send to the port bytes tx_data = 2 ; // Port configuration, contains settings of the port to be changed MonitorPortConfiguration updated_configuration = 3 ; // Close message, set to true to gracefully close a port (this ensure // that the gRPC streaming call is closed by the daemon AFTER the port // has been successfully closed) bool close = 4 ; } } message MonitorPortOpenRequest { // Arduino Core Service instance from the `Init` response. Instance instance = 1 ; // Port to open, must be filled only on the first request Port port = 2 ; // The board FQBN we are trying to connect to. This is optional, and it's // needed to disambiguate if more than one platform provides the pluggable // monitor for a given port protocol. string fqbn = 3 ; // Port configuration, optional, contains settings of the port to be applied MonitorPortConfiguration port_configuration = 4 ; } Now the message field MonitorPortOpenRequest.open_request must be sent in the first message after opening the streaming gRPC call. The identification number of the fields has been changed, this change is not binary compatible with old clients.","title":"The gRPC cc.arduino.cli.commands.v1.MonitorRequest message has been changed."},{"location":"UPGRADING/#some-golang-modules-from-githubcomarduinoarduino-cli-have-been-made-private","text":"The following golang modules are no longer available as public API: github.com/arduino/arduino-cli/arduino github.com/arduino/arduino-cli/buildcache github.com/arduino/arduino-cli/client_example github.com/arduino/arduino-cli/configuration github.com/arduino/arduino-cli/docsgen github.com/arduino/arduino-cli/executils github.com/arduino/arduino-cli/i18n github.com/arduino/arduino-cli/table Most of the executils library has been integrated inside the go-paths library github.com/arduino/go-paths-helper . The other packages are not intended for usage outside the Arduino CLI, we will keep them internal to allow future breaking changes as needed.","title":"Some golang modules from github.com/arduino/arduino-cli/* have been made private."},{"location":"UPGRADING/#cli-changed-json-output-for-some-lib-core-config-board-and-sketch-commands","text":"arduino-cli lib list --format json results are now wrapped under installed_libraries key { \"installed_libraries\": [ {...}, {...} ] } arduino-cli lib examples --format json results are now wrapped under examples key { \"examples\": [ {...}, {...} ] } arduino-cli core search --format json and arduino-cli core list --format json results are now wrapped under platforms key { \"platforms\": [ {...}, {...} ] } arduino-cli config init --format json now correctly returns a json object containg the config path { \"config_path\": \"/home/user/.arduino15/arduino-cli.yaml\" } arduino-cli config dump --format json results are now wrapped under config key { \"config\": { ... } } arduino-cli board search --format json results are now wrapped under boards key { \"boards\": [ {...}, {...} ] } arduino-cli board list --format json results are now wrapped under detected_ports key { \"detected_ports\": [ {...}, {...} ] } arduino-cli sketch new now correctly returns a json object containing the sketch path { \"sketch_path\": \"/tmp/my_sketch\" }","title":"CLI changed JSON output for some lib, core, config, board, and sketch commands."},{"location":"UPGRADING/#the-grpc-response-ccarduinoclicommandsv1compileresponse-has-been-changed","text":"The CompilerResponse message has been refactored to made explicit which fields are intended for streaming the build process and which fields are part of the build result. The old CompilerResposne : message CompileResponse { // The output of the compilation process (stream) bytes out_stream = 1; // The error output of the compilation process (stream) bytes err_stream = 2; // The compiler build path string build_path = 3; // The libraries used in the build repeated Library used_libraries = 4; // The size of the executable split by sections repeated ExecutableSectionSize executable_sections_size = 5; // The platform where the board is defined InstalledPlatformReference board_platform = 6; // The platform used for the build (if referenced from the board platform) InstalledPlatformReference build_platform = 7; // Completions reports of the compilation process (stream) TaskProgress progress = 8; // Build properties used for compiling repeated string build_properties = 9; // Compiler errors and warnings repeated CompileDiagnostic diagnostics = 10; } has been split into a CompilerResponse and a BuilderResult : message CompileResponse { oneof message { // The output of the compilation process (stream) bytes out_stream = 1; // The error output of the compilation process (stream) bytes err_stream = 2; // Completions reports of the compilation process (stream) TaskProgress progress = 3; // The compilation result BuilderResult result = 4; } } message BuilderResult { // The compiler build path string build_path = 1; // The libraries used in the build repeated Library used_libraries = 2; // The size of the executable split by sections repeated ExecutableSectionSize executable_sections_size = 3; // The platform where the board is defined InstalledPlatformReference board_platform = 4; // The platform used for the build (if referenced from the board platform) InstalledPlatformReference build_platform = 5; // Build properties used for compiling repeated string build_properties = 7; // Compiler errors and warnings repeated CompileDiagnostic diagnostics = 8; } with a clear distinction on which fields are streamed.","title":"The gRPC response cc.arduino.cli.commands.v1.CompileResponse has been changed."},{"location":"UPGRADING/#the-grpc-response-ccarduinoclicommandsv1uploadusingprogrammerresponse-and-ccarduinoclicommandsv1burnbootloaderresponse-has-been-changed","text":"The old messages: message UploadUsingProgrammerResponse { // The output of the upload process. bytes out_stream = 1; // The error output of the upload process. bytes err_stream = 2; } message BurnBootloaderResponse { // The output of the burn bootloader process. bytes out_stream = 1; // The error output of the burn bootloader process. bytes err_stream = 2; } now have the oneof clause that makes explicit the streaming nature of the response: message UploadUsingProgrammerResponse { oneof message { // The output of the upload process. bytes out_stream = 1; // The error output of the upload process. bytes err_stream = 2; } } message BurnBootloaderResponse { oneof message { // The output of the burn bootloader process. bytes out_stream = 1; // The error output of the burn bootloader process. bytes err_stream = 2; } }","title":"The gRPC response cc.arduino.cli.commands.v1.UploadUsingProgrammerResponse and cc.arduino.cli.commands.v1.BurnBootloaderResponse has been changed."},{"location":"UPGRADING/#the-grpc-ccarduinoclicommandsv1platformrelease-has-been-changed","text":"We've added a new field called compatible . This field indicates if the current platform release is installable or not. It may happen that a platform doesn't have a dependency available for an OS/ARCH, in such cases, if we try to install the platform it will fail. The new field can be used to know upfront if a specific release is installable.","title":"The gRPC cc.arduino.cli.commands.v1.PlatformRelease has been changed."},{"location":"UPGRADING/#the-grpc-ccarduinoclicommandsv1platformsummary-has-been-changed","text":"We've modified the behavior of latest_version . Now this field indicates the latest version that can be installed in the current OS/ARCH.","title":"The gRPC cc.arduino.cli.commands.v1.PlatformSummary has been changed."},{"location":"UPGRADING/#core-list-now-returns-only-the-latest-version-that-can-be-installed","text":"Previously, we showed the latest version without checking if all the dependencies were available in the current OS/ARCH. Now, the latest version will always point to an installable one even if a newer incompatible one is present.","title":"core list now returns only the latest version that can be installed."},{"location":"UPGRADING/#core-search-now-returns-the-latest-installable-version-of-a-core","text":"We now show in the version column the latest installable version. If none are available then we show a n/a label. The corresponding command with --format json now returns the same output of arduino-cli core search --all --format json .","title":"core search now returns the latest installable version of a core."},{"location":"UPGRADING/#core-upgrade-and-core-install-will-install-the-latest-compatible-version","text":"Previously, we'd have tried the installation/upgrade of a core even if all the required tools weren't available in the current OS/ARCH. Now we check this upfront, and allowing the installation of incompatible versions only if a user explicitly provides it like: core install arduino:renesas_uno@1.0.2","title":"core upgrade and core install will install the latest compatible version."},{"location":"UPGRADING/#grpc-service-ccarduinoclisettingsv1-has-been-removed-and-all-rpc-calls-have-been-migrated-to-ccarduinoclicommandsv1","text":"The service cc.arduino.cli.settings.v1 no longer exists and all existing RPC calls have been moved to the cc.arduino.cli.commands.v1 service adding a Settings prefix to the names of all messages. The existing RPC calls: rpc GetAll(GetAllRequest) returns (GetAllResponse) rpc Merge(MergeRequest) returns (MergeResponse) rpc GetValue(GetValueRequest) returns (GetValueResponse) rpc SetValue(SetValueRequest) returns (SetValueResponse) rpc Write(WriteRequest) returns (WriteResponse) rpc Delete(DeleteRequest) returns (DeleteResponse) are now renamed to: rpc SettingsGetAll(SettingsGetAllRequest) returns (SettingsGetAllResponse) rpc SettingsMerge(SettingsMergeRequest) returns (SettingsMergeResponse) rpc SettingsGetValue(SettingsGetValueRequest) returns (SettingsGetValueResponse) rpc SettingsSetValue(SettingsSetValueRequest) returns (SettingsSetValueResponse) rpc SettingsWrite(SettingsWriteRequest) returns (SettingsWriteResponse) rpc SettingsDelete(SettingsDeleteRequest) returns (SettingsDeleteResponse)","title":"gRPC service cc.arduino.cli.settings.v1 has been removed, and all RPC calls have been migrated to cc.arduino.cli.commands.v1"},{"location":"UPGRADING/#grpc-ccarduinoclicommandsv1librarysearchrequest-message-has-been-changed","text":"The query field has been removed, use search_args instead.","title":"gRPC cc.arduino.cli.commands.v1.LibrarySearchRequest message has been changed."},{"location":"UPGRADING/#cli-core-list-and-core-search-changed-json-output","text":"Below is an example of the response containing an object with all possible keys set. [ { \"id\" : \"arduino:avr\" , \"maintainer\" : \"Arduino\" , \"website\" : \"http://www.arduino.cc/\" , \"email\" : \"packages@arduino.cc\" , \"indexed\" : true , \"manually_installed\" : true , \"deprecated\" : true , \"releases\" : { \"1.6.2\" : { \"name\" : \"Arduino AVR Boards\" , \"version\" : \"1.6.2\" , \"type\" : [ \"Arduino\" ], \"installed\" : true , \"boards\" : [ { \"name\" : \"Arduino Robot Motor\" } ], \"help\" : { \"online\" : \"http://www.arduino.cc/en/Reference/HomePage\" }, \"missing_metadata\" : true , \"deprecated\" : true }, \"1.8.3\" : { ... } }, \"installed_version\" : \"1.6.2\" , \"latest_version\" : \"1.8.3\" } ]","title":"CLI core list and core search changed JSON output."},{"location":"UPGRADING/#grpc-ccarduinoclicommandsv1platformsearchresponse-message-has-been-changed","text":"The old behavior was a bit misleading to the client because, to list all the available versions for each platform, we used to use the latest as it was describing the current platform version. We introduced a new message: PlatformSummary , with the intent to make the response more straightforward and less error-prone. message PlatformSearchResponse { // Results of the search. repeated PlatformSummary search_output = 1 ; } // PlatformSummary is a structure containing all the information about // a platform and all its available releases. message PlatformSummary { // Generic information about a platform PlatformMetadata metadata = 1 ; // Maps version to the corresponding PlatformRelease map < string , PlatformRelease > releases = 2 ; // The installed version of the platform, or empty string if none installed string installed_version = 3 ; // The latest available version of the platform, or empty if none available string latest_version = 4 ; } The new response contains an array of PlatformSummary . PlatformSummary contains all the information about a platform and all its available releases. Releases contain all the PlatformReleases of a specific platform, and the key is the semver string of a specific version. We've added the installed_version and latest_version to make more convenient the access of such values in the map. A few notes about the behavior of the releases map: It can be empty if no releases are found It can contain a single-release It can contain multiple releases If in the request we provide the manually_installed=true , the key of such release is an empty string.","title":"gRPC cc.arduino.cli.commands.v1.PlatformSearchResponse message has been changed."},{"location":"UPGRADING/#removed-grpc-api-ccarduinoclicommandsv1platformlist-platformlistrequest-and-platformlistresponse","text":"The following gRPC API have been removed: cc.arduino.cli.commands.v1.PlatformList : you can use the already available gRPC method PlatformSearch to perform the same task. Setting the all_versions=true and manually_installed=true in the PlatformSearchRequest returns all the data needed to produce the same result of the old api. cc.arduino.cli.commands.v1.PlatformListRequest . cc.arduino.cli.commands.v1.PlatformListResponse .","title":"Removed gRPC API: cc.arduino.cli.commands.v1.PlatformList, PlatformListRequest, and PlatformListResponse."},{"location":"UPGRADING/#grpc-ccarduinoclicommandsv1platform-message-has-been-changed","text":"The old Platform and other information such as name, website, and email... contained details about the currently installed version and the latest available. We noticed an ambiguous use of the latest field, especially when such a message came in the PlatformSearchResponse response. In that use case, the latest field contained the specific version of a particular platform: this is a hack because the value doesn't always reflect the meaning of that property. Another inconsistent case occurs when a platform maintainer changes the name of a particular release. We always pick the value from the latest release, but this might not be what we want to do all the time. We concluded that the design of that message isn't something to be considered future-proof proof, so we decided to modify it as follows: // Platform is a structure containing all the information about a single // platform release. message Platform { // Generic information about a platform PlatformMetadata metadata = 1 ; // Information about a specific release of a platform PlatformRelease release = 2 ; } // PlatformMetadata contains generic information about a platform (not // correlated to a specific release). message PlatformMetadata { // Platform ID (e.g., `arduino:avr`). string id = 1 ; // Maintainer of the platform's package. string maintainer = 2 ; // A URL provided by the author of the platform's package, intended to point // to their website. string website = 3 ; // Email of the maintainer of the platform's package. string email = 4 ; // If true this Platform has been installed manually in the user' sketchbook // hardware folder bool manually_installed = 5 ; // True if the latest release of this Platform has been deprecated bool deprecated = 6 ; // If true the platform is indexed bool indexed = 7 ; } // PlatformRelease contains information about a specific release of a platform. message PlatformRelease { // Name used to identify the platform to humans (e.g., \"Arduino AVR Boards\"). string name = 1 ; // Version of the platform release string version = 5 ; // Type of the platform. repeated string type = 6 ; // True if the platform is installed bool installed = 7 ; // List of boards provided by the platform. If the platform is installed, // this is the boards listed in the platform's boards.txt. If the platform is // not installed, this is an arbitrary list of board names provided by the // platform author for display and may not match boards.txt. repeated Board boards = 8 ; // A URL provided by the author of the platform's package, intended to point // to their online help service. HelpResources help = 9 ; // This field is true if the platform is missing installation metadata (this // happens if the platform has been installed with the legacy Arduino IDE // <=1.8.x). If the platform miss metadata and it's not indexed through a // package index, it may fail to work correctly in some circumstances, and it // may need to be reinstalled. This should be evaluated only when the // PlatformRelease is `Installed` otherwise is an undefined behaviour. bool missing_metadata = 10 ; // True this release is deprecated bool deprecated = 11 ; } To address all the inconsistencies/inaccuracies we introduced two messages: PlatformMetadata contains generic information about a platform (not correlated to a specific release). PlatformRelease contains information about a specific release of a platform.","title":"gRPC cc.arduino.cli.commands.v1.Platform message has been changed."},{"location":"UPGRADING/#debugging_supported-field-has-been-removed-from-grpc-ccarduinoclicommandsv1boarddetails-and-board-details-command-in-cli","text":"The debugging_supported field has been removed, since the possibility to debug is determined by: the board selected the board option selected the programmer selected the board details command has no sufficient information to determine it. If you need to determine if a specific selection of board + option + programmer supports debugging, use the gRPC call cc.arduino.cli.commands.v1.GetDebugConfig : if the call is successful, it means that the debugging is supported.","title":"debugging_supported field has been removed from gRPC cc.arduino.cli.commands.v1.BoardDetails and board details command in CLI"},{"location":"UPGRADING/#0350","text":"","title":"0.35.0"},{"location":"UPGRADING/#cli-debug-info-changed-json-output","text":"The string field server_configuration.script is now an array and has been renamed scripts , here an example: { \"executable\" : \"/tmp/arduino/sketches/002050EAA7EFB9A4FC451CDFBC0FA2D3/Blink.ino.elf\" , \"toolchain\" : \"gcc\" , \"toolchain_path\" : \"/home/user/.arduino15/packages/arduino/tools/arm-none-eabi-gcc/7-2017q4/bin/\" , \"toolchain_prefix\" : \"arm-none-eabi\" , \"server\" : \"openocd\" , \"server_path\" : \"/home/user/.arduino15/packages/arduino/tools/openocd/0.10.0-arduino7/bin/openocd\" , \"server_configuration\" : { \"path\" : \"/home/user/.arduino15/packages/arduino/tools/openocd/0.10.0-arduino7/bin/openocd\" , \"scripts_dir\" : \"/home/user/.arduino15/packages/arduino/tools/openocd/0.10.0-arduino7/share/openocd/scripts/\" , \"scripts\" : [ \"/home/user/Workspace/arduino-cli/internal/integrationtest/debug/testdata/hardware/my/samd/variants/arduino:mkr1000/openocd_scripts/arduino_zero.cfg\" ] } }","title":"CLI debug --info changed JSON output."},{"location":"UPGRADING/#grpc-ccarduinoclicommandsv1getdebugconfigresponse-message-has-been-changed","text":"The fields toolchain_configuration and server_configuration are no more generic map<string, string> but they have changed type to goog.protobuf.Any , the concrete type is assigned at runtime based on the value of toolchain and server fields respectively. For the moment: only gcc is supported for toolchain , and the concrete type for toolchain_configuration is DebugGCCToolchainConfiguration . only openocd is supported for server , and the concrete type for server_configuration is DebugOpenOCDServerConfiguration More concrete type may be added in the future as more servers/toolchains support is implemented.","title":"gRPC cc.arduino.cli.commands.v1.GetDebugConfigResponse message has been changed."},{"location":"UPGRADING/#grpc-service-ccarduinoclidebugv1-moved-to-ccarduinoclicommandsv1","text":"The gRPC service cc.arduino.cli.debug.v1 has been removed and all gRPC messages and rpc calls have been moved to cc.arduino.cli.commands.v1 . The gRPC message DebugConfigRequest has been renamed to the proper GetDebugConfigRequest . All the generated API has been updated as well.","title":"gRPC service cc.arduino.cli.debug.v1 moved to cc.arduino.cli.commands.v1."},{"location":"UPGRADING/#the-grpc-ccarduinoclicommandsv1boardlistwatchrequest-command-request-has-been-changed","text":"The gRPC message BoardListWatchRequest has been changed from: message BoardListWatchRequest { // Arduino Core Service instance from the `Init` response. Instance instance = 1; // Set this to true to stop the discovery process bool interrupt = 2; } to message BoardListWatchRequest { // Arduino Core Service instance from the `Init` response. Instance instance = 1; }","title":"The gRPC cc.arduino.cli.commands.v1.BoardListWatchRequest command request has been changed."},{"location":"UPGRADING/#the-grpc-ccarduinoclicommandsv1boardlistwatch-service-is-now-server-stream-only","text":"rpc BoardListWatch(BoardListWatchRequest) returns (stream BoardListWatchResponse);","title":"The gRPC cc.arduino.cli.commands.v1.BoardListWatch service is now server stream only."},{"location":"UPGRADING/#0340","text":"","title":"0.34.0"},{"location":"UPGRADING/#the-grpc-ccarduinoclicommandsv1uploadrepsonse-command-response-has-been-changed","text":"Previously the UploadResponse was used only to stream the tool output: message UploadResponse { // The output of the upload process. bytes out_stream = 1; // The error output of the upload process. bytes err_stream = 2; } Now the API logic has been clarified using the oneof clause and another field has been added providing an UploadResult message that is sent when a successful upload completes. message UploadResponse { oneof message { // The output of the upload process. bytes out_stream = 1; // The error output of the upload process. bytes err_stream = 2; // The upload result UploadResult result = 3; } } message UploadResult { // When a board requires a port disconnection to perform the upload, this // field returns the port where the board reconnects after the upload. Port updated_upload_port = 1; }","title":"The gRPC cc.arduino.cli.commands.v1.UploadRepsonse command response has been changed."},{"location":"UPGRADING/#golang-api-method-githubcomarduinoarduino-clicommandsuploadupload-changed-signature","text":"The Upload method signature has been changed from: func Upload ( ctx context . Context , req * rpc . UploadRequest , outStream io . Writer , errStream io . Writer ) error { ... } to: func Upload ( ctx context . Context , req * rpc . UploadRequest , outStream io . Writer , errStream io . Writer ) ( * rpc . UploadResult , error ) { ... } Now an UploadResult structure is returned together with the error. If you are not interested in the information contained in the structure you can safely ignore it.","title":"golang API: method github.com/arduino/arduino-cli/commands/upload.Upload changed signature"},{"location":"UPGRADING/#golang-package-githubcomarduinoarduino-cliinventory-removed-from-public-api","text":"The package inventory is no more a public golang API.","title":"golang package github.com/arduino/arduino-cli/inventory removed from public API"},{"location":"UPGRADING/#board-list-watch-command-json-output-has-changed","text":"board list --watch command JSON output changed from: { \"type\": \"add\", \"address\": \"COM3\", \"label\": \"COM3\", \"protocol\": \"serial\", \"protocol_label\": \"Serial Port (USB)\", \"hardwareId\": \"93B0245008567CB2\", \"properties\": { \"pid\": \"0x005E\", \"serialNumber\": \"93B0245008567CB2\", \"vid\": \"0x2341\" }, \"boards\": [ { \"name\": \"Arduino Nano RP2040 Connect\", \"fqbn\": \"arduino:mbed_nano:nanorp2040connect\" } ] } to: { \"eventType\": \"add\", \"matching_boards\": [ { \"name\": \"Arduino Nano RP2040 Connect\", \"fqbn\": \"arduino:mbed_nano:nanorp2040connect\" } ], \"port\": { \"address\": \"COM3\", \"label\": \"COM3\", \"protocol\": \"serial\", \"protocol_label\": \"Serial Port (USB)\", \"properties\": { \"pid\": \"0x005E\", \"serialNumber\": \"93B0245008567CB2\", \"vid\": \"0x2341\" }, \"hardware_id\": \"93B0245008567CB2\" } }","title":"board list --watch command JSON output has changed"},{"location":"UPGRADING/#updated-sketch-name-specifications","text":"Sketch name specifications have been updated to achieve cross-platform compatibility. Existing sketch names violating the new constraint need to be updated.","title":"Updated sketch name specifications"},{"location":"UPGRADING/#golang-api-loadsketch-function-has-been-moved","text":"The function github.com/arduino/arduino-cli/commands.LoadSketch has been moved to package github.com/arduino/arduino-cli/commands/sketch.LoadSketch . You must change the import accordingly.","title":"golang API: LoadSketch function has been moved"},{"location":"UPGRADING/#0330","text":"","title":"0.33.0"},{"location":"UPGRADING/#grpc-ccarduinoclicommandsv1compile-command-now-return-expanded-build_properties-by-default","text":"The gRPC cc.arduino.cli.commands.v1.Compile command now return expanded build_properties by default. If you want the **un**expanded build_properties you must set to true the field do_not_expand_build_properties in the CompileRequest .","title":"gRPC cc.arduino.cli.commands.v1.Compile command now return expanded build_properties by default."},{"location":"UPGRADING/#compile-show-properties-now-return-the-expanded-build-properties","text":"The command compile --show-properties now returns the expanded build properties, with the variable placeholders replaced with their current value. If you need the **un**expanded build properties you must change the command line to compile --show-properties=unexpanded . Before: $ arduino-cli board details -b arduino:avr:uno --show-properties | grep ^tools.avrdude.path tools.avrdude.path={runtime.tools.avrdude.path} Now: $ arduino-cli board details -b arduino:avr:uno --show-properties | grep ^tools.avrdude.path tools.avrdude.path=/home/megabug/.arduino15/packages/arduino/tools/avrdude/6.3.0-arduino17 $ arduino-cli board details -b arduino:avr:uno --show-properties=unexpanded | grep ^tools.avrdude.path tools.avrdude.path={runtime.tools.avrdude.path}","title":"compile --show-properties now return the expanded build properties."},{"location":"UPGRADING/#0322","text":"","title":"0.32.2"},{"location":"UPGRADING/#golang-api-method-githubcomarduinoarduino-cliarduinocoresboardgetbuildproperties-changed-signature","text":"The method: func ( b * Board ) GetBuildProperties ( userConfigs * properties . Map ) ( * properties . Map , error ) { ... } now requires a full FQBN object; func ( b * Board ) GetBuildProperties ( fqbn * FQBN ) ( * properties . Map , error ) { ... } Existing code may be updated from: b . GetBuildProperties ( fqbn . Configs ) to b.GetBuildProperties(fqbn)","title":"golang API: method github.com/arduino/arduino-cli/arduino/cores/Board.GetBuildProperties changed signature"},{"location":"UPGRADING/#0320","text":"","title":"0.32.0"},{"location":"UPGRADING/#arduino-cli-doesnt-lookup-anymore-in-the-current-directory-for-configuration-file","text":"Configuration file lookup in current working directory and its parents is dropped. The command line flag --config-file must be specified to use an alternative configuration file from the one in the data directory.","title":"arduino-cli doesn't lookup anymore in the current directory for configuration file."},{"location":"UPGRADING/#command-outdated-output-change","text":"For text format (default), the command prints now a single table for platforms and libraries instead of two separate tables. Similarly, for JSON and YAML formats, the command prints now a single valid object, with platform and libraries top-level keys. For example, for JSON output: $ arduino-cli outdated --format json { \"platforms\": [ { \"id\": \"arduino:avr\", \"installed\": \"1.6.3\", \"latest\": \"1.8.6\", \"name\": \"Arduino AVR Boards\", ... } ], \"libraries\": [ { \"library\": { \"name\": \"USBHost\", \"author\": \"Arduino\", \"maintainer\": \"Arduino \\u003cinfo@arduino.cc\\u003e\", \"category\": \"Device Control\", \"version\": \"1.0.0\", ... }, \"release\": { \"author\": \"Arduino\", \"version\": \"1.0.5\", \"maintainer\": \"Arduino \\u003cinfo@arduino.cc\\u003e\", \"category\": \"Device Control\", ... } } ] }","title":"Command outdated output change"},{"location":"UPGRADING/#command-compile-does-not-support-vid-pid-flag-anymore","text":"It was a legacy and undocumented feature that is now useless. The corresponding field in gRPC CompileRequest.vid_pid has been removed as well.","title":"Command compile does not support --vid-pid flag anymore"},{"location":"UPGRADING/#golang-api-method-githubcomarduinoarduino-cliarduinolibrarieslibrarylocationpriorityfor-removed","text":"That method was outdated and must not be used.","title":"golang API: method github.com/arduino/arduino-cli/arduino/libraries/Library.LocationPriorityFor removed"},{"location":"UPGRADING/#golang-api-method-githubcomarduinoarduino-clicommandscoregetplatforms-renamed","text":"The following method in github.com/arduino/arduino-cli/commands/core : func GetPlatforms ( req * rpc . PlatformListRequest ) ([] * rpc . Platform , error ) { ... } has been changed to: func PlatformList ( req * rpc . PlatformListRequest ) ( * rpc . PlatformListResponse , error ) { ... } now it better follows the gRPC API interface. Old code like the following: platforms , _ := core . GetPlatforms ( & rpc . PlatformListRequest { Instance : inst }) for _ , i := range platforms { ... } must be changed as follows: // Use PlatformList function instead of GetPlatforms platforms , _ := core . PlatformList ( & rpc . PlatformListRequest { Instance : inst }) // Access installed platforms through the .InstalledPlatforms field for _ , i := range platforms . InstalledPlatforms { ... }","title":"golang API: method github.com/arduino/arduino-cli/commands/core/GetPlatforms renamed"},{"location":"UPGRADING/#0310","text":"","title":"0.31.0"},{"location":"UPGRADING/#added-post_install-script-support-for-tools","text":"The post_install script now runs when a tool is correctly installed and the CLI is in \"interactive\" mode. This behavior can be configured .","title":"Added post_install script support for tools"},{"location":"UPGRADING/#golang-api-methods-in-githubcomarduinoarduino-cliarduinocorespackagemanager-changed-signature","text":"The following methods in github.com/arduino/arduino-cli/arduino/cores/packagemanager : func ( pme * Explorer ) InstallTool ( toolRelease * cores . ToolRelease , taskCB rpc . TaskProgressCB ) error { ... } func ( pme * Explorer ) RunPostInstallScript ( platformRelease * cores . PlatformRelease ) error { ... } have changed. InstallTool requires the new skipPostInstall parameter, which must be set to true to skip the post install script. RunPostInstallScript does not require a *cores.PlatformRelease parameter but requires a *paths.Path parameter: func ( pme * Explorer ) InstallTool ( toolRelease * cores . ToolRelease , taskCB rpc . TaskProgressCB , skipPostInstall bool ) error { ... } func ( pme * Explorer ) RunPostInstallScript ( installDir * paths . Path ) error { ... }","title":"golang API: methods in github.com/arduino/arduino-cli/arduino/cores/packagemanager changed signature"},{"location":"UPGRADING/#0300","text":"","title":"0.30.0"},{"location":"UPGRADING/#sketch-name-validation","text":"The sketch name submitted via the sketch new command of the CLI or the gRPC command cc.arduino.cli.commands.v1.NewSketch are now validated. The applied rules follow the sketch specifications . Existing sketch names violating the new constraint need to be updated.","title":"Sketch name validation"},{"location":"UPGRADING/#daemon-cli-commands-ip-flag-removal","text":"The daemon CLI command no longer allows to set a custom ip for the gRPC communication. Currently there is not enough bandwith to support this feature. For this reason, the --ip flag has been removed.","title":"daemon CLI command's --ip flag removal"},{"location":"UPGRADING/#board-attach-cli-command-changed-behaviour","text":"The board attach CLI command has changed behaviour: now it just pick whatever port and FQBN is passed as parameter and saves it in the sketch.yaml file, without any validity check or board autodetection. The sketch.json file is now completely ignored.","title":"board attach CLI command changed behaviour"},{"location":"UPGRADING/#ccarduinoclicommandsv1boardattach-grpc-interface-command-removal","text":"The cc.arduino.cli.commands.v1.BoardAttach gRPC command has been removed. This feature is no longer available through gRPC.","title":"cc.arduino.cli.commands.v1.BoardAttach gRPC interface command removal"},{"location":"UPGRADING/#golang-api-methods-in-githubcomarduinoarduino-clicommandsupload-changed-return-type","text":"The following methods in github.com/arduino/arduino-cli/commands/upload : func Upload ( ctx context . Context , req * rpc . UploadRequest , outStream io . Writer , errStream io . Writer ) ( * rpc . UploadResponse , error ) { ... } func UsingProgrammer ( ctx context . Context , req * rpc . UploadUsingProgrammerRequest , outStream io . Writer , errStream io . Writer ) ( * rpc . UploadUsingProgrammerResponse , error ) { ... } do not return anymore the response (because it's always empty): func Upload ( ctx context . Context , req * rpc . UploadRequest , outStream io . Writer , errStream io . Writer ) error { ... } func UsingProgrammer ( ctx context . Context , req * rpc . UploadUsingProgrammerRequest , outStream io . Writer , errStream io . Writer ) error { ... }","title":"golang API: methods in github.com/arduino/arduino-cli/commands/upload changed return type"},{"location":"UPGRADING/#golang-api-methods-in-githubcomarduinoarduino-clicommandscompile-changed-signature","text":"The following method in github.com/arduino/arduino-cli/commands/compile : func Compile ( ctx context . Context , req * rpc . CompileRequest , outStream , errStream io . Writer , progressCB rpc . TaskProgressCB , debug bool ) ( r * rpc . CompileResponse , e error ) { ... } do not require the debug parameter anymore: func Compile ( ctx context . Context , req * rpc . CompileRequest , outStream , errStream io . Writer , progressCB rpc . TaskProgressCB ) ( r * rpc . CompileResponse , e error ) { ... }","title":"golang API: methods in github.com/arduino/arduino-cli/commands/compile changed signature"},{"location":"UPGRADING/#golang-api-package-githubcomarduinoarduino-clicli-is-no-more-public","text":"The package cli has been made internal. The code in this package is no more public API and can not be directly imported in other projects.","title":"golang API: package github.com/arduino/arduino-cli/cli is no more public"},{"location":"UPGRADING/#golang-api-change-in-githubcomarduinoarduino-cliarduinolibrarieslibrariesmanagerlibrariesmanager","text":"The following LibrariesManager.InstallPrerequisiteCheck methods have changed prototype, from: func ( lm * LibrariesManager ) InstallPrerequisiteCheck ( indexLibrary * librariesindex . Release , installLocation libraries . LibraryLocation ) ( * paths . Path , * libraries . Library , error ) { ... } func ( lm * LibrariesManager ) InstallZipLib ( ctx context . Context , archivePath string , overwrite bool ) error { ... } to func ( lm * LibrariesManager ) InstallPrerequisiteCheck ( indexLibrary * librariesindex . Release , installLocation libraries . LibraryLocation ) ( * paths . Path , * libraries . Library , error ) { ... } func ( lm * LibrariesManager ) InstallZipLib ( ctx context . Context , archivePath * paths . Path , overwrite bool ) error { ... } InstallPrerequisiteCheck now requires an explicit name and version instead of a librariesindex.Release , because it can now be used to check any library, not only the libraries available in the index. Also the return value has changed to a LibraryInstallPlan structure, it contains the same information as before ( TargetPath and ReplacedLib ) plus Name , Version , and an UpToDate boolean flag. InstallZipLib method archivePath is now a paths.Path instead of a string .","title":"golang API change in github.com/arduino/arduino-cli/arduino/libraries/librariesmanager.LibrariesManager"},{"location":"UPGRADING/#golang-api-change-in-githubcomarduinoarduino-clirduinocorespackagemanagerexplorer","text":"The packagemanager.Explorer method FindToolsRequiredForBoard : func ( pme * Explorer ) FindToolsRequiredForBoard ( board * cores . Board ) ([] * cores . ToolRelease , error ) { ... } has been renamed to `FindToolsRequiredForBuild: func ( pme * Explorer ) FindToolsRequiredForBuild ( platform , buildPlatform * cores . PlatformRelease ) ([] * cores . ToolRelease , error ) { ... } moreover it now requires the platform and the buildPlatform (a.k.a. the referenced platform core used for the compile) instead of the board . Usually these two value are obtained from the Explorer.ResolveFQBN(...) method.","title":"golang API change in github.com/arduino/arduino-cli/rduino/cores/packagemanager.Explorer"},{"location":"UPGRADING/#0290","text":"","title":"0.29.0"},{"location":"UPGRADING/#removed-grpc-api-ccarduinoclicommandsv1updatecorelibrariesindex-outdated-and-upgrade","text":"The following gRPC API have been removed: cc.arduino.cli.commands.v1.UpdateCoreLibrariesIndex : you can use the already available gRPC methods UpdateIndex and UpdateLibrariesIndex to perform the same tasks. cc.arduino.cli.commands.v1.Outdated : you can use the already available gRPC methods PlatformList and LibraryList to perform the same tasks. cc.arduino.cli.commands.v1.Upgrade : you can use the already available gRPC methods PlatformUpgrade and LibraryUpgrade to perform the same tasks. The golang API implementation of the same functions has been removed as well, so the following function are no more available: github.com/arduino/arduino-cli/commands.UpdateCoreLibrariesIndex(...) github.com/arduino/arduino-cli/commands/outdated.Outdated(...) github.com/arduino/arduino-cli/commands/upgrade.Upgrade(...) you can use the following functions as a replacement to do the same tasks: github.com/arduino/arduino-cli/commands.UpdateLibrariesIndex(...) github.com/arduino/arduino-cli/commands.UpdateIndex(...) github.com/arduino/arduino-cli/commands/core.GetPlatforms(...) github.com/arduino/arduino-cli/commands/lib.LibraryList(...) github.com/arduino/arduino-cli/commands/lib.LibraryUpgrade(...) github.com/arduino/arduino-cli/commands/lib.LibraryUpgradeAll(...) github.com/arduino/arduino-cli/commands/core.PlatformUpgrade(...)","title":"Removed gRPC API: cc.arduino.cli.commands.v1.UpdateCoreLibrariesIndex, Outdated, and Upgrade"},{"location":"UPGRADING/#changes-in-golang-functions-githubcomarduinoarduino-clicliinstanceinit-and-initwithprofile","text":"The following functions: func Init ( instance * rpc . Instance ) [] error { } func InitWithProfile ( instance * rpc . Instance , profileName string , sketchPath * paths . Path ) ( * rpc . Profile , [] error ) { } no longer return the errors array: func Init ( instance * rpc . Instance ) { } func InitWithProfile ( instance * rpc . Instance , profileName string , sketchPath * paths . Path ) * rpc . Profile { } The errors are automatically sent to output via feedback package, as for the other Init* functions.","title":"Changes in golang functions github.com/arduino/arduino-cli/cli/instance.Init and InitWithProfile"},{"location":"UPGRADING/#0280","text":"","title":"0.28.0"},{"location":"UPGRADING/#breaking-changes-in-libraries-name-handling","text":"In the structure github.com/arduino/arduino-cli/arduino/libraries.Library the field: RealName has been renamed to Name Name has been renamed to DirName Now Name is the name of the library as it appears in the library.properties file and DirName it's the name of the directory containing the library. The DirName is usually the name of the library with non-alphanumeric characters converted to underscore, but it could be actually anything since the directory where the library is installed can be freely renamed. This change improves the overall code base naming coherence since all the structures involving libraries have the Name field that refers to the library name as it appears in the library.properties file.","title":"Breaking changes in libraries name handling"},{"location":"UPGRADING/#grpc-message-ccarduinoclicommandsv1library-no-longer-has-real_name-field","text":"You must use the name field instead.","title":"gRPC message cc.arduino.cli.commands.v1.Library no longer has real_name field"},{"location":"UPGRADING/#machine-readable-lib-list-output-no-longer-has-real-name-field","text":"","title":"Machine readable lib list output no longer has \"real name\" field"},{"location":"UPGRADING/#json","text":"The [*].library.real_name field has been removed. You must use the [*].library.name field instead.","title":"JSON"},{"location":"UPGRADING/#yaml","text":"The [*].library.realname field has been removed. You must use the [*].library.name field instead.","title":"YAML"},{"location":"UPGRADING/#githubcomarduinoarduino-cliarduinolibrarieslibrariesmanagerlibrariesmanagerinstall-removed-parameter-installlocation","text":"The method: func ( lm * LibrariesManager ) Install ( indexLibrary * librariesindex . Release , libPath * paths . Path , installLocation libraries . LibraryLocation ) error { ... } no more needs the installLocation parameter: func ( lm * LibrariesManager ) Install ( indexLibrary * librariesindex . Release , libPath * paths . Path ) error { ... } The install location is determined from the libPath.","title":"github.com/arduino/arduino-cli/arduino/libraries/librariesmanager.LibrariesManager.Install removed parameter installLocation"},{"location":"UPGRADING/#githubcomarduinoarduino-cliarduinolibrarieslibrariesmanagerlibrariesmanagerfindbyreference-now-returns-a-list-of-libraries","text":"The method: func ( lm * LibrariesManager ) FindByReference ( libRef * librariesindex . Reference , installLocation libraries . LibraryLocation ) * libraries . Library { ... } has been changed to: func ( lm * LibrariesManager ) FindByReference ( libRef * librariesindex . Reference , installLocation libraries . LibraryLocation ) libraries . List { ... } the method now returns all the libraries matching the criteria and not just the first one.","title":"github.com/arduino/arduino-cli/arduino/libraries/librariesmanager.LibrariesManager.FindByReference now returns a list of libraries."},{"location":"UPGRADING/#githubcomarduinoarduino-cliarduinolibrarieslibrariesmanagerlibraryalternatives-removed","text":"The structure librariesmanager.LibraryAlternatives has been removed. The libraries.List object can be used as a replacement.","title":"github.com/arduino/arduino-cli/arduino/libraries/librariesmanager.LibraryAlternatives removed"},{"location":"UPGRADING/#breaking-changes-in-updateindex-api-both-grpc-and-go-lang","text":"The gRPC message cc.arduino.cli.commands.v1.DownloadProgress has been changed from: message DownloadProgress { // URL of the download. string url = 1; // The file being downloaded. string file = 2; // Total size of the file being downloaded. int64 total_size = 3; // Size of the downloaded portion of the file. int64 downloaded = 4; // Whether the download is complete. bool completed = 5; } to message DownloadProgress { oneof message { DownloadProgressStart start = 1; DownloadProgressUpdate update = 2; DownloadProgressEnd end = 3; } } message DownloadProgressStart { // URL of the download. string url = 1; // The label to display on the progress bar. string label = 2; } message DownloadProgressUpdate { // Size of the downloaded portion of the file. int64 downloaded = 1; // Total size of the file being downloaded. int64 total_size = 2; } message DownloadProgressEnd { // True if the download is successful bool success = 1; // Info or error message, depending on the value of 'success'. Some examples: // \"File xxx already downloaded\" or \"Connection timeout\" string message = 2; } The new message format allows a better handling of the progress update reports on downloads. Every download now will report a sequence of message as follows: DownloadProgressStart{url=\"https://...\", label=\"Downloading package index...\"} DownloadProgressUpdate{downloaded=0, total_size=103928} DownloadProgressUpdate{downloaded=29380, total_size=103928} DownloadProgressUpdate{downloaded=69540, total_size=103928} DownloadProgressEnd{success=true, message=\"\"} or if an error occurs: DownloadProgressStart{url=\"https://...\", label=\"Downloading package index...\"} DownloadProgressUpdate{downloaded=0, total_size=103928} DownloadProgressEnd{success=false, message=\"Server closed connection\"} or if the file is already cached: DownloadProgressStart{url=\"https://...\", label=\"Downloading package index...\"} DownloadProgressEnd{success=true, message=\"Index already downloaded\"} About the go-lang API the following functions in github.com/arduino/arduino-cli/commands : func UpdateIndex ( ctx context . Context , req * rpc . UpdateIndexRequest , downloadCB rpc . DownloadProgressCB ) ( * rpc . UpdateIndexResponse , error ) { ... } have changed their signature to: func UpdateIndex ( ctx context . Context , req * rpc . UpdateIndexRequest , downloadCB rpc . DownloadProgressCB , downloadResultCB rpc . DownloadResultCB ) error { ... } UpdateIndex do not return anymore the latest UpdateIndexResponse (beacuse it was always empty).","title":"Breaking changes in UpdateIndex API (both gRPC and go-lang)"},{"location":"UPGRADING/#0270","text":"","title":"0.27.0"},{"location":"UPGRADING/#breaking-changes-in-golang-api-githubcomarduinoarduino-cliarduinocorespackagemanagerpackagemanager","text":"The PackageManager API has been heavily refactored to correctly handle multitasking and concurrency. Many fields in the PackageManager object are now private. All the PackageManager methods have been moved into other objects. In particular: the methods that query the PackageManager without changing its internal state, have been moved into the new Explorer object the methods that change the PackageManager internal state, have been moved into the new Builder object. The Builder object must be used to create a new PackageManager . Previously the function NewPackageManager was used to get a clean PackageManager object and then use the LoadHardware* methods to build it. Now the function NewBuilder must be used to create a Builder , run the LoadHardware* methods to load platforms, and finally call the Builder.Build() method to obtain the final PackageManager . Previously we did: pm := packagemanager . NewPackageManager ( ... ) err = pm . LoadHardware () err = pm . LoadHardwareFromDirectories ( ... ) err = pm . LoadHardwareFromDirectory ( ... ) err = pm . LoadToolsFromPackageDir ( ... ) err = pm . LoadToolsFromBundleDirectories ( ... ) err = pm . LoadToolsFromBundleDirectory ( ... ) pack = pm . GetOrCreatePackage ( \"packagername\" ) // ...use `pack` to tweak or load more hardware... err = pm . LoadPackageIndex ( ... ) err = pm . LoadPackageIndexFromFile ( ... ) err = pm . LoadHardwareForProfile ( ... ) // ...use `pm` to implement business logic... Now we must do: var pm * packagemanager . PackageManager { pmb := packagemanager . Newbuilder ( ... ) err = pmb . LoadHardware () err = pmb . LoadHardwareFromDirectories ( ... ) err = pmb . LoadHardwareFromDirectory ( ... ) err = pmb . LoadToolsFromPackageDir ( ... ) err = pmb . LoadToolsFromBundleDirectories ( ... ) err = pmb . LoadToolsFromBundleDirectory ( ... ) pack = pmb . GetOrCreatePackage ( \"packagername\" ) // ...use `pack` to tweak or load more hardware... err = pmb . LoadPackageIndex ( ... ) err = pmb . LoadPackageIndexFromFile ( ... ) err = pmb . LoadHardwareForProfile ( ... ) pm = pmb . Build () } // ...use `pm` to implement business logic... It's not mandatory but highly recommended, to drop the Builder object once it has built the PackageManager (that's why in the example the pmb builder is created in a limited scope between braces). To query the PackagerManager now it is required to obtain an Explorer object through the PackageManager.NewExplorer() method. Previously we did: func DoStuff ( pm * packagemanager . PackageManager , ... ) { // ...implement business logic through PackageManager methods... ... := pm . Packages ... := pm . CustomGlobalProperties ... := pm . FindPlatform ( ... ) ... := pm . FindPlatformRelease ( ... ) ... := pm . FindPlatformReleaseDependencies ( ... ) ... := pm . DownloadToolRelease ( ... ) ... := pm . DownloadPlatformRelease ( ... ) ... := pm . IdentifyBoard ( ... ) ... := pm . DownloadAndInstallPlatformUpgrades ( ... ) ... := pm . DownloadAndInstallPlatformAndTools ( ... ) ... := pm . InstallPlatform ( ... ) ... := pm . InstallPlatformInDirectory ( ... ) ... := pm . RunPostInstallScript ( ... ) ... := pm . IsManagedPlatformRelease ( ... ) ... := pm . UninstallPlatform ( ... ) ... := pm . InstallTool ( ... ) ... := pm . IsManagedToolRelease ( ... ) ... := pm . UninstallTool ( ... ) ... := pm . IsToolRequired ( ... ) ... := pm . LoadDiscoveries ( ... ) ... := pm . GetProfile ( ... ) ... := pm . GetEnvVarsForSpawnedProcess ( ... ) ... := pm . DiscoveryManager ( ... ) ... := pm . FindPlatformReleaseProvidingBoardsWithVidPid ( ... ) ... := pm . FindBoardsWithVidPid ( ... ) ... := pm . FindBoardsWithID ( ... ) ... := pm . FindBoardWithFQBN ( ... ) ... := pm . ResolveFQBN ( ... ) ... := pm . Package ( ... ) ... := pm . GetInstalledPlatformRelease ( ... ) ... := pm . GetAllInstalledToolsReleases ( ... ) ... := pm . InstalledPlatformReleases ( ... ) ... := pm . InstalledBoards ( ... ) ... := pm . FindToolsRequiredFromPlatformRelease ( ... ) ... := pm . GetTool ( ... ) ... := pm . FindToolsRequiredForBoard ( ... ) ... := pm . FindToolDependency ( ... ) ... := pm . FindDiscoveryDependency ( ... ) ... := pm . FindMonitorDependency ( ... ) } Now we must obtain the Explorer object to access the same methods, moreover, we must call the release callback function once we complete the task: func DoStuff ( pm * packagemanager . PackageManager , ... ) { pme , release := pm . NewExplorer () defer release () ... := pme . GetPackages () ... := pme . GetCustomGlobalProperties () ... := pme . FindPlatform ( ... ) ... := pme . FindPlatformRelease ( ... ) ... := pme . FindPlatformReleaseDependencies ( ... ) ... := pme . DownloadToolRelease ( ... ) ... := pme . DownloadPlatformRelease ( ... ) ... := pme . IdentifyBoard ( ... ) ... := pme . DownloadAndInstallPlatformUpgrades ( ... ) ... := pme . DownloadAndInstallPlatformAndTools ( ... ) ... := pme . InstallPlatform ( ... ) ... := pme . InstallPlatformInDirectory ( ... ) ... := pme . RunPostInstallScript ( ... ) ... := pme . IsManagedPlatformRelease ( ... ) ... := pme . UninstallPlatform ( ... ) ... := pme . InstallTool ( ... ) ... := pme . IsManagedToolRelease ( ... ) ... := pme . UninstallTool ( ... ) ... := pme . IsToolRequired ( ... ) ... := pme . LoadDiscoveries ( ... ) ... := pme . GetProfile ( ... ) ... := pme . GetEnvVarsForSpawnedProcess ( ... ) ... := pme . DiscoveryManager ( ... ) ... := pme . FindPlatformReleaseProvidingBoardsWithVidPid ( ... ) ... := pme . FindBoardsWithVidPid ( ... ) ... := pme . FindBoardsWithID ( ... ) ... := pme . FindBoardWithFQBN ( ... ) ... := pme . ResolveFQBN ( ... ) ... := pme . Package ( ... ) ... := pme . GetInstalledPlatformRelease ( ... ) ... := pme . GetAllInstalledToolsReleases ( ... ) ... := pme . InstalledPlatformReleases ( ... ) ... := pme . InstalledBoards ( ... ) ... := pme . FindToolsRequiredFromPlatformRelease ( ... ) ... := pme . GetTool ( ... ) ... := pme . FindToolsRequiredForBoard ( ... ) ... := pme . FindToolDependency ( ... ) ... := pme . FindDiscoveryDependency ( ... ) ... := pme . FindMonitorDependency ( ... ) } The Explorer object keeps a read-lock on the underlying PackageManager that must be released once the task is done by calling the release callback function. This ensures that no other task will change the status of the PackageManager while the current task is in progress. The PackageManager.Clean() method has been removed and replaced by the methods: PackageManager.NewBuilder() (*Builder, commit func()) Builder.BuildIntoExistingPackageManager(target *PackageManager) Previously, to update a PackageManager instance we did: func Reload ( pm * packagemanager . PackageManager ) { pm . Clear () ... = pm . LoadHardware ( ... ) // ...other pm.Load* calls... } now we have two options: func Reload ( pm * packagemanager . PackageManager ) { // Create a new builder and build a package manager pmb := packagemanager . NewBuilder ( ... /* config params */ ) ... = pmb . LoadHardware ( ... ) // ...other pmb.Load* calls... // apply the changes to the original pm pmb . BuildIntoExistingPackageManager ( pm ) } in this case, we create a new Builder with the given config params and once the package manager is built we apply the changes atomically with BuildIntoExistingPackageManager . This procedure may be even more simplified with: func Reload ( pm * packagemanager . PackageManager ) { // Create a new builder using the same config params // as the original package manager pmb , commit := pm . NewBuilder () // build the new package manager ... = pmb . LoadHardware ( ... ) // ...other pmb.Load* calls... // apply the changes to the original pm commit () } In this case, we don't even need to bother to provide the configuration parameters because they are taken from the previous PackageManager instance.","title":"Breaking changes in golang API github.com/arduino/arduino-cli/arduino/cores/packagemanager.PackageManager"},{"location":"UPGRADING/#some-grpc-mapped-methods-now-accepts-the-grpc-request-instead-of-the-instance-id-as-parameter","text":"The following methods in subpackages of github.com/arduino/arduino-cli/commands/* : func Watch ( instanceID int32 ) ( <- chan * rpc . BoardListWatchResponse , func (), error ) { ... } func LibraryUpgradeAll ( instanceID int32 , downloadCB rpc . DownloadProgressCB , taskCB rpc . TaskProgressCB ) error { ... } func LibraryUpgrade ( instanceID int32 , libraryNames [] string , downloadCB rpc . DownloadProgressCB , taskCB rpc . TaskProgressCB ) error { ... } have been changed to: func Watch ( req * rpc . BoardListWatchRequest ) ( <- chan * rpc . BoardListWatchResponse , func (), error ) { ... } func LibraryUpgradeAll ( req * rpc . LibraryUpgradeAllRequest , downloadCB rpc . DownloadProgressCB , taskCB rpc . TaskProgressCB ) error { ... } func LibraryUpgrade ( ctx context . Context , req * rpc . LibraryUpgradeRequest , downloadCB rpc . DownloadProgressCB , taskCB rpc . TaskProgressCB ) error { ... } The following methods in package github.com/arduino/arduino-cli/commands func GetInstance ( id int32 ) * CoreInstance { ... } func GetPackageManager ( id int32 ) * packagemanager . PackageManager { ... } func GetLibraryManager ( instanceID int32 ) * librariesmanager . LibrariesManager { ... } have been changed to: func GetPackageManager ( instance rpc . InstanceCommand ) * packagemanager . PackageManager { ... } // Deprecated func GetPackageManagerExplorer ( req rpc . InstanceCommand ) ( explorer * packagemanager . Explorer , release func ()) { ... } func GetLibraryManager ( req rpc . InstanceCommand ) * librariesmanager . LibrariesManager { ... } Old code passing the instanceID inside the gRPC request must be changed to pass directly the whole gRPC request, for example: eventsChan , closeWatcher , err := board . Watch ( req . Instance . Id ) must be changed to: eventsChan , closeWatcher , err := board . Watch ( req )","title":"Some gRPC-mapped methods now accepts the gRPC request instead of the instance ID as parameter"},{"location":"UPGRADING/#removed-detection-of-arduino-ide-bundling","text":"Arduino CLI does not check anymore if it's bundled with the Arduino IDE 1.x. Previously this check allowed the Arduino CLI to automatically use the libraries and tools bundled in the Arduino IDE, now this is not supported anymore unless the configuration keys directories.builtin.libraries and directories.builtin.tools are set.","title":"Removed detection of Arduino IDE bundling"},{"location":"UPGRADING/#grpc-enumeration-renamed-enum-value-in-ccarduinoclicommandsv1librarylocation","text":"LIBRARY_LOCATION_IDE_BUILTIN has been renamed to LIBRARY_LOCATION_BUILTIN","title":"gRPC enumeration renamed enum value in cc.arduino.cli.commands.v1.LibraryLocation"},{"location":"UPGRADING/#go-lang-api-change-in-librarymanager","text":"The following methods: func ( lm * LibrariesManager ) InstallPrerequisiteCheck ( indexLibrary * librariesindex . Release ) ( * paths . Path , * libraries . Library , error ) { ... } func ( lm * LibrariesManager ) Install ( indexLibrary * librariesindex . Release , libPath * paths . Path ) error { ... ] func ( alts * LibraryAlternatives ) FindVersion ( version * semver . Version , installLocation libraries . LibraryLocation ) * libraries . Library { ... } func ( lm * LibrariesManager ) FindByReference ( libRef * librariesindex . Reference ) * libraries . Library { ... } now requires a new parameter LibraryLocation : func ( lm * LibrariesManager ) InstallPrerequisiteCheck ( indexLibrary * librariesindex . Release , installLocation libraries . LibraryLocation ) ( * paths . Path , * libraries . Library , error ) { ... } func ( lm * LibrariesManager ) Install ( indexLibrary * librariesindex . Release , libPath * paths . Path , installLocation libraries . LibraryLocation ) error { ... ] func ( alts * LibraryAlternatives ) FindVersion ( version * semver . Version , installLocation libraries . LibraryLocation ) * libraries . Library { ... } + func ( lm * LibrariesManager ) FindByReference ( libRef * librariesindex . Reference , installLocation libraries . LibraryLocation ) * libraries . Library { ... } If you're not interested in specifying the LibraryLocation you can use libraries.User to refer to the user directory.","title":"go-lang API change in LibraryManager"},{"location":"UPGRADING/#go-lang-functions-changes-in-githubcomarduinoarduino-cliconfiguration","text":"github.com/arduino/arduino-cli/configuration.IsBundledInDesktopIDE function has been removed. github.com/arduino/arduino-cli/configuration.BundleToolsDirectories has been renamed to BuiltinToolsDirectories github.com/arduino/arduino-cli/configuration.IDEBundledLibrariesDir has been renamed to IDEBuiltinLibrariesDir","title":"go-lang functions changes in github.com/arduino/arduino-cli/configuration"},{"location":"UPGRADING/#removed-utilsfeedstreamto-and-utilsconsumestreamfrom","text":"github.com/arduino/arduino-cli/arduino/utils.FeedStreamTo and github.com/arduino/arduino-cli/arduino/utils.ConsumeStreamFrom are now private. They are mainly used internally for gRPC stream handling and are not suitable to be public API.","title":"Removed utils.FeedStreamTo and utils.ConsumeStreamFrom"},{"location":"UPGRADING/#0260","text":"","title":"0.26.0"},{"location":"UPGRADING/#githubcomarduinoarduino-clicommandsdownloadtoolrelease-and-installtoolrelease-functions-have-been-removed","text":"This functionality was duplicated and already available via PackageManager methods.","title":"github.com/arduino/arduino-cli/commands.DownloadToolRelease, and InstallToolRelease functions have been removed"},{"location":"UPGRADING/#githubcomarduinoarduino-clicommandsoutdated-and-upgrade-functions-have-been-moved","text":"github.com/arduino/arduino-cli/commands.Outdated is now github.com/arduino/arduino-cli/commands/outdated.Outdated github.com/arduino/arduino-cli/commands.Upgrade is now github.com/arduino/arduino-cli/commands/upgrade.Upgrade Old code must change the imports accordingly.","title":"github.com/arduino/arduino-cli/commands.Outdated and Upgrade functions have been moved"},{"location":"UPGRADING/#githubcomarduino-cliarduinocorespackagemanagerpackagemanager-methods-and-fields-change","text":"The PackageManager.Log and TempDir fields are now private. The PackageManager.DownloadToolRelease method has no more the label parameter: func ( pm * PackageManager ) DownloadToolRelease ( tool * cores . ToolRelease , config * downloader . Config , label string , progressCB rpc . DownloadProgressCB ) error { has been changed to: func ( pm * PackageManager ) DownloadToolRelease ( tool * cores . ToolRelease , config * downloader . Config , progressCB rpc . DownloadProgressCB ) error { Old code should remove the label parameter. The PackageManager.UninstallPlatform , PackageManager.InstallTool , and PackageManager.UninstallTool methods now requires a github.com/arduino/arduino-cli/rpc/cc/arduino/cli/commands/v1.TaskProgressCB func ( pm * PackageManager ) UninstallPlatform ( platformRelease * cores . PlatformRelease ) error { func ( pm * PackageManager ) InstallTool ( toolRelease * cores . ToolRelease ) error { func ( pm * PackageManager ) UninstallTool ( toolRelease * cores . ToolRelease ) error { have been changed to: func ( pm * PackageManager ) UninstallPlatform ( platformRelease * cores . PlatformRelease , taskCB rpc . TaskProgressCB ) error { func ( pm * PackageManager ) InstallTool ( toolRelease * cores . ToolRelease , taskCB rpc . TaskProgressCB ) error { func ( pm * PackageManager ) UninstallTool ( toolRelease * cores . ToolRelease , taskCB rpc . TaskProgressCB ) error { If you're not interested in getting the task events you can pass an empty callback function.","title":"github.com/arduino-cli/arduino/cores/packagemanager.PackageManager methods and fields change"},{"location":"UPGRADING/#0250","text":"","title":"0.25.0"},{"location":"UPGRADING/#go-lang-function-githubcomarduinoarduino-cliarduinoutilsfeedstreamto-has-been-changed","text":"The function FeedStreamTo has been changed from: func FeedStreamTo ( writer func ( data [] byte )) io . Writer to func FeedStreamTo ( writer func ( data [] byte )) ( io . WriteCloser , context . Context ) The user must call the Close method on the returned io.WriteClose to correctly dispose the streaming channel. The context Done() method may be used to wait for the internal subroutines to complete.","title":"go-lang function github.com/arduino/arduino-cli/arduino/utils.FeedStreamTo has been changed"},{"location":"UPGRADING/#0240","text":"","title":"0.24.0"},{"location":"UPGRADING/#grpc-monitor-service-and-related-grpc-calls-have-been-removed","text":"The gRPC Monitor service and the gRPC call Monitor.StreamingOpen have been removed in favor of the new Pluggable Monitor API in the gRPC Commands service: Commands.Monitor : open a monitor connection to a communication port. Commands.EnumerateMonitorPortSettings : enumerate the possible configurations parameters for a communication port. Please refer to the official documentation and the reference client implementation for details on how to use the new API. https://arduino.github.io/arduino-cli/dev/rpc/commands/#monitorrequest https://arduino.github.io/arduino-cli/dev/rpc/commands/#monitorresponse https://arduino.github.io/arduino-cli/dev/rpc/commands/#enumeratemonitorportsettingsrequest https://arduino.github.io/arduino-cli/dev/rpc/commands/#enumeratemonitorportsettingsresponse https://github.com/arduino/arduino-cli/blob/master/commands/daemon/term_example/main.go","title":"gRPC Monitor service and related gRPC calls have been removed"},{"location":"UPGRADING/#0230","text":"","title":"0.23.0"},{"location":"UPGRADING/#arduino-ide-builtin-libraries-are-now-excluded-from-the-build-when-running-arduino-cli-standalone","text":"Previously the \"builtin libraries\" in the Arduino IDE 1.8.x were always included in the build process. This wasn't the intended behaviour, arduino-cli should include them only if run as a daemon from the Arduino IDE. Now this is fixed, but since it has been the default behaviour from a very long time we decided to report it here as a breaking change. If a compilation fail for a missing bundled library, you can fix it just by installing the missing library from the library manager as usual.","title":"Arduino IDE builtin libraries are now excluded from the build when running arduino-cli standalone"},{"location":"UPGRADING/#grpc-changes-in-message-ccarduinoclicommandsv1platformreference","text":"The gRPC message structure cc.arduino.cli.commands.v1.PlatformReference has been renamed to cc.arduino.cli.commands.v1.InstalledPlatformReference , and some new fields have been added: install_dir is the installation directory of the platform package_url is the 3rd party platform URL of the platform It is currently used only in cc.arduino.cli.commands.v1.CompileResponse , so the field type has been changed as well. Old gRPC clients must only update gRPC bindings. They can safely ignore the new fields if not needed.","title":"gRPC: Changes in message cc.arduino.cli.commands.v1.PlatformReference"},{"location":"UPGRADING/#golang-api-githubcomarduinoarduino-clicliglobalsdefaultindexurl-has-been-moved-under-githubcomarduinoarduino-cliarduinoglobals","text":"Legacy code should just update the import.","title":"golang API: github.com/arduino/arduino-cli/cli/globals.DefaultIndexURL has been moved under github.com/arduino/arduino-cli/arduino/globals"},{"location":"UPGRADING/#golang-api-packagemanagerdownloadplatformrelease-no-longer-need-label-parameter","text":"func ( pm * PackageManager ) DownloadPlatformRelease ( platform * cores . PlatformRelease , config * downloader . Config , label string , progressCB rpc . DownloadProgressCB ) error { is now: func ( pm * PackageManager ) DownloadPlatformRelease ( platform * cores . PlatformRelease , config * downloader . Config , progressCB rpc . DownloadProgressCB ) error { Just remove the label parameter from legacy code.","title":"golang API: PackageManager.DownloadPlatformRelease no longer need label parameter"},{"location":"UPGRADING/#0220","text":"","title":"0.22.0"},{"location":"UPGRADING/#githubcomarduinoarduino-cliarduinomultipleboardsdetectederror-field-changed-type","text":"Now the Port field of the error is a github.com/arduino/arduino-cli/rpc/cc/arduino/cli/commands/v1.Port , usually imported as rpc.Port . The old discovery.Port can be converted to the new one using the .ToRPC() method.","title":"github.com/arduino/arduino-cli/arduino.MultipleBoardsDetectedError field changed type"},{"location":"UPGRADING/#function-githubcomarduinoarduino-clicommandsuploaddetectconnectedboard-has-been-removed","text":"Use github.com/arduino/arduino-cli/commands/board.List(...) to detect boards.","title":"Function github.com/arduino/arduino-cli/commands/upload.DetectConnectedBoard(...) has been removed"},{"location":"UPGRADING/#function-argumentsgetdiscoveryport-has-been-removed","text":"NOTE: the functions in the arguments package doesn't have much use outside of the arduino-cli so we are considering to remove them from the public golang API making them internal . The old function: func ( p * Port ) GetDiscoveryPort ( instance * rpc . Instance , sk * sketch . Sketch ) * discovery . Port { } is now replaced by the more powerful: func ( p * Port ) DetectFQBN ( inst * rpc . Instance ) ( string , * rpc . Port ) { } func CalculateFQBNAndPort ( portArgs * Port , fqbnArg * Fqbn , instance * rpc . Instance , sk * sketch . Sketch ) ( string , * rpc . Port ) { }","title":"Function arguments.GetDiscoveryPort(...) has been removed"},{"location":"UPGRADING/#grpc-address-parameter-has-been-removed-from-commandssupporteduserfieldsrequest","text":"The parameter is no more needed. Lagacy code will continue to work without modification (the value of the parameter will be just ignored).","title":"gRPC: address parameter has been removed from commands.SupportedUserFieldsRequest"},{"location":"UPGRADING/#the-content-of-package-githubcomarduinoarduino-clihttpclient-has-been-moved-to-a-different-path","text":"In particular: UserAgent and NetworkProxy have been moved to github.com/arduino/arduino-cli/configuration the remainder of the package github.com/arduino/arduino-cli/httpclient has been moved to github.com/arduino/arduino-cli/arduino/httpclient The old imports must be updated according to the list above.","title":"The content of package github.com/arduino/arduino-cli/httpclient has been moved to a different path"},{"location":"UPGRADING/#commandsdownloadprogresscb-and-commandstaskprogresscb-have-been-moved-to-package-githubcomarduinoarduino-clirpcccarduinoclicommandsv1","text":"All references to these types must be updated with the new import.","title":"commands.DownloadProgressCB and commands.TaskProgressCB have been moved to package github.com/arduino/arduino-cli/rpc/cc/arduino/cli/commands/v1"},{"location":"UPGRADING/#commandsgetdownloaderconfig-has-been-moved-to-package-githubcomarduinoarduino-cliarduinohttpclient","text":"All references to this function must be updated with the new import.","title":"commands.GetDownloaderConfig has been moved to package github.com/arduino/arduino-cli/arduino/httpclient"},{"location":"UPGRADING/#commandsdownload-has-been-removed-and-replaced-by-githubcomarduinoarduino-cliarduinohttpclientdownloadfile","text":"The old function must be replaced by the new one that is much more versatile.","title":"commands.Download has been removed and replaced by github.com/arduino/arduino-cli/arduino/httpclient.DownloadFile"},{"location":"UPGRADING/#packagemanagerpackagemanagerdownloadtoolrelease-packagemanagerpackagemanagerdownloadplatformrelease-and-resourcesdownloadresourcedownload-functions-change-signature-and-behaviour","text":"The following functions: func ( pm * PackageManager ) DownloadToolRelease ( tool * cores . ToolRelease , config * downloader . Config ) ( * downloader . Downloader , error ) func ( pm * PackageManager ) DownloadPlatformRelease ( platform * cores . PlatformRelease , config * downloader . Config ) ( * downloader . Downloader , error ) func ( r * DownloadResource ) Download ( downloadDir * paths . Path , config * downloader . Config ) ( * downloader . Downloader , error ) now requires a label and a progress callback parameter, do not return the Downloader object anymore, and they automatically handles the download internally: func ( pm * PackageManager ) DownloadToolRelease ( tool * cores . ToolRelease , config * downloader . Config , label string , progressCB rpc . DownloadProgressCB ) error func ( pm * PackageManager ) DownloadPlatformRelease ( platform * cores . PlatformRelease , config * downloader . Config , label string , progressCB rpc . DownloadProgressCB ) error func ( r * DownloadResource ) Download ( downloadDir * paths . Path , config * downloader . Config , label string , downloadCB rpc . DownloadProgressCB ) error The new progress parameters must be added to legacy code, if progress reports are not needed an empty stub for label and progressCB must be provided. There is no more need to execute the downloader.Run() or downloader.RunAndPoll(...) method. For example, the old legacy code like: downloader , err := pm . DownloadPlatformRelease ( platformToDownload , config ) if err != nil { ... } if err := downloader . Run (); err != nil { ... } may be ported to the new version as: err := pm . DownloadPlatformRelease ( platformToDownload , config , \"\" , func ( progress * rpc . DownloadProgress ) {})","title":"packagemanager.PackageManager.DownloadToolRelease, packagemanager.PackageManager.DownloadPlatformRelease, and resources.DownloadResource.Download functions change signature and behaviour"},{"location":"UPGRADING/#packagemanagerload-functions-now-returns-error-instead-of-statusstatus","text":"The following functions signature: func ( pm * PackageManager ) LoadHardware () [] * status . Status { ... } func ( pm * PackageManager ) LoadHardwareFromDirectories ( hardwarePaths paths . PathList ) [] * status . Status { ... } func ( pm * PackageManager ) LoadHardwareFromDirectory ( path * paths . Path ) [] * status . Status { ... } func ( pm * PackageManager ) LoadToolsFromBundleDirectories ( dirs paths . PathList ) [] * status . Status { ... } func ( pm * PackageManager ) LoadDiscoveries () [] * status . Status { ... } have been changed to: func ( pm * PackageManager ) LoadHardware () [] error { ... } func ( pm * PackageManager ) LoadHardwareFromDirectories ( hardwarePaths paths . PathList ) [] error { ... } func ( pm * PackageManager ) LoadHardwareFromDirectory ( path * paths . Path ) [] error { ... } func ( pm * PackageManager ) LoadToolsFromBundleDirectories ( dirs paths . PathList ) [] error { ... } func ( pm * PackageManager ) LoadDiscoveries () [] error { ... } These function no longer returns a gRPC status, so the errors can be handled as any other error .","title":"packagemanager.Load* functions now returns error instead of *status.Status"},{"location":"UPGRADING/#removed-error-return-from-discoverynew-function","text":"The discovery.New(...) function never fails, so the error has been removed, the old signature: func New ( id string , args ... string ) ( * PluggableDiscovery , error ) { ... } is now: func New ( id string , args ... string ) * PluggableDiscovery { ... }","title":"Removed error return from discovery.New(...) function"},{"location":"UPGRADING/#0210","text":"","title":"0.21.0"},{"location":"UPGRADING/#packagemanagernewpackagemanager-function-change","text":"A new argument userAgent has been added to packagemanager.NewPackageManager , the new function signature is: func NewPackageManager ( indexDir , packagesDir , downloadDir , tempDir * paths . Path , userAgent string ) * PackageManager { The userAgent string must be in the format \"ProgramName/Version\" , for example \"arduino-cli/0.20.1\" .","title":"packagemanager.NewPackageManager function change"},{"location":"UPGRADING/#commandscreate-function-change","text":"A new argument extraUserAgent has been added to commands.Create , the new function signature is: func Create ( req * rpc . CreateRequest , extraUserAgent ... string ) ( * rpc . CreateResponse , error ) { extraUserAgent is an array of strings, so multiple user agent may be provided. Each user agent must be in the format \"ProgramName/Version\" , for example \"arduino-cli/0.20.1\" .","title":"commands.Create function change"},{"location":"UPGRADING/#commandscompile-function-change","text":"A new argument progressCB has been added to commands.Compile , the new function signature is: func Compile ( ctx context . Context , req * rpc . CompileRequest , outStream , errStream io . Writer , progressCB commands . TaskProgressCB , debug bool ) ( r * rpc . CompileResponse , e error ) { if a callback function is provided the Compile command will call it periodically with progress reports with the percentage of compilation completed, otherwise, if the parameter is nil , no progress reports will be performed.","title":"commands.Compile function change"},{"location":"UPGRADING/#githubcomarduinoarduino-clicliargumentsparsereferences-function-change","text":"The parseArch parameter was removed since it was unused and was always true. This means that the architecture gets always parsed by the function.","title":"github.com/arduino/arduino-cli/cli/arguments.ParseReferences function change"},{"location":"UPGRADING/#githubcomarduinoarduino-clicliargumentsparsereference-function-change","text":"The parseArch parameter was removed since it was unused and was always true. This means that the architecture gets always parsed by the function. Furthermore the function now should also correctly interpret packager:arch spelled with the wrong casing.","title":"github.com/arduino/arduino-cli/cli/arguments.ParseReference function change"},{"location":"UPGRADING/#githubcomarduinoarduino-cliexecutilsnewprocess-and-executilsnewprocessfrompath-function-change","text":"A new argument extraEnv has been added to executils.NewProcess and executils.NewProcessFromPath , the new function signature is: func NewProcess ( extraEnv [] string , args ... string ) ( * Process , error ) { func NewProcessFromPath ( extraEnv [] string , executable * paths . Path , args ... string ) ( * Process , error ) { The extraEnv params allow to pass environment variables (in addition to the default ones) to the spawned process.","title":"github.com/arduino/arduino-cli/executils.NewProcess and executils.NewProcessFromPath function change"},{"location":"UPGRADING/#githubcomarduinoarduino-clii18ninit-now-requires-an-empty-string-to-be-passed-for-autodetection-of-locale","text":"For automated detection of locale, change the call from: i18n . Init () to i18n . Init ( \"\" )","title":"github.com/arduino/arduino-cli/i18n.Init(...) now requires an empty string to be passed for autodetection of locale"},{"location":"UPGRADING/#githubcomarduinoarduino-clilegacyi18n-module-has-been-removed-in-particular-the-i18nlogger","text":"The i18n.Logger is no longer available. It was mainly used in the legacy builder struct field Context.Logger . The Context.Logger field has been replaced with plain io.Writer fields Contex.Stdout and Context.Stderr . All existing logger functionality has been dropped, for example the Java-Style formatting with tags like {0} {1}... must be replaced with one of the equivalent golang printf-based alternatives and logging levels must be replaced with direct writes to Stdout or Stderr .","title":"github.com/arduino/arduino-cli/legacy/i18n module has been removed (in particular the i18n.Logger)"},{"location":"UPGRADING/#0200","text":"","title":"0.20.0"},{"location":"UPGRADING/#board-details-arguments-change","text":"The board details command now accepts only the --fqbn or -b flags to specify the FQBN. The previously deprecated board details <FQBN> syntax is no longer supported.","title":"board details arguments change"},{"location":"UPGRADING/#board-attach-arguments-change","text":"The board attach command now uses --port and -p flags to set board port and --board and -b flags to select its FQBN. The previous syntax board attach <port>|<FQBN> [sketchPath] is no longer supported.","title":"board attach arguments change"},{"location":"UPGRADING/#-timeout-flag-in-board-list-command-has-been-replaced-by-discovery-timeout","text":"The flag --timeout in the board list command is no longer supported.","title":"--timeout flag in board list command has been replaced by --discovery-timeout"},{"location":"UPGRADING/#0190","text":"","title":"0.19.0"},{"location":"UPGRADING/#board-list-command-json-output-change","text":"The board list command JSON output has been changed quite a bit, from: $ arduino-cli board list --format json [ { \"address\": \"/dev/ttyACM1\", \"protocol\": \"serial\", \"protocol_label\": \"Serial Port (USB)\", \"boards\": [ { \"name\": \"Arduino Uno\", \"fqbn\": \"arduino:avr:uno\", \"vid\": \"0x2341\", \"pid\": \"0x0043\" } ], \"serial_number\": \"954323132383515092E1\" } ] to: $ arduino-cli board list --format json [ { \"matching_boards\": [ { \"name\": \"Arduino Uno\", \"fqbn\": \"arduino:avr:uno\" } ], \"port\": { \"address\": \"/dev/ttyACM1\", \"label\": \"/dev/ttyACM1\", \"protocol\": \"serial\", \"protocol_label\": \"Serial Port (USB)\", \"properties\": { \"pid\": \"0x0043\", \"serialNumber\": \"954323132383515092E1\", \"vid\": \"0x2341\" } } } ] The boards array has been renamed matching_boards , each contained object will now contain only name and fqbn . Properties that can be used to identify a board are now moved to the new properties object, it can contain any key name. pid and vid have been moved to properties , serial_number has been renamed serialNumber and moved to properties . The new label field is the name of the port if it should be displayed in a GUI.","title":"board list command JSON output change"},{"location":"UPGRADING/#grpc-interface-debugconfigrequest-uploadrequest-uploadusingprogrammerrequest-burnbootloaderrequest-detectedport-field-changes","text":"DebugConfigRequest , UploadRequest , UploadUsingProgrammerRequest and BurnBootloaderRequest had their port field change from type string to Port . Port contains the following information: // Port represents a board port that may be used to upload or to monitor a board message Port { // Address of the port (e.g., `/dev/ttyACM0`). string address = 1; // The port label to show on the GUI (e.g. \"ttyACM0\") string label = 2; // Protocol of the port (e.g., `serial`, `network`, ...). string protocol = 3; // A human friendly description of the protocol (e.g., \"Serial Port (USB)\" string protocol_label = 4; // A set of properties of the port map<string, string> properties = 5; } The gRPC interface message DetectedPort has been changed from: message DetectedPort { // Address of the port (e.g., `serial:///dev/ttyACM0`). string address = 1; // Protocol of the port (e.g., `serial`). string protocol = 2; // A human friendly description of the protocol (e.g., \"Serial Port (USB)\"). string protocol_label = 3; // The boards attached to the port. repeated BoardListItem boards = 4; // Serial number of connected board string serial_number = 5; } to: message DetectedPort { // The possible boards attached to the port. repeated BoardListItem matching_boards = 1; // The port details Port port = 2; } The properties previously contained directly in the message are now stored in the port property. These changes are necessary for the pluggable discovery.","title":"gRPC interface DebugConfigRequest, UploadRequest, UploadUsingProgrammerRequest, BurnBootloaderRequest, DetectedPort field changes"},{"location":"UPGRADING/#grpc-interface-boardlistitem-change","text":"The vid and pid fields of the BoardListItem message have been removed. They used to only be available when requesting connected board lists, now that information is stored in the port field of DetectedPort .","title":"gRPC interface BoardListItem change"},{"location":"UPGRADING/#change-public-library-interface","text":"","title":"Change public library interface"},{"location":"UPGRADING/#githubcomarduinoarduino-clii18n-package","text":"The behavior of the Init function has changed. The user specified locale code is no longer read from the github.com/arduino/arduino-cli/configuration package and now must be passed directly to Init as a string: i18n . Init ( \"it\" ) Omit the argument for automated locale detection: i18n . Init ()","title":"github.com/arduino/arduino-cli/i18n package"},{"location":"UPGRADING/#githubcomarduinoarduino-cliarduinobuilder-package","text":"GenBuildPath() function has been moved to github.com/arduino/arduino-cli/arduino/sketch package. The signature is unchanged. EnsureBuildPathExists function from has been completely removed, in its place use github.com/arduino/go-paths-helper.MkDirAll() . SketchSaveItemCpp function signature is changed from path string, contents []byte, destPath string to path *paths.Path, contents []byte, destPath *paths.Path . paths is github.com/arduino/go-paths-helper . SketchLoad function has been removed, in its place use New from github.com/arduino/arduino-cli/arduino/sketch package. - SketchLoad(\"/some/path\", \"\") + sketch.New(paths.New(\"some/path)) } If you need to set a custom build path you must instead set it after creating the Sketch. - SketchLoad(\"/some/path\", \"/my/build/path\") + s, err := sketch.New(paths.New(\"some/path)) + s.BuildPath = paths.new(\"/my/build/path\") } SketchCopyAdditionalFiles function signature is changed from sketch *sketch.Sketch, destPath string, overrides map[string]string to sketch *sketch.Sketch, destPath *paths.Path, overrides map[string]string .","title":"github.com/arduino/arduino-cli/arduino/builder package"},{"location":"UPGRADING/#githubcomarduinoarduino-cliarduinosketch-package","text":"Item struct has been removed, use go-paths-helper.Path in its place. NewItem has been removed too, use go-paths-helper.New in its place. GetSourceBytes has been removed, in its place use go-paths-helper.Path.ReadFile . GetSourceStr too has been removed, in its place: - s, err := item.GetSourceStr() + data, err := file.ReadFile() + s := string(data) } ItemByPath type and its member functions have been removed, use go-paths-helper.PathList in its place. Sketch.LocationPath has been renamed to FullPath and its type changed from string to go-paths-helper.Path . Sketch.MainFile type has changed from *Item to go-paths-helper.Path . Sketch.OtherSketchFiles , Sketch.AdditionalFiles and Sketch.RootFolderFiles type has changed from []*Item to go-paths-helper.PathList . New signature has been changed from sketchFolderPath, mainFilePath, buildPath string, allFilesPaths []string to path *go-paths-helper.Path . CheckSketchCasing function is now private, the check is done internally by New . InvalidSketchFoldernameError has been renamed InvalidSketchFolderNameError .","title":"github.com/arduino/arduino-cli/arduino/sketch package"},{"location":"UPGRADING/#githubcomarduinoarduino-cliarduinosketches-package","text":"Sketch struct has been merged with sketch.Sketch struct. Metadata and BoardMetadata structs have been moved to github.com/arduino/arduino-cli/arduino/sketch package. NewSketchFromPath has been deleted, use sketch.New in its place. ImportMetadata is now private called internally by sketch.New . ExportMetadata has been moved to github.com/arduino/arduino-cli/arduino/sketch package. BuildPath has been removed, use sketch.Sketch.BuildPath in its place. CheckForPdeFiles has been moved to github.com/arduino/arduino-cli/arduino/sketch package.","title":"github.com/arduino/arduino-cli/arduino/sketches package"},{"location":"UPGRADING/#githubcomarduinoarduino-clilegacybuildertypes-package","text":"Sketch has been removed, use sketch.Sketch in its place. SketchToLegacy and SketchFromLegacy have been removed, nothing replaces them. Context.Sketch types has been changed from Sketch to sketch.Sketch .","title":"github.com/arduino/arduino-cli/legacy/builder/types package"},{"location":"UPGRADING/#change-in-board-details-response-grpc-and-json-output","text":"The board details output WRT board identification properties has changed, before it was: $ arduino-cli board details arduino:samd:mkr1000 Board name: Arduino MKR1000 FQBN: arduino:samd:mkr1000 Board version: 1.8.11 Debugging supported: \u2714 Official Arduino board: \u2714 Identification properties: VID:0x2341 PID:0x824e VID:0x2341 PID:0x024e VID:0x2341 PID:0x804e VID:0x2341 PID:0x004e [...] $ arduino-cli board details arduino:samd:mkr1000 --format json [...] \"identification_prefs\": [ { \"usb_id\": { \"vid\": \"0x2341\", \"pid\": \"0x804e\" } }, { \"usb_id\": { \"vid\": \"0x2341\", \"pid\": \"0x004e\" } }, { \"usb_id\": { \"vid\": \"0x2341\", \"pid\": \"0x824e\" } }, { \"usb_id\": { \"vid\": \"0x2341\", \"pid\": \"0x024e\" } } ], [...] now the properties have been renamed from identification_prefs to identification_properties and they are no longer specific to USB but they can theoretically be any set of key/values: $ arduino-cli board details arduino:samd:mkr1000 Board name: Arduino MKR1000 FQBN: arduino:samd:mkr1000 Board version: 1.8.11 Debugging supported: \u2714 Official Arduino board: \u2714 Identification properties: vid=0x2341 pid=0x804e Identification properties: vid=0x2341 pid=0x004e Identification properties: vid=0x2341 pid=0x824e Identification properties: vid=0x2341 pid=0x024e [...] $ arduino-cli board details arduino:samd:mkr1000 --format json [...] \"identification_properties\": [ { \"properties\": { \"pid\": \"0x804e\", \"vid\": \"0x2341\" } }, { \"properties\": { \"pid\": \"0x004e\", \"vid\": \"0x2341\" } }, { \"properties\": { \"pid\": \"0x824e\", \"vid\": \"0x2341\" } }, { \"properties\": { \"pid\": \"0x024e\", \"vid\": \"0x2341\" } } ] }","title":"Change in board details response (gRPC and JSON output)"},{"location":"UPGRADING/#change-of-behaviour-of-grpc-init-function","text":"Previously the Init function was used to both create a new CoreInstance and initialize it, so that the internal package and library managers were already populated with all the information available from *_index.json files, installed platforms and libraries and so on. Now the initialization phase is split into two, first the client must create a new CoreInstance with the Create function, that does mainly two things: create all folders necessary to correctly run the CLI if not already existing create and return a new CoreInstance The Create function will only fail if folders creation is not successful. The returned instance is relatively unusable since no library and no platform is loaded, some functions that don't need that information can still be called though. The Init function has been greatly overhauled and it doesn't fail completely if one or more platforms or libraries fail to load now. Also the option library_manager_only has been removed, the package manager is always initialized and platforms are loaded. The Init was already a server-side streaming function but it would always return one and only one response, this has been modified so that each response is either an error or a notification on the initialization process so that it works more like an actual stream of information. Previously a client would call the function like so: const initReq = new InitRequest () initReq . setLibraryManagerOnly ( false ) const initResp = await new Promise < InitResponse > (( resolve , reject ) => { let resp : InitResponse | undefined = undefined const stream = client . init ( initReq ) stream . on ( \"data\" , ( data : InitResponse ) => ( resp = data )) stream . on ( \"end\" , () => resolve ( resp ! )) stream . on ( \"error\" , ( err ) => reject ( err )) }) const instance = initResp . getInstance () if ( ! instance ) { throw new Error ( \"Could not retrieve instance from the initialize response.\" ) } Now something similar should be done. const createReq = new CreateRequest () const instance = client . create ( createReq ) if ( ! instance ) { throw new Error ( \"Could not retrieve instance from the initialize response.\" ) } const initReq = new InitRequest () initReq . setInstance ( instance ) const initResp = client . init ( initReq ) initResp . on ( \"data\" , ( o : InitResponse ) => { const downloadProgress = o . getDownloadProgress () if ( downloadProgress ) { // Handle download progress } const taskProgress = o . getTaskProgress () if ( taskProgress ) { // Handle task progress } const err = o . getError () if ( err ) { // Handle error } }) await new Promise < void > (( resolve , reject ) => { initResp . on ( \"error\" , ( err ) => reject ( err )) initResp . on ( \"end\" , resolve ) }) Previously if even one platform or library failed to load everything else would fail too, that doesn't happen anymore. Now it's easier for both the CLI and the gRPC clients to handle gracefully platforms or libraries updates that might break the initialization step and make everything unusable.","title":"Change of behaviour of gRPC Init function"},{"location":"UPGRADING/#removal-of-grpc-rescan-function","text":"The Rescan function has been removed, in its place the Init function must be used.","title":"Removal of gRPC Rescan function"},{"location":"UPGRADING/#change-of-behaviour-of-grpc-updateindex-and-updatelibrariesindex-functions","text":"Previously both UpdateIndex and UpdateLibrariesIndex functions implicitly called Rescan so that the internal CoreInstance was updated with the eventual new information obtained in the update. This behaviour is now removed and the internal CoreInstance must be explicitly updated by the gRPC client using the Init function.","title":"Change of behaviour of gRPC UpdateIndex and UpdateLibrariesIndex functions"},{"location":"UPGRADING/#removed-rarely-used-golang-api","text":"The following function from the github.com/arduino/arduino-cli/arduino/libraries module is no longer available: func ( lm * LibrariesManager ) UpdateIndex ( config * downloader . Config ) ( * downloader . Downloader , error ) { We recommend using the equivalent gRPC API to perform the update of the index.","title":"Removed rarely used golang API"},{"location":"UPGRADING/#0180","text":"","title":"0.18.0"},{"location":"UPGRADING/#breaking-changes-in-grpc-api-and-cli-json-output","text":"Starting from this release we applied a more rigorous and stricter naming conventions in gRPC API following the official guidelines: https://developers.google.com/protocol-buffers/docs/style We also started using a linter to implement checks for gRPC API style errors. This provides a better consistency and higher quality API but inevitably introduces breaking changes.","title":"Breaking changes in gRPC API and CLI JSON output."},{"location":"UPGRADING/#grpc-api-breaking-changes","text":"Consumers of the gRPC API should regenerate their bindings and update all structures naming where necessary. Most of the changes are trivial and falls into the following categories: Service names have been suffixed with ...Service (for example ArduinoCore -> ArduinoCoreService ) Message names suffix has been changed from ...Req / ...Resp to ...Request / ...Response (for example BoardDetailsReq -> BoardDetailsRequest ) Enumerations now have their class name prefixed (for example the enumeration value FLAT in LibraryLayout has been changed to LIBRARY_LAYOUT_FLAT ) Use of lower-snake case on all fields (for example: ID -> id , FQBN -> fqbn , Name -> name , ArchiveFilename -> archive_filename ) Package names are now versioned (for example cc.arduino.cli.commands -> cc.arduino.cli.commands.v1 ) Repeated responses are now in plural form ( identification_pref -> identification_prefs , platform -> platforms )","title":"gRPC API breaking changes"},{"location":"UPGRADING/#arduino-cli-json-output-breaking-changes","text":"Consumers of the JSON output of the CLI must update their clients if they use one of the following commands: in core search command the following fields have been renamed: Boards -> boards Email -> email ID -> id Latest -> latest Maintainer -> maintainer Name -> name Website -> website The new output is like: $ arduino-cli core search Due --format json [ { \"id\": \"arduino:sam\", \"latest\": \"1.6.12\", \"name\": \"Arduino SAM Boards (32-bits ARM Cortex-M3)\", \"maintainer\": \"Arduino\", \"website\": \"http://www.arduino.cc/\", \"email\": \"packages@arduino.cc\", \"boards\": [ { \"name\": \"Arduino Due (Native USB Port)\", \"fqbn\": \"arduino:sam:arduino_due_x\" }, { \"name\": \"Arduino Due (Programming Port)\", \"fqbn\": \"arduino:sam:arduino_due_x_dbg\" } ] } ] in board details command the following fields have been renamed: identification_pref -> identification_prefs usbID -> usb_id PID -> pid VID -> vid websiteURL -> website_url archiveFileName -> archive_filename propertiesId -> properties_id toolsDependencies -> tools_dependencies The new output is like: $ arduino-cli board details arduino:avr:uno --format json { \"fqbn\": \"arduino:avr:uno\", \"name\": \"Arduino Uno\", \"version\": \"1.8.3\", \"properties_id\": \"uno\", \"official\": true, \"package\": { \"maintainer\": \"Arduino\", \"url\": \"https://downloads.arduino.cc/packages/package_index.json\", \"website_url\": \"http://www.arduino.cc/\", \"email\": \"packages@arduino.cc\", \"name\": \"arduino\", \"help\": { \"online\": \"http://www.arduino.cc/en/Reference/HomePage\" } }, \"platform\": { \"architecture\": \"avr\", \"category\": \"Arduino\", \"url\": \"http://downloads.arduino.cc/cores/avr-1.8.3.tar.bz2\", \"archive_filename\": \"avr-1.8.3.tar.bz2\", \"checksum\": \"SHA-256:de8a9b982477762d3d3e52fc2b682cdd8ff194dc3f1d46f4debdea6a01b33c14\", \"size\": 4941548, \"name\": \"Arduino AVR Boards\" }, \"tools_dependencies\": [ { \"packager\": \"arduino\", \"name\": \"avr-gcc\", \"version\": \"7.3.0-atmel3.6.1-arduino7\", \"systems\": [ { \"checksum\": \"SHA-256:3903553d035da59e33cff9941b857c3cb379cb0638105dfdf69c97f0acc8e7b5\", \"host\": \"arm-linux-gnueabihf\", \"archive_filename\": \"avr-gcc-7.3.0-atmel3.6.1-arduino7-arm-linux-gnueabihf.tar.bz2\", \"url\": \"http://downloads.arduino.cc/tools/avr-gcc-7.3.0-atmel3.6.1-arduino7-arm-linux-gnueabihf.tar.bz2\", \"size\": 34683056 }, { ... } ] }, { ... } ], \"identification_prefs\": [ { \"usb_id\": { \"vid\": \"0x2341\", \"pid\": \"0x0043\" } }, { ... } ], \"programmers\": [ { \"platform\": \"Arduino AVR Boards\", \"id\": \"parallel\", \"name\": \"Parallel Programmer\" }, { ... } ] } in board listall command the following fields have been renamed: FQBN -> fqbn Email -> email ID -> id Installed -> installed Latest -> latest Name -> name Maintainer -> maintainer Website -> website The new output is like: $ arduino-cli board listall Uno --format json { \"boards\": [ { \"name\": \"Arduino Uno\", \"fqbn\": \"arduino:avr:uno\", \"platform\": { \"id\": \"arduino:avr\", \"installed\": \"1.8.3\", \"latest\": \"1.8.3\", \"name\": \"Arduino AVR Boards\", \"maintainer\": \"Arduino\", \"website\": \"http://www.arduino.cc/\", \"email\": \"packages@arduino.cc\" } } ] } in board search command the following fields have been renamed: FQBN -> fqbn Email -> email ID -> id Installed -> installed Latest -> latest Name -> name Maintainer -> maintainer Website -> website The new output is like: $ arduino-cli board search Uno --format json [ { \"name\": \"Arduino Uno\", \"fqbn\": \"arduino:avr:uno\", \"platform\": { \"id\": \"arduino:avr\", \"installed\": \"1.8.3\", \"latest\": \"1.8.3\", \"name\": \"Arduino AVR Boards\", \"maintainer\": \"Arduino\", \"website\": \"http://www.arduino.cc/\", \"email\": \"packages@arduino.cc\" } } ] in lib deps command the following fields have been renamed: versionRequired -> version_required versionInstalled -> version_installed The new output is like: $ arduino-cli lib deps Arduino_MKRIoTCarrier --format json { \"dependencies\": [ { \"name\": \"Adafruit seesaw Library\", \"version_required\": \"1.3.1\" }, { \"name\": \"SD\", \"version_required\": \"1.2.4\", \"version_installed\": \"1.2.3\" }, { ... } ] } in lib search command the following fields have been renamed: archivefilename -> archive_filename cachepath -> cache_path The new output is like: $ arduino-cli lib search NTPClient --format json { \"libraries\": [ { \"name\": \"NTPClient\", \"releases\": { \"1.0.0\": { \"author\": \"Fabrice Weinberg\", \"version\": \"1.0.0\", \"maintainer\": \"Fabrice Weinberg \\u003cfabrice@weinberg.me\\u003e\", \"sentence\": \"An NTPClient to connect to a time server\", \"paragraph\": \"Get time from a NTP server and keep it in sync.\", \"website\": \"https://github.com/FWeinb/NTPClient\", \"category\": \"Timing\", \"architectures\": [ \"esp8266\" ], \"types\": [ \"Arduino\" ], \"resources\": { \"url\": \"https://downloads.arduino.cc/libraries/github.com/arduino-libraries/NTPClient-1.0.0.zip\", \"archive_filename\": \"NTPClient-1.0.0.zip\", \"checksum\": \"SHA-256:b1f2907c9d51ee253bad23d05e2e9c1087ab1e7ba3eb12ee36881ba018d81678\", \"size\": 6284, \"cache_path\": \"libraries\" } }, \"2.0.0\": { ... }, \"3.0.0\": { ... }, \"3.1.0\": { ... }, \"3.2.0\": { ... } }, \"latest\": { \"author\": \"Fabrice Weinberg\", \"version\": \"3.2.0\", \"maintainer\": \"Fabrice Weinberg \\u003cfabrice@weinberg.me\\u003e\", \"sentence\": \"An NTPClient to connect to a time server\", \"paragraph\": \"Get time from a NTP server and keep it in sync.\", \"website\": \"https://github.com/arduino-libraries/NTPClient\", \"category\": \"Timing\", \"architectures\": [ \"*\" ], \"types\": [ \"Arduino\" ], \"resources\": { \"url\": \"https://downloads.arduino.cc/libraries/github.com/arduino-libraries/NTPClient-3.2.0.zip\", \"archive_filename\": \"NTPClient-3.2.0.zip\", \"checksum\": \"SHA-256:122d00df276972ba33683aff0f7fe5eb6f9a190ac364f8238a7af25450fd3e31\", \"size\": 7876, \"cache_path\": \"libraries\" } } } ], \"status\": 1 } in board list command the following fields have been renamed: FQBN -> fqbn VID -> vid PID -> pid The new output is like: $ arduino-cli board list --format json [ { \"address\": \"/dev/ttyACM0\", \"protocol\": \"serial\", \"protocol_label\": \"Serial Port (USB)\", \"boards\": [ { \"name\": \"Arduino Nano 33 BLE\", \"fqbn\": \"arduino:mbed:nano33ble\", \"vid\": \"0x2341\", \"pid\": \"0x805a\" }, { \"name\": \"Arduino Nano 33 BLE\", \"fqbn\": \"arduino-dev:mbed:nano33ble\", \"vid\": \"0x2341\", \"pid\": \"0x805a\" }, { \"name\": \"Arduino Nano 33 BLE\", \"fqbn\": \"arduino-dev:nrf52:nano33ble\", \"vid\": \"0x2341\", \"pid\": \"0x805a\" }, { \"name\": \"Arduino Nano 33 BLE\", \"fqbn\": \"arduino-beta:mbed:nano33ble\", \"vid\": \"0x2341\", \"pid\": \"0x805a\" } ], \"serial_number\": \"BECC45F754185EC9\" } ] $ arduino-cli board list -w --format json { \"type\": \"add\", \"address\": \"/dev/ttyACM0\", \"protocol\": \"serial\", \"protocol_label\": \"Serial Port (USB)\", \"boards\": [ { \"name\": \"Arduino Nano 33 BLE\", \"fqbn\": \"arduino-dev:nrf52:nano33ble\", \"vid\": \"0x2341\", \"pid\": \"0x805a\" }, { \"name\": \"Arduino Nano 33 BLE\", \"fqbn\": \"arduino-dev:mbed:nano33ble\", \"vid\": \"0x2341\", \"pid\": \"0x805a\" }, { \"name\": \"Arduino Nano 33 BLE\", \"fqbn\": \"arduino-beta:mbed:nano33ble\", \"vid\": \"0x2341\", \"pid\": \"0x805a\" }, { \"name\": \"Arduino Nano 33 BLE\", \"fqbn\": \"arduino:mbed:nano33ble\", \"vid\": \"0x2341\", \"pid\": \"0x805a\" } ], \"serial_number\": \"BECC45F754185EC9\" } { \"type\": \"remove\", \"address\": \"/dev/ttyACM0\" }","title":"arduino-cli JSON output breaking changes"},{"location":"UPGRADING/#0160","text":"","title":"0.16.0"},{"location":"UPGRADING/#change-type-of-compilereqexportbinaries-message-in-grpc-interface","text":"This change affects only the gRPC consumers. In the CompileReq message the export_binaries property type has been changed from bool to google.protobuf.BoolValue . This has been done to handle settings bindings by gRPC consumers and the CLI in the same way so that they an identical behaviour.","title":"Change type of CompileReq.ExportBinaries message in gRPC interface"},{"location":"UPGRADING/#0150","text":"","title":"0.15.0"},{"location":"UPGRADING/#rename-telemetry-settings-to-metrics","text":"All instances of the term telemetry in the code and the documentation has been changed to metrics . This has been done to clarify that no data is currently gathered from users of the CLI. To handle this change the users must edit their config file, usually arduino-cli.yaml , and change the telemetry key to metrics . The modification must be done by manually editing the file using a text editor, it can't be done via CLI. No other action is necessary. The default folders for the arduino-cli.yaml are: Linux: /home/<your_username>/.arduino15/arduino-cli.yaml OS X: /Users/<your_username>/Library/Arduino15/arduino-cli.yaml Windows: C:\\Users\\<your_username>\\AppData\\Local\\Arduino15\\arduino-cli.yaml","title":"Rename telemetry settings to metrics"},{"location":"UPGRADING/#0140","text":"","title":"0.14.0"},{"location":"UPGRADING/#changes-in-debug-command","text":"Previously it was required: To provide a debug command line recipe in platform.txt like tools.reciped-id.debug.pattern=..... that will start a gdb session for the selected board. To add a debug.tool definition in the boards.txt to recall that recipe, for example myboard.debug.tool=recipe-id Now: Only the configuration needs to be supplied, the arduino-cli or the GUI tool will figure out how to call and setup the gdb session. An example of configuration is the following: debug.executable={build.path}/{build.project_name}.elf debug.toolchain=gcc debug.toolchain.path={runtime.tools.arm-none-eabi-gcc-7-2017q4.path}/bin/ debug.toolchain.prefix=arm-none-eabi debug.server=openocd debug.server.openocd.path={runtime.tools.openocd-0.10.0-arduino7.path}/bin/ debug.server.openocd.scripts_dir={runtime.tools.openocd-0.10.0-arduino7.path}/share/openocd/scripts/ debug.server.openocd.script={runtime.platform.path}/variants/{build.variant}/{build.openocdscript} The debug.executable key must be present and non-empty for debugging to be supported. The debug.server.XXXX subkeys are optional and also \"free text\", this means that the configuration may be extended as needed by the specific server. For now only openocd is supported. Anyway, if this change works, any other kind of server may be fairly easily added. The debug.xxx=yyy definitions above may be supplied and overlayed in the usual ways: on platform.txt : definition here will be shared through all boards in the platform on boards.txt as part of a board definition: they will override the global platform definitions on programmers.txt : they will override the boards and global platform definitions if the programmer is selected","title":"Changes in debug command"},{"location":"UPGRADING/#binaries-export-must-now-be-explicitly-specified","text":"Previously, if the --build-path was not specified, compiling a Sketch would copy the generated binaries in <sketch_folder>/build/<fqbn>/ , uploading to a board required that path to exist and contain the necessary binaries. The --dry-run flag was removed. The default, compile does not copy generated binaries to the sketch folder. The --export-binaries ( -e ) flag was introduced to copy the binaries from the build folder to the sketch one. --export-binaries is not required when using the --output-dir flag. A related configuration key and environment variable has been added to avoid the need to always specify the --export-binaries flag: sketch.always_export_binaries and ARDUINO_SKETCH_ALWAYS_EXPORT_BINARIES . If --input-dir or --input-file is not set when calling upload the command will search for the deterministically created build directory in the temp folder and use the binaries found there. The gRPC interface has been updated accordingly, dryRun is removed.","title":"Binaries export must now be explicitly specified"},{"location":"UPGRADING/#programmers-cant-be-listed-anymore-using-burn-bootloader-p-list","text":"The -P flag is used to select the programmer used to burn the bootloader on the specified board. Using -P list to list all the possible programmers for the current board was hackish. This way has been removed in favour of board details <fqbn> --list-programmers .","title":"Programmers can't be listed anymore using burn-bootloader -P list"},{"location":"UPGRADING/#lib-install-git-url-and-zip-file-must-now-be-explicitly-enabled","text":"With the introduction of the --git-url and --zip-file flags the new config key library.enable_unsafe_install has been added to enable them. This changes the ouput of the config dump command.","title":"lib install --git-url and --zip-file must now be explicitly enabled"},{"location":"UPGRADING/#change-behaviour-of-config-file-flag-with-config-commands","text":"To create a new config file with config init one must now use --dest-dir or the new --dest-file flags. Previously the config file would always be overwritten by this command, now it fails if the it already exists, to force the previous behaviour the user must set the --overwrite flag.","title":"Change behaviour of --config-file flag with config commands"},{"location":"command-line-completion/","text":"arduino-cli supports command-line completion (also known as tab completion ) for basic commands. Currently bash , zsh , fish , and powershell shells are supported Before you start \u00b6 In order to generate the file required to make the completion work you have to install Arduino CLI first. Generate the completion file \u00b6 To generate the completion file you can use arduino-cli completion [bash|zsh|fish|powershell] [--no-descriptions] . By default this command will print on the standard output (the shell window) the content of the completion file. To save to an actual file use the > redirect symbol. Bash \u00b6 Use arduino-cli completion bash > arduino-cli.sh to generate the completion file. At this point you can move that file in /etc/bash_completion.d/ (root access is required) with sudo mv arduino-cli.sh /etc/bash_completion.d/ . A not recommended alternative is to source the completion file in ~/.bashrc . Remember to open a new shell to test the functionality. Zsh \u00b6 Use arduino-cli completion zsh > _arduino-cli to generate the completion file. At this point you can place the file in a directory listed in your fpath if you have already created a directory to store your completion. Or if you want you can create a directory, add it to your fpath and copy the file in it: mkdir ~/completion_zsh add fpath=($HOME/completion_zsh $fpath) at the beginning of your ~/.zshrc file mv _arduino-cli ~/completion_zsh/ Remember to open a new shell to test the functionality. Fish \u00b6 Use arduino-cli completion fish > arduino-cli.fish to generate the completion file. At this point you can place the file in ~/.config/fish/completions as stated in the official documentation . Remember to create the directory if it's not already there mkdir -p ~/.config/fish/completions/ and then place the completion file in there with mv arduino-cli.fish ~/.config/fish/completions/ Remember to open a new shell to test the functionality. Powershell \u00b6 Use arduino-cli completion powershell > arduino-cli.ps1 to generate a temporary completion file. At this point you need to add the content of the generated file to your PowerShell profile file. Get-Content -Path arduino-cli.ps1 | Add-Content -Path $profile or add it by hand with your favourite text editor. The previous command added two using namespace lines, move them on top of the $profile file. If not already done, add the line Set-PSReadlineKeyHandler -Key Tab -Function MenuComplete to your $profile file: it is needed to enable the TAB completion in PowerShell. del arduino-cli.ps1 to remove the temporary file. Remember to open a new shell to test the functionality. For more information on tab-completion on PowerShell, please, refer to Autocomplete in PowerShell . Disabling command and flag descriptions \u00b6 By default fish, zsh and bash completion have command and flag description enabled by default. If you want to disable this behaviour you can simply pass the --no-descriptions flag when calling completion command and the generated file will not have descriptions N.B. This flag is not compatible with powershell Brew \u00b6 If you install the arduino-cli using homebrew package manager the completion should work out of the box if you have followed the official documentation .","title":"Command line completion"},{"location":"command-line-completion/#before-you-start","text":"In order to generate the file required to make the completion work you have to install Arduino CLI first.","title":"Before you start"},{"location":"command-line-completion/#generate-the-completion-file","text":"To generate the completion file you can use arduino-cli completion [bash|zsh|fish|powershell] [--no-descriptions] . By default this command will print on the standard output (the shell window) the content of the completion file. To save to an actual file use the > redirect symbol.","title":"Generate the completion file"},{"location":"command-line-completion/#bash","text":"Use arduino-cli completion bash > arduino-cli.sh to generate the completion file. At this point you can move that file in /etc/bash_completion.d/ (root access is required) with sudo mv arduino-cli.sh /etc/bash_completion.d/ . A not recommended alternative is to source the completion file in ~/.bashrc . Remember to open a new shell to test the functionality.","title":"Bash"},{"location":"command-line-completion/#zsh","text":"Use arduino-cli completion zsh > _arduino-cli to generate the completion file. At this point you can place the file in a directory listed in your fpath if you have already created a directory to store your completion. Or if you want you can create a directory, add it to your fpath and copy the file in it: mkdir ~/completion_zsh add fpath=($HOME/completion_zsh $fpath) at the beginning of your ~/.zshrc file mv _arduino-cli ~/completion_zsh/ Remember to open a new shell to test the functionality.","title":"Zsh"},{"location":"command-line-completion/#fish","text":"Use arduino-cli completion fish > arduino-cli.fish to generate the completion file. At this point you can place the file in ~/.config/fish/completions as stated in the official documentation . Remember to create the directory if it's not already there mkdir -p ~/.config/fish/completions/ and then place the completion file in there with mv arduino-cli.fish ~/.config/fish/completions/ Remember to open a new shell to test the functionality.","title":"Fish"},{"location":"command-line-completion/#powershell","text":"Use arduino-cli completion powershell > arduino-cli.ps1 to generate a temporary completion file. At this point you need to add the content of the generated file to your PowerShell profile file. Get-Content -Path arduino-cli.ps1 | Add-Content -Path $profile or add it by hand with your favourite text editor. The previous command added two using namespace lines, move them on top of the $profile file. If not already done, add the line Set-PSReadlineKeyHandler -Key Tab -Function MenuComplete to your $profile file: it is needed to enable the TAB completion in PowerShell. del arduino-cli.ps1 to remove the temporary file. Remember to open a new shell to test the functionality. For more information on tab-completion on PowerShell, please, refer to Autocomplete in PowerShell .","title":"Powershell"},{"location":"command-line-completion/#disabling-command-and-flag-descriptions","text":"By default fish, zsh and bash completion have command and flag description enabled by default. If you want to disable this behaviour you can simply pass the --no-descriptions flag when calling completion command and the generated file will not have descriptions N.B. This flag is not compatible with powershell","title":"Disabling command and flag descriptions"},{"location":"command-line-completion/#brew","text":"If you install the arduino-cli using homebrew package manager the completion should work out of the box if you have followed the official documentation .","title":"Brew"},{"location":"configuration/","text":"Configuration keys \u00b6 board_manager additional_urls - the URLs to any additional Boards Manager package index files needed for your boards platforms. daemon - options related to running Arduino CLI as a gRPC server. port - TCP port used for gRPC client connections. directories - directories used by Arduino CLI. data - directory used to store Boards/Library Manager index files and Boards Manager platform installations. downloads - directory used to stage downloaded archives during Boards/Library Manager installations. user - the equivalent of the Arduino IDE's \"sketchbook\" directory . Library Manager installations are made to the libraries subdirectory of the user directory. builtin.libraries - the libraries in this directory will be available to all platforms without the need for the user to install them, but with the lowest priority over other installed libraries with the same name, it's the equivalent of the Arduino IDE's bundled libraries directory. library - configuration options relating to Arduino libraries. enable_unsafe_install - set to true to enable the use of the --git-url and --zip-file flags with arduino-cli lib install . These are considered \"unsafe\" installation methods because they allow installing files that have not passed through the Library Manager submission process. locale - the language used by Arduino CLI to communicate to the user, the parameter is the language identifier in the standard POSIX format <language>[_<TERRITORY>[.<encoding>]] (for example it or it_IT , or it_IT.UTF-8 ). logging - configuration options for Arduino CLI's logs. file - path to the file where logs will be written. format - output format for the logs. Allowed values are text or json . level - messages with this level and above will be logged. Valid levels are: trace , debug , info , warn , error , fatal , panic . metrics - settings related to the collection of data used for continued improvement of Arduino CLI. addr - TCP port used for metrics communication. enabled - controls the use of metrics. output - settings related to text output. no_color - ANSI color escape codes are added by default to the output. Set to true to disable colored text output. sketch - configuration options relating to Arduino sketches . always_export_binaries - set to true to make arduino-cli compile always save binaries to the sketch folder. This is the equivalent of using the --export-binaries flag. updater - configuration options related to Arduino CLI updates enable_notification - set to false to disable notifications of new Arduino CLI releases, defaults to true build_cache configuration options related to the compilation cache compilations_before_purge - interval, in number of compilations, at which the cache is purged, defaults to 10 . When 0 the cache is never purged. ttl - cache expiration time of build folders. If the cache is hit by a compilation the corresponding build files lifetime is renewed. The value format must be a valid input for time.ParseDuration() , defaults to 720h (30 days). network - configuration options related to the network connection. proxy - URL of the proxy server. Configuration methods \u00b6 Arduino CLI may be configured in three ways: Command line flags Environment variables Configuration file If a configuration option is configured by multiple methods, the value set by the method highest on the above list overwrites the ones below it. If a configuration option is not set, Arduino CLI uses a default value. arduino-cli config dump displays the current configuration values. Command line flags \u00b6 Arduino CLI's command line flags are documented in the command line help and the Arduino CLI command reference . Example \u00b6 Setting an additional Boards Manager URL using the --additional-urls command line flag: $ arduino-cli core update-index --additional-urls https://downloads.arduino.cc/packages/package_staging_index.json Environment variables \u00b6 All configuration options can be set via environment variables. The variable names start with ARDUINO , followed by the configuration key names, with each component separated by _ . For example, the ARDUINO_DIRECTORIES_USER environment variable sets the directories.user configuration option. On Linux or macOS, you can use the export command to set environment variables. On Windows cmd, you can use the set command . ARDUINO_BOARD_MANAGER_ADDITIONAL_URLS environment variables can be a list of space-separated URLs. Example \u00b6 Setting an additional Boards Manager URL using the ARDUINO_BOARD_MANAGER_ADDITIONAL_URLS environment variable: $ export ARDUINO_BOARD_MANAGER_ADDITIONAL_URLS = https://downloads.arduino.cc/packages/package_staging_index.json Setting multiple additional Boards Manager URLs using the ARDUINO_BOARD_MANAGER_ADDITIONAL_URLS environment variable: $ export ARDUINO_BOARD_MANAGER_ADDITIONAL_URLS = \"https://downloads.arduino.cc/packages/package_staging_index.json https://downloads.arduino.cc/packages/package_mbed_index.json\" Configuration file \u00b6 arduino-cli config init creates or updates a configuration file with the current configuration settings. This allows saving the options set by command line flags or environment variables. For example: arduino-cli config init --additional-urls https://downloads.arduino.cc/packages/package_staging_index.json File name \u00b6 The configuration file must be named arduino-cli , with the appropriate file extension for the file's format. Supported formats \u00b6 arduino-cli config init creates a YAML file, however a variety of common formats are supported: JSON TOML YAML Java properties file HCL envfile INI Locations \u00b6 Configuration files in the following locations are recognized by Arduino CLI: Location specified by the --config-file command line flag Location specified by the ARDUINO_CONFIG_FILE environment variable Arduino CLI data directory (as configured by directories.data ) If multiple configuration files are present, the one highest on the above list is used. Configuration files are not combined. The location of the active configuration file can be determined by running the command: arduino-cli config dump --verbose Example \u00b6 Setting an additional Boards Manager URL using a YAML format configuration file: board_manager : additional_urls : - https://downloads.arduino.cc/packages/package_staging_index.json Doing the same using a TOML format file: [board_manager] additional_urls = [ \"https://downloads.arduino.cc/packages/package_staging_index.json\" ] JSON schema \u00b6 The configuration file JSON schema can be used to independently validate the file content. This schema should be considered unstable in this version.","title":"Configuration"},{"location":"configuration/#configuration-keys","text":"board_manager additional_urls - the URLs to any additional Boards Manager package index files needed for your boards platforms. daemon - options related to running Arduino CLI as a gRPC server. port - TCP port used for gRPC client connections. directories - directories used by Arduino CLI. data - directory used to store Boards/Library Manager index files and Boards Manager platform installations. downloads - directory used to stage downloaded archives during Boards/Library Manager installations. user - the equivalent of the Arduino IDE's \"sketchbook\" directory . Library Manager installations are made to the libraries subdirectory of the user directory. builtin.libraries - the libraries in this directory will be available to all platforms without the need for the user to install them, but with the lowest priority over other installed libraries with the same name, it's the equivalent of the Arduino IDE's bundled libraries directory. library - configuration options relating to Arduino libraries. enable_unsafe_install - set to true to enable the use of the --git-url and --zip-file flags with arduino-cli lib install . These are considered \"unsafe\" installation methods because they allow installing files that have not passed through the Library Manager submission process. locale - the language used by Arduino CLI to communicate to the user, the parameter is the language identifier in the standard POSIX format <language>[_<TERRITORY>[.<encoding>]] (for example it or it_IT , or it_IT.UTF-8 ). logging - configuration options for Arduino CLI's logs. file - path to the file where logs will be written. format - output format for the logs. Allowed values are text or json . level - messages with this level and above will be logged. Valid levels are: trace , debug , info , warn , error , fatal , panic . metrics - settings related to the collection of data used for continued improvement of Arduino CLI. addr - TCP port used for metrics communication. enabled - controls the use of metrics. output - settings related to text output. no_color - ANSI color escape codes are added by default to the output. Set to true to disable colored text output. sketch - configuration options relating to Arduino sketches . always_export_binaries - set to true to make arduino-cli compile always save binaries to the sketch folder. This is the equivalent of using the --export-binaries flag. updater - configuration options related to Arduino CLI updates enable_notification - set to false to disable notifications of new Arduino CLI releases, defaults to true build_cache configuration options related to the compilation cache compilations_before_purge - interval, in number of compilations, at which the cache is purged, defaults to 10 . When 0 the cache is never purged. ttl - cache expiration time of build folders. If the cache is hit by a compilation the corresponding build files lifetime is renewed. The value format must be a valid input for time.ParseDuration() , defaults to 720h (30 days). network - configuration options related to the network connection. proxy - URL of the proxy server.","title":"Configuration keys"},{"location":"configuration/#configuration-methods","text":"Arduino CLI may be configured in three ways: Command line flags Environment variables Configuration file If a configuration option is configured by multiple methods, the value set by the method highest on the above list overwrites the ones below it. If a configuration option is not set, Arduino CLI uses a default value. arduino-cli config dump displays the current configuration values.","title":"Configuration methods"},{"location":"configuration/#command-line-flags","text":"Arduino CLI's command line flags are documented in the command line help and the Arduino CLI command reference .","title":"Command line flags"},{"location":"configuration/#example","text":"Setting an additional Boards Manager URL using the --additional-urls command line flag: $ arduino-cli core update-index --additional-urls https://downloads.arduino.cc/packages/package_staging_index.json","title":"Example"},{"location":"configuration/#environment-variables","text":"All configuration options can be set via environment variables. The variable names start with ARDUINO , followed by the configuration key names, with each component separated by _ . For example, the ARDUINO_DIRECTORIES_USER environment variable sets the directories.user configuration option. On Linux or macOS, you can use the export command to set environment variables. On Windows cmd, you can use the set command . ARDUINO_BOARD_MANAGER_ADDITIONAL_URLS environment variables can be a list of space-separated URLs.","title":"Environment variables"},{"location":"configuration/#example_1","text":"Setting an additional Boards Manager URL using the ARDUINO_BOARD_MANAGER_ADDITIONAL_URLS environment variable: $ export ARDUINO_BOARD_MANAGER_ADDITIONAL_URLS = https://downloads.arduino.cc/packages/package_staging_index.json Setting multiple additional Boards Manager URLs using the ARDUINO_BOARD_MANAGER_ADDITIONAL_URLS environment variable: $ export ARDUINO_BOARD_MANAGER_ADDITIONAL_URLS = \"https://downloads.arduino.cc/packages/package_staging_index.json https://downloads.arduino.cc/packages/package_mbed_index.json\"","title":"Example"},{"location":"configuration/#configuration-file","text":"arduino-cli config init creates or updates a configuration file with the current configuration settings. This allows saving the options set by command line flags or environment variables. For example: arduino-cli config init --additional-urls https://downloads.arduino.cc/packages/package_staging_index.json","title":"Configuration file"},{"location":"configuration/#file-name","text":"The configuration file must be named arduino-cli , with the appropriate file extension for the file's format.","title":"File name"},{"location":"configuration/#supported-formats","text":"arduino-cli config init creates a YAML file, however a variety of common formats are supported: JSON TOML YAML Java properties file HCL envfile INI","title":"Supported formats"},{"location":"configuration/#locations","text":"Configuration files in the following locations are recognized by Arduino CLI: Location specified by the --config-file command line flag Location specified by the ARDUINO_CONFIG_FILE environment variable Arduino CLI data directory (as configured by directories.data ) If multiple configuration files are present, the one highest on the above list is used. Configuration files are not combined. The location of the active configuration file can be determined by running the command: arduino-cli config dump --verbose","title":"Locations"},{"location":"configuration/#example_2","text":"Setting an additional Boards Manager URL using a YAML format configuration file: board_manager : additional_urls : - https://downloads.arduino.cc/packages/package_staging_index.json Doing the same using a TOML format file: [board_manager] additional_urls = [ \"https://downloads.arduino.cc/packages/package_staging_index.json\" ]","title":"Example"},{"location":"configuration/#json-schema","text":"The configuration file JSON schema can be used to independently validate the file content. This schema should be considered unstable in this version.","title":"JSON schema"},{"location":"getting-started/","text":"Despite the lack of feature parity at the moment, Arduino CLI provides many of the features you can find in the Arduino IDE. Let's see some examples. Before you start \u00b6 arduino-cli is a container of commands and each command has its own dedicated help text that can be shown with the help command like this: $ arduino-cli help core Arduino core operations. Usage: arduino-cli core [command] Examples: arduino-cli core update-index Available Commands: download Downloads one or more cores and corresponding tool dependencies. install Installs one or more cores and corresponding tool dependencies. list Shows the list of installed platforms. search Search for a core in Boards Manager. uninstall Uninstalls one or more cores and corresponding tool dependencies if no longer used. update-index Updates the index of cores. upgrade Upgrades one or all installed platforms to the latest version. Flags: -h, --help help for core Global Flags: --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. Use \"arduino-cli core [command] --help\" for more information about a command. Create a configuration file \u00b6 Arduino CLI doesn't strictly require a configuration file to work because the command line interface provides any possible functionality. However, having one can spare you a lot of typing when issuing a command, so let's go ahead and create it with: $ arduino-cli config init Config file written: /home/luca/.arduino15/arduino-cli.yaml If you inspect the contents of arduino-cli.yaml , you'll find the available options with their respective default values. For more information, see the configuration documentation . Create a new sketch \u00b6 To create a new sketch named MyFirstSketch in the current directory, run the following command: $ arduino-cli sketch new MyFirstSketch Sketch created in : /home/luca/MyFirstSketch A sketch is a folder containing assets like source files and libraries; the new command creates for you a .ino file called MyFirstSketch.ino containing Arduino boilerplate code: $ cat $HOME /MyFirstSketch/MyFirstSketch.ino void setup () { } void loop () { } At this point you can use your favourite file editor or IDE to open the file $HOME/MyFirstSketch/MyFirstSketch.ino and change the code like this: void setup () { pinMode ( LED_BUILTIN , OUTPUT ); } void loop () { digitalWrite ( LED_BUILTIN , HIGH ); delay ( 1000 ); digitalWrite ( LED_BUILTIN , LOW ); delay ( 1000 ); } Connect the board to your PC \u00b6 The first thing to do upon a fresh install is to update the local cache of available platforms and libraries by running: $ arduino-cli core update-index Updating index: package_index.json downloaded After connecting the board to your PC by using the USB cable, you should be able to check whether it's been recognized by running: $ arduino-cli board list Port Type Board Name FQBN Core /dev/ttyACM1 Serial Port ( USB ) Arduino/Genuino MKR1000 arduino:samd:mkr1000 arduino:samd In this example, the MKR1000 board was recognized and from the output of the command you see the platform core called arduino:samd is the one that needs to be installed to make it work. If you see an Unknown board listed, uploading should still work as long as you identify the platform core and use the correct FQBN string. When a board is not detected for whatever reason, you can list all the supported boards and their FQBN strings by running the following: $ arduino-cli board listall mkr Board Name FQBN Arduino MKR FOX 1200 arduino:samd:mkrfox1200 Arduino MKR GSM 1400 arduino:samd:mkrgsm1400 Arduino MKR WAN 1300 arduino:samd:mkrwan1300 Arduino MKR WiFi 1010 arduino:samd:mkrwifi1010 Arduino MKRZERO arduino:samd:mkrzero Arduino/Genuino MKR1000 arduino:samd:mkr1000 Install the core for your board \u00b6 To install the arduino:samd platform core, run the following: $ arduino-cli core install arduino:samd Downloading tools... arduino:arm-none-eabi-gcc@4.8.3-2014q1 downloaded arduino:bossac@1.7.0 downloaded arduino:openocd@0.9.0-arduino6-static downloaded arduino:CMSIS@4.5.0 downloaded arduino:CMSIS-Atmel@1.1.0 downloaded arduino:arduinoOTA@1.2.0 downloaded Downloading cores... arduino:samd@1.6.19 downloaded Installing tools... Installing platforms... Results: arduino:samd@1.6.19 - Installed arduino:arm-none-eabi-gcc@4.8.3-2014q1 - Installed arduino:bossac@1.7.0 - Installed arduino:openocd@0.9.0-arduino6-static - Installed arduino:CMSIS@4.5.0 - Installed arduino:CMSIS-Atmel@1.1.0 - Installed arduino:arduinoOTA@1.2.0 - Installed Now verify we have installed the core properly by running: $ arduino-cli core list ID Installed Latest Name arduino:samd 1 .6.19 1 .6.19 Arduino SAMD Boards ( 32 -bits ARM Cortex-M0+ ) Great! Now we are ready to compile and upload the sketch. Adding 3rd party cores \u00b6 If your board requires 3rd party core packages to work, you can list the URLs to additional package indexes in the Arduino CLI configuration file. For example, to add the ESP8266 core, edit the configuration file and change the board_manager settings as follows: board_manager : additional_urls : - https://arduino.esp8266.com/stable/package_esp8266com_index.json If you have your package indexes locally installed, you can list their file path in the Arduino CLI configuration file. For example, to add the NRF52832 core, edit the configuration file and change the board_manager settings as follows: board_manager : additional_urls : - https://arduino.esp8266.com/stable/package_esp8266com_index.json - file:///absolute/path/to/your/package_nrf52832_index.json From now on, commands supporting custom cores will automatically use the additional URL from the configuration file: $ arduino-cli core update-index Updating index: package_index.json downloaded Updating index: package_esp8266com_index.json downloaded Updating index: package_nrf52832_index.json Updating index: package_index.json downloaded $ arduino-cli core search esp8266 ID Version Name esp8266:esp8266 2 .5.2 esp8266 Alternatively, you can pass a link to the additional package index file with the --additional-urls option, that has to be specified every time and for every command that operates on a 3rd party platform core, for example: $ arduino-cli core update-index --additional-urls https://arduino.esp8266.com/stable/package_esp8266com_index.json Updating index: package_esp8266com_index.json downloaded $ arduino-cli core search esp8266 --additional-urls https://arduino.esp8266.com/stable/package_esp8266com_index.json ID Version Name esp8266:esp8266 2 .5.2 esp8266 The same applies to the additional package index file provided by file paths: $ arduino-cli core update-index --additional-urls file:///absolute/path/to/your/package_esp8266com_index.json Updating index: package_esp8266com_index.json downloaded $ arduino-cli core search esp8266 --additional-urls file:///absolute/path/to/your/package_esp8266com_index.json ID Version Name esp8266:esp8266 2 .5.2 esp8266 Compile and upload the sketch \u00b6 To compile the sketch you run the compile command, passing the proper FQBN string: $ arduino-cli compile --fqbn arduino:samd:mkr1000 MyFirstSketch Sketch uses 9600 bytes ( 3 % ) of program storage space. Maximum is 262144 bytes. To upload the sketch to your board, run the following command, using the serial port your board is connected to: $ arduino-cli upload -p /dev/ttyACM0 --fqbn arduino:samd:mkr1000 MyFirstSketch No new serial port detected. Atmel SMART device 0x10010005 found Device : ATSAMD21G18A Chip ID : 10010005 Version : v2.0 [ Arduino:XYZ ] Dec 20 2016 15 :36:43 Address : 8192 Pages : 3968 Page Size : 64 bytes Total Size : 248KB Planes : 1 Lock Regions : 16 Locked : none Security : false Boot Flash : true BOD : true BOR : true Arduino : FAST_CHIP_ERASE Arduino : FAST_MULTI_PAGE_WRITE Arduino : CAN_CHECKSUM_MEMORY_BUFFER Erase flash done in 0 .784 seconds Write 9856 bytes to flash ( 154 pages ) [==============================] 100 % ( 154 /154 pages ) done in 0 .069 seconds Verify 9856 bytes of flash with checksum. Verify successful done in 0 .009 seconds CPU reset. Add libraries \u00b6 If you need to add more functionalities to your sketch, chances are some of the libraries available in the Arduino ecosystem already provide what you need. For example, if you need a debouncing strategy to better handle button inputs, you can try searching for the debouncer keyword: $ arduino-cli lib search debouncer Name: \"Debouncer\" Author: hideakitai Maintainer: hideakitai Sentence: Debounce library for Arduino Paragraph: Debounce library for Arduino Website: https://github.com/hideakitai Category: Timing Architecture: * Types: Contributed Versions: [ 0 .1.0 ] Name: \"FTDebouncer\" Author: Ubi de Feo Maintainer: Ubi de Feo, Sebastian Hunkeler Sentence: An efficient, low footprint, fast pin debouncing library for Arduino Paragraph: This pin state supervisor manages debouncing of buttons and handles transitions between LOW and HIGH state, calling a function and notifying your code of which pin has been activated or deactivated. Website: https://github.com/ubidefeo/FTDebouncer Category: Uncategorized Architecture: * Types: Contributed Versions: [ 1 .3.0 ] Name: \"SoftTimer\" Author: Balazs Kelemen <prampec+arduino@gmail.com> Maintainer: Balazs Kelemen <prampec+arduino@gmail.com> Sentence: SoftTimer is a lightweight pseudo multitasking solution for Arduino. Paragraph: SoftTimer enables higher level Arduino programing, yet easy to use, and lightweight. You are often faced with the problem that you need to do multiple tasks at the same time. In SoftTimer, the programmer creates Tasks that runs periodically. This library comes with a collection of handy tools like blinker, pwm, debouncer. Website: https://github.com/prampec/arduino-softtimer Category: Timing Architecture: * Types: Contributed Versions: [ 3 .0.0, 3 .1.0, 3 .1.1, 3 .1.2, 3 .1.3, 3 .1.5, 3 .2.0 ] Our favourite is FTDebouncer , let's install it by running: $ arduino-cli lib install FTDebouncer FTDebouncer depends on FTDebouncer@1.3.0 Downloading FTDebouncer@1.3.0... FTDebouncer@1.3.0 downloaded Installing FTDebouncer@1.3.0... Installed FTDebouncer@1.3.0 Using the daemon mode and the gRPC interface \u00b6 Arduino CLI can be launched as a gRPC server via the daemon command. The client_example folder contains a sample client code that shows how to interact with the gRPC server. Available services and messages are detailed in the gRPC reference pages. To provide observability for the gRPC server activities besides logs, the daemon mode activates and exposes by default a Prometheus endpoint ( http://localhost:9090/metrics ) that can be fetched for metrics data like: # TYPE daemon_compile counter daemon_compile{buildProperties=\"\",exportFile=\"\",fqbn=\"arduino:samd:mkr1000\",installationID=\"ed6f1f22-1fbe-4b1f-84be-84d035b6369c\",jobs=\"0\",libraries=\"\",preprocess=\"false\",quiet=\"false\",showProperties=\"false\",sketchPath=\"5ff767c6fa5a91230f5cb4e267c889aa61489ab2c4f70f35f921f934c1462cb6\",success=\"true\",verbose=\"true\",vidPid=\"\",warnings=\"\"} 1 1580385724726 # TYPE daemon_board_list counter daemon_board_list{installationID=\"ed6f1f22-1fbe-4b1f-84be-84d035b6369c\",success=\"true\"} 1 1580385724833 The metrics settings are exposed via the metrics section in the CLI configuration: metrics : enabled : true addr : :9090","title":"Getting started"},{"location":"getting-started/#before-you-start","text":"arduino-cli is a container of commands and each command has its own dedicated help text that can be shown with the help command like this: $ arduino-cli help core Arduino core operations. Usage: arduino-cli core [command] Examples: arduino-cli core update-index Available Commands: download Downloads one or more cores and corresponding tool dependencies. install Installs one or more cores and corresponding tool dependencies. list Shows the list of installed platforms. search Search for a core in Boards Manager. uninstall Uninstalls one or more cores and corresponding tool dependencies if no longer used. update-index Updates the index of cores. upgrade Upgrades one or all installed platforms to the latest version. Flags: -h, --help help for core Global Flags: --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. Use \"arduino-cli core [command] --help\" for more information about a command.","title":"Before you start"},{"location":"getting-started/#create-a-configuration-file","text":"Arduino CLI doesn't strictly require a configuration file to work because the command line interface provides any possible functionality. However, having one can spare you a lot of typing when issuing a command, so let's go ahead and create it with: $ arduino-cli config init Config file written: /home/luca/.arduino15/arduino-cli.yaml If you inspect the contents of arduino-cli.yaml , you'll find the available options with their respective default values. For more information, see the configuration documentation .","title":"Create a configuration file"},{"location":"getting-started/#create-a-new-sketch","text":"To create a new sketch named MyFirstSketch in the current directory, run the following command: $ arduino-cli sketch new MyFirstSketch Sketch created in : /home/luca/MyFirstSketch A sketch is a folder containing assets like source files and libraries; the new command creates for you a .ino file called MyFirstSketch.ino containing Arduino boilerplate code: $ cat $HOME /MyFirstSketch/MyFirstSketch.ino void setup () { } void loop () { } At this point you can use your favourite file editor or IDE to open the file $HOME/MyFirstSketch/MyFirstSketch.ino and change the code like this: void setup () { pinMode ( LED_BUILTIN , OUTPUT ); } void loop () { digitalWrite ( LED_BUILTIN , HIGH ); delay ( 1000 ); digitalWrite ( LED_BUILTIN , LOW ); delay ( 1000 ); }","title":"Create a new sketch"},{"location":"getting-started/#connect-the-board-to-your-pc","text":"The first thing to do upon a fresh install is to update the local cache of available platforms and libraries by running: $ arduino-cli core update-index Updating index: package_index.json downloaded After connecting the board to your PC by using the USB cable, you should be able to check whether it's been recognized by running: $ arduino-cli board list Port Type Board Name FQBN Core /dev/ttyACM1 Serial Port ( USB ) Arduino/Genuino MKR1000 arduino:samd:mkr1000 arduino:samd In this example, the MKR1000 board was recognized and from the output of the command you see the platform core called arduino:samd is the one that needs to be installed to make it work. If you see an Unknown board listed, uploading should still work as long as you identify the platform core and use the correct FQBN string. When a board is not detected for whatever reason, you can list all the supported boards and their FQBN strings by running the following: $ arduino-cli board listall mkr Board Name FQBN Arduino MKR FOX 1200 arduino:samd:mkrfox1200 Arduino MKR GSM 1400 arduino:samd:mkrgsm1400 Arduino MKR WAN 1300 arduino:samd:mkrwan1300 Arduino MKR WiFi 1010 arduino:samd:mkrwifi1010 Arduino MKRZERO arduino:samd:mkrzero Arduino/Genuino MKR1000 arduino:samd:mkr1000","title":"Connect the board to your PC"},{"location":"getting-started/#install-the-core-for-your-board","text":"To install the arduino:samd platform core, run the following: $ arduino-cli core install arduino:samd Downloading tools... arduino:arm-none-eabi-gcc@4.8.3-2014q1 downloaded arduino:bossac@1.7.0 downloaded arduino:openocd@0.9.0-arduino6-static downloaded arduino:CMSIS@4.5.0 downloaded arduino:CMSIS-Atmel@1.1.0 downloaded arduino:arduinoOTA@1.2.0 downloaded Downloading cores... arduino:samd@1.6.19 downloaded Installing tools... Installing platforms... Results: arduino:samd@1.6.19 - Installed arduino:arm-none-eabi-gcc@4.8.3-2014q1 - Installed arduino:bossac@1.7.0 - Installed arduino:openocd@0.9.0-arduino6-static - Installed arduino:CMSIS@4.5.0 - Installed arduino:CMSIS-Atmel@1.1.0 - Installed arduino:arduinoOTA@1.2.0 - Installed Now verify we have installed the core properly by running: $ arduino-cli core list ID Installed Latest Name arduino:samd 1 .6.19 1 .6.19 Arduino SAMD Boards ( 32 -bits ARM Cortex-M0+ ) Great! Now we are ready to compile and upload the sketch.","title":"Install the core for your board"},{"location":"getting-started/#adding-3rd-party-cores","text":"If your board requires 3rd party core packages to work, you can list the URLs to additional package indexes in the Arduino CLI configuration file. For example, to add the ESP8266 core, edit the configuration file and change the board_manager settings as follows: board_manager : additional_urls : - https://arduino.esp8266.com/stable/package_esp8266com_index.json If you have your package indexes locally installed, you can list their file path in the Arduino CLI configuration file. For example, to add the NRF52832 core, edit the configuration file and change the board_manager settings as follows: board_manager : additional_urls : - https://arduino.esp8266.com/stable/package_esp8266com_index.json - file:///absolute/path/to/your/package_nrf52832_index.json From now on, commands supporting custom cores will automatically use the additional URL from the configuration file: $ arduino-cli core update-index Updating index: package_index.json downloaded Updating index: package_esp8266com_index.json downloaded Updating index: package_nrf52832_index.json Updating index: package_index.json downloaded $ arduino-cli core search esp8266 ID Version Name esp8266:esp8266 2 .5.2 esp8266 Alternatively, you can pass a link to the additional package index file with the --additional-urls option, that has to be specified every time and for every command that operates on a 3rd party platform core, for example: $ arduino-cli core update-index --additional-urls https://arduino.esp8266.com/stable/package_esp8266com_index.json Updating index: package_esp8266com_index.json downloaded $ arduino-cli core search esp8266 --additional-urls https://arduino.esp8266.com/stable/package_esp8266com_index.json ID Version Name esp8266:esp8266 2 .5.2 esp8266 The same applies to the additional package index file provided by file paths: $ arduino-cli core update-index --additional-urls file:///absolute/path/to/your/package_esp8266com_index.json Updating index: package_esp8266com_index.json downloaded $ arduino-cli core search esp8266 --additional-urls file:///absolute/path/to/your/package_esp8266com_index.json ID Version Name esp8266:esp8266 2 .5.2 esp8266","title":"Adding 3rd party cores"},{"location":"getting-started/#compile-and-upload-the-sketch","text":"To compile the sketch you run the compile command, passing the proper FQBN string: $ arduino-cli compile --fqbn arduino:samd:mkr1000 MyFirstSketch Sketch uses 9600 bytes ( 3 % ) of program storage space. Maximum is 262144 bytes. To upload the sketch to your board, run the following command, using the serial port your board is connected to: $ arduino-cli upload -p /dev/ttyACM0 --fqbn arduino:samd:mkr1000 MyFirstSketch No new serial port detected. Atmel SMART device 0x10010005 found Device : ATSAMD21G18A Chip ID : 10010005 Version : v2.0 [ Arduino:XYZ ] Dec 20 2016 15 :36:43 Address : 8192 Pages : 3968 Page Size : 64 bytes Total Size : 248KB Planes : 1 Lock Regions : 16 Locked : none Security : false Boot Flash : true BOD : true BOR : true Arduino : FAST_CHIP_ERASE Arduino : FAST_MULTI_PAGE_WRITE Arduino : CAN_CHECKSUM_MEMORY_BUFFER Erase flash done in 0 .784 seconds Write 9856 bytes to flash ( 154 pages ) [==============================] 100 % ( 154 /154 pages ) done in 0 .069 seconds Verify 9856 bytes of flash with checksum. Verify successful done in 0 .009 seconds CPU reset.","title":"Compile and upload the sketch"},{"location":"getting-started/#add-libraries","text":"If you need to add more functionalities to your sketch, chances are some of the libraries available in the Arduino ecosystem already provide what you need. For example, if you need a debouncing strategy to better handle button inputs, you can try searching for the debouncer keyword: $ arduino-cli lib search debouncer Name: \"Debouncer\" Author: hideakitai Maintainer: hideakitai Sentence: Debounce library for Arduino Paragraph: Debounce library for Arduino Website: https://github.com/hideakitai Category: Timing Architecture: * Types: Contributed Versions: [ 0 .1.0 ] Name: \"FTDebouncer\" Author: Ubi de Feo Maintainer: Ubi de Feo, Sebastian Hunkeler Sentence: An efficient, low footprint, fast pin debouncing library for Arduino Paragraph: This pin state supervisor manages debouncing of buttons and handles transitions between LOW and HIGH state, calling a function and notifying your code of which pin has been activated or deactivated. Website: https://github.com/ubidefeo/FTDebouncer Category: Uncategorized Architecture: * Types: Contributed Versions: [ 1 .3.0 ] Name: \"SoftTimer\" Author: Balazs Kelemen <prampec+arduino@gmail.com> Maintainer: Balazs Kelemen <prampec+arduino@gmail.com> Sentence: SoftTimer is a lightweight pseudo multitasking solution for Arduino. Paragraph: SoftTimer enables higher level Arduino programing, yet easy to use, and lightweight. You are often faced with the problem that you need to do multiple tasks at the same time. In SoftTimer, the programmer creates Tasks that runs periodically. This library comes with a collection of handy tools like blinker, pwm, debouncer. Website: https://github.com/prampec/arduino-softtimer Category: Timing Architecture: * Types: Contributed Versions: [ 3 .0.0, 3 .1.0, 3 .1.1, 3 .1.2, 3 .1.3, 3 .1.5, 3 .2.0 ] Our favourite is FTDebouncer , let's install it by running: $ arduino-cli lib install FTDebouncer FTDebouncer depends on FTDebouncer@1.3.0 Downloading FTDebouncer@1.3.0... FTDebouncer@1.3.0 downloaded Installing FTDebouncer@1.3.0... Installed FTDebouncer@1.3.0","title":"Add libraries"},{"location":"getting-started/#using-the-daemon-mode-and-the-grpc-interface","text":"Arduino CLI can be launched as a gRPC server via the daemon command. The client_example folder contains a sample client code that shows how to interact with the gRPC server. Available services and messages are detailed in the gRPC reference pages. To provide observability for the gRPC server activities besides logs, the daemon mode activates and exposes by default a Prometheus endpoint ( http://localhost:9090/metrics ) that can be fetched for metrics data like: # TYPE daemon_compile counter daemon_compile{buildProperties=\"\",exportFile=\"\",fqbn=\"arduino:samd:mkr1000\",installationID=\"ed6f1f22-1fbe-4b1f-84be-84d035b6369c\",jobs=\"0\",libraries=\"\",preprocess=\"false\",quiet=\"false\",showProperties=\"false\",sketchPath=\"5ff767c6fa5a91230f5cb4e267c889aa61489ab2c4f70f35f921f934c1462cb6\",success=\"true\",verbose=\"true\",vidPid=\"\",warnings=\"\"} 1 1580385724726 # TYPE daemon_board_list counter daemon_board_list{installationID=\"ed6f1f22-1fbe-4b1f-84be-84d035b6369c\",success=\"true\"} 1 1580385724833 The metrics settings are exposed via the metrics section in the CLI configuration: metrics : enabled : true addr : :9090","title":"Using the daemon mode and the gRPC interface"},{"location":"installation/","text":"Several options are available for installation of Arduino CLI. Instructions for each are provided below: Install via Homebrew (macOS/Linux) \u00b6 The Arduino CLI is available as a Homebrew formula since version 0.5.0 : brew update brew install arduino-cli Command line completion \u00b6 Command line completion files are already bundled in the homebrew installation. Use the install script \u00b6 The script requires sh , which is always available on Linux and macOS. sh is not available by default on Windows, though it is available as part of Git for Windows (Git Bash). If you don't have sh available, use the \"Download\" installation option . This script will install the latest version of Arduino CLI to $PWD/bin : curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh If you want to target a different directory, for example ~/local/bin , set the BINDIR environment variable like this: curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | BINDIR=~/local/bin sh If you would like to use the arduino-cli command from any location, install Arduino CLI to a directory already in your PATH or add the Arduino CLI installation path to your PATH environment variable. If you want to download a specific Arduino CLI version, for example 0.9.0 or nightly-latest , pass the version number as a parameter like this: curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh -s 0.9.0 Arduino CLI checks for new releases every 24 hours. If you don't like this behaviour you can disable it by setting the updater.enable_notification config or the env var ARDUINO_UPDATER_ENABLE_NOTIFICATION to false . Download \u00b6 Pre-built binaries for all the supported platforms are available for download from the links below. If you would like to use the arduino-cli command from any location, extract the downloaded file to a directory already in your PATH or add the Arduino CLI installation path to your PATH environment variable. Latest release \u00b6 Platform Linux 32 bit 64 bit Linux ARM 32 bit 64 bit Linux ARMv6 32 bit Windows exe 32 bit 64 bit Windows msi 64 bit macOS 64 bit macOS ARM 64 bit Previous versions \u00b6 These are available from the \"Assets\" sections on the releases page . Nightly builds \u00b6 These builds are generated every day at 01:00 GMT from the master branch and should be considered unstable. In order to get the latest nightly build available for the supported platform, use the following links: Platform Linux 32 bit 64 bit Linux ARM 32 bit 64 bit Linux ARMv6 32 bit Windows exe 32 bit 64 bit Windows msi 64 bit macOS 64 bit macOS ARM 64 bit These links return a 302: Found response, redirecting to latest generated builds by replacing latest with the latest available build date, using the format YYYYMMDD (i.e for 2019-08-06 latest is replaced with 20190806 ) Checksums for the nightly builds are available at https://downloads.arduino.cc/arduino-cli/nightly/nightly-<DATE>-checksums.txt Build from source \u00b6 If you're familiar with Golang or if you want to contribute to the project, you will probably build Arduino CLI locally with your Go toolchain. See the \"How to contribute\" page for instructions.","title":"Installation"},{"location":"installation/#install-via-homebrew-macoslinux","text":"The Arduino CLI is available as a Homebrew formula since version 0.5.0 : brew update brew install arduino-cli","title":"Install via Homebrew (macOS/Linux)"},{"location":"installation/#command-line-completion","text":"Command line completion files are already bundled in the homebrew installation.","title":"Command line completion"},{"location":"installation/#use-the-install-script","text":"The script requires sh , which is always available on Linux and macOS. sh is not available by default on Windows, though it is available as part of Git for Windows (Git Bash). If you don't have sh available, use the \"Download\" installation option . This script will install the latest version of Arduino CLI to $PWD/bin : curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh If you want to target a different directory, for example ~/local/bin , set the BINDIR environment variable like this: curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | BINDIR=~/local/bin sh If you would like to use the arduino-cli command from any location, install Arduino CLI to a directory already in your PATH or add the Arduino CLI installation path to your PATH environment variable. If you want to download a specific Arduino CLI version, for example 0.9.0 or nightly-latest , pass the version number as a parameter like this: curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh -s 0.9.0 Arduino CLI checks for new releases every 24 hours. If you don't like this behaviour you can disable it by setting the updater.enable_notification config or the env var ARDUINO_UPDATER_ENABLE_NOTIFICATION to false .","title":"Use the install script"},{"location":"installation/#download","text":"Pre-built binaries for all the supported platforms are available for download from the links below. If you would like to use the arduino-cli command from any location, extract the downloaded file to a directory already in your PATH or add the Arduino CLI installation path to your PATH environment variable.","title":"Download"},{"location":"installation/#latest-release","text":"Platform Linux 32 bit 64 bit Linux ARM 32 bit 64 bit Linux ARMv6 32 bit Windows exe 32 bit 64 bit Windows msi 64 bit macOS 64 bit macOS ARM 64 bit","title":"Latest release"},{"location":"installation/#previous-versions","text":"These are available from the \"Assets\" sections on the releases page .","title":"Previous versions"},{"location":"installation/#nightly-builds","text":"These builds are generated every day at 01:00 GMT from the master branch and should be considered unstable. In order to get the latest nightly build available for the supported platform, use the following links: Platform Linux 32 bit 64 bit Linux ARM 32 bit 64 bit Linux ARMv6 32 bit Windows exe 32 bit 64 bit Windows msi 64 bit macOS 64 bit macOS ARM 64 bit These links return a 302: Found response, redirecting to latest generated builds by replacing latest with the latest available build date, using the format YYYYMMDD (i.e for 2019-08-06 latest is replaced with 20190806 ) Checksums for the nightly builds are available at https://downloads.arduino.cc/arduino-cli/nightly/nightly-<DATE>-checksums.txt","title":"Nightly builds"},{"location":"installation/#build-from-source","text":"If you're familiar with Golang or if you want to contribute to the project, you will probably build Arduino CLI locally with your Go toolchain. See the \"How to contribute\" page for instructions.","title":"Build from source"},{"location":"integration-options/","text":"The three pillars of the Arduino CLI \u00b6 The Arduino CLI is an open source Command Line Application written in Golang that can be used from a terminal to compile, verify and upload sketches to Arduino boards and that\u2019s capable of managing all the software and tools needed in the process. But don\u2019t get fooled by its name: Arduino CLI can do much more than the average console application, as shown by Arduino IDE 2.x and Arduino Cloud , which rely on it for similar purposes but each one in a completely different way from the other. In this article we introduce the three pillars of the Arduino CLI, explaining how we designed the software so that it can be effectively leveraged under different scenarios. The first pillar: command line interface \u00b6 Console applications for humans \u00b6 As you might expect, the first way to use the Arduino CLI is from a terminal and by a human, and user experience plays a key role here. The UX is under a continuous improvement process as we want the tool to be powerful without being too complicated. We heavily rely on sub-commands to provide a rich set of different operations logically grouped together, so that users can easily explore the interface while getting very specific contextual help. Console applications for robots \u00b6 Humans are not the only type of customers we want to support and the Arduino CLI was also designed to be used programmatically - think about automation pipelines or a CI / CD system. There are some niceties to observe when you write software that\u2019s supposed to be easy to run when unattended and one in particular is the ability to run without a configuration file. This is possible because every configuration option you find in the arduino-cli.yaml configuration file can be provided either through a command line flag or by setting an environment variable. To give an example, the following commands are all equivalent and will fetch the package index used to work with unstable experimental versions of Arduino's cores: See the configuration documentation for details about Arduino CLI's configuration system. Consistent with the previous paragraph, when it comes to providing output the Arduino CLI aims to be user friendly but also slightly verbose, something that doesn\u2019t play well with robots. This is why we added an option to provide output that\u2019s easy to parse. For example, the following figure shows what getting the software version in JSON format looks like. Even if not related to software design, one last feature that\u2019s worth mentioning is the availability of a one-line installation script that can be used to make the latest version of the Arduino CLI available on most systems with an HTTP client like curl or wget and a shell like bash. For more information on Arduino CLI's command line interface, see the command reference . The second pillar: gRPC interface \u00b6 gRPC is a high performance RPC framework that can efficiently connect client and server applications. The Arduino CLI can act as a gRPC server (we call it daemon mode ), exposing a set of procedures that implement the very same set of features of the command line interface and waiting for clients to connect and use them. To give an idea, the following is some Golang code capable of retrieving the version number of a remote running Arduino CLI server instance: gRPC is language agnostic: even if the example is written in Golang, the programming language used for the client can be Python, JavaScript or any of the many supported ones , leading to a variety of possible scenarios. Arduino IDE 2.x is a good example of how to leverage the daemon mode of the Arduino CLI with a clean separation of concerns: the IDE knows nothing about how to download a core, compile a sketch or talk to an Arduino board and it demands all these features of an Arduino CLI instance. Conversely, the Arduino CLI doesn\u2019t even know that the client that\u2019s connected is the Arduino IDE, and neither does it care. For more information on Arduino CLI's gRPC interface, see the gRPC interface reference . The third pillar: embedding \u00b6 Arduino CLI is written in Golang and the code is organized in a way that makes it easy to use it as a library by including the modules you need in another Golang application at compile time. Both the first and second pillars rely on a common Golang API, a set of functions that abstract all the functionalities offered by the Arduino CLI, so that when we provide a fix or a new feature, they are automatically available to both the command line and gRPC interfaces. The source modules implementing this API can be imported in other Golang programs to embed a full-fledged Arduino CLI. For example, this is how some backend services powering Arduino Cloud can compile sketches and manage libraries. Just to give you a taste of what it means to embed the Arduino CLI, here is how to search for a core using the API: Embedding the Arduino CLI is limited to Golang applications and requires a deep knowledge of its internals. For the average use case, the gRPC interface might be a better alternative. Nevertheless, this remains a valid option that we use and provide support for. Conclusions \u00b6 You can start playing with the Arduino CLI right away. The code is open source and the repo contains example code showing how to implement a gRPC client . If you\u2019re curious about how we designed the low level API, have a look at the commands package and don\u2019t hesitate to leave feedback on the issue tracker if you\u2019ve got a use case that doesn\u2019t fit one of the three pillars.","title":"Integration options"},{"location":"integration-options/#the-three-pillars-of-the-arduino-cli","text":"The Arduino CLI is an open source Command Line Application written in Golang that can be used from a terminal to compile, verify and upload sketches to Arduino boards and that\u2019s capable of managing all the software and tools needed in the process. But don\u2019t get fooled by its name: Arduino CLI can do much more than the average console application, as shown by Arduino IDE 2.x and Arduino Cloud , which rely on it for similar purposes but each one in a completely different way from the other. In this article we introduce the three pillars of the Arduino CLI, explaining how we designed the software so that it can be effectively leveraged under different scenarios.","title":"The three pillars of the Arduino CLI"},{"location":"integration-options/#the-first-pillar-command-line-interface","text":"","title":"The first pillar: command line interface"},{"location":"integration-options/#console-applications-for-humans","text":"As you might expect, the first way to use the Arduino CLI is from a terminal and by a human, and user experience plays a key role here. The UX is under a continuous improvement process as we want the tool to be powerful without being too complicated. We heavily rely on sub-commands to provide a rich set of different operations logically grouped together, so that users can easily explore the interface while getting very specific contextual help.","title":"Console applications for humans"},{"location":"integration-options/#console-applications-for-robots","text":"Humans are not the only type of customers we want to support and the Arduino CLI was also designed to be used programmatically - think about automation pipelines or a CI / CD system. There are some niceties to observe when you write software that\u2019s supposed to be easy to run when unattended and one in particular is the ability to run without a configuration file. This is possible because every configuration option you find in the arduino-cli.yaml configuration file can be provided either through a command line flag or by setting an environment variable. To give an example, the following commands are all equivalent and will fetch the package index used to work with unstable experimental versions of Arduino's cores: See the configuration documentation for details about Arduino CLI's configuration system. Consistent with the previous paragraph, when it comes to providing output the Arduino CLI aims to be user friendly but also slightly verbose, something that doesn\u2019t play well with robots. This is why we added an option to provide output that\u2019s easy to parse. For example, the following figure shows what getting the software version in JSON format looks like. Even if not related to software design, one last feature that\u2019s worth mentioning is the availability of a one-line installation script that can be used to make the latest version of the Arduino CLI available on most systems with an HTTP client like curl or wget and a shell like bash. For more information on Arduino CLI's command line interface, see the command reference .","title":"Console applications for robots"},{"location":"integration-options/#the-second-pillar-grpc-interface","text":"gRPC is a high performance RPC framework that can efficiently connect client and server applications. The Arduino CLI can act as a gRPC server (we call it daemon mode ), exposing a set of procedures that implement the very same set of features of the command line interface and waiting for clients to connect and use them. To give an idea, the following is some Golang code capable of retrieving the version number of a remote running Arduino CLI server instance: gRPC is language agnostic: even if the example is written in Golang, the programming language used for the client can be Python, JavaScript or any of the many supported ones , leading to a variety of possible scenarios. Arduino IDE 2.x is a good example of how to leverage the daemon mode of the Arduino CLI with a clean separation of concerns: the IDE knows nothing about how to download a core, compile a sketch or talk to an Arduino board and it demands all these features of an Arduino CLI instance. Conversely, the Arduino CLI doesn\u2019t even know that the client that\u2019s connected is the Arduino IDE, and neither does it care. For more information on Arduino CLI's gRPC interface, see the gRPC interface reference .","title":"The second pillar: gRPC interface"},{"location":"integration-options/#the-third-pillar-embedding","text":"Arduino CLI is written in Golang and the code is organized in a way that makes it easy to use it as a library by including the modules you need in another Golang application at compile time. Both the first and second pillars rely on a common Golang API, a set of functions that abstract all the functionalities offered by the Arduino CLI, so that when we provide a fix or a new feature, they are automatically available to both the command line and gRPC interfaces. The source modules implementing this API can be imported in other Golang programs to embed a full-fledged Arduino CLI. For example, this is how some backend services powering Arduino Cloud can compile sketches and manage libraries. Just to give you a taste of what it means to embed the Arduino CLI, here is how to search for a core using the API: Embedding the Arduino CLI is limited to Golang applications and requires a deep knowledge of its internals. For the average use case, the gRPC interface might be a better alternative. Nevertheless, this remains a valid option that we use and provide support for.","title":"The third pillar: embedding"},{"location":"integration-options/#conclusions","text":"You can start playing with the Arduino CLI right away. The code is open source and the repo contains example code showing how to implement a gRPC client . If you\u2019re curious about how we designed the low level API, have a look at the commands package and don\u2019t hesitate to leave feedback on the issue tracker if you\u2019ve got a use case that doesn\u2019t fit one of the three pillars.","title":"Conclusions"},{"location":"library-specification/","text":"This is the specification for the Arduino library format, to be used with Arduino IDE 1.5.x onwards. rev.1 has been implemented starting with Arduino IDE version 1.5.3 (now superseded by rev.2) rev.2 will be implemented starting from Arduino IDE version 1.5.6 rev.2.1 will be implemented starting from Arduino IDE version 1.6.10 rev.2.2 will be implemented starting from Arduino IDE version 1.8.10 This new library format is intended to be used in tandem with Library Manager , available since Arduino IDE 1.6.2. The Library Manager allows users to automatically download and install libraries needed in their projects, with an easy to use graphical interface in the Arduino IDE / Arduino IDE 2.0 and Arduino Web Editor as well as arduino-cli lib . More information about how Library Manager works is available here . Arduino development software supports multiple microcontroller architectures (e.g. AVR, SAM, etc), meaning that libraries may need to work on multiple architectures. The new 1.5 library format doesn\u2019t contain special support for cross-architecture libraries, but it does provide a preprocessor based mechanism for libraries to target sections of code to specific architectures. See also \u00b6 Arduino library style guide Library dependency resolution process documentation 1.5 library format (rev. 2.2) \u00b6 Library metadata \u00b6 The most significant addition to the format is the ability to add information about the library itself through a properties file called library.properties . This file allows the Library Manager to search and install a library and its dependencies in an easy and automated way. It must be located in the root of the library folder. library.properties file format \u00b6 The library.properties file is a key=value properties list. Every field in this file is UTF-8 encoded. Unless noted otherwise below, all fields are required . The available fields are: name - the name of the library. Library names must contain only basic letters (A-Z or a-z) and numbers (0-9), spaces ( ), underscores (_), dots (.) and dashes (-). They must start with a letter or number. They must contain at least one letter. Note that libraries with a name value starting with Arduino will no longer be allowed addition to the Library Manager index as these names are now reserved for official Arduino libraries. version - version of the library. Version should be semver compliant. 1.2.0 is correct; 1.2 is accepted; r5, 003, 1.1c are invalid author - name/nickname of the authors and their email addresses (not mandatory) separated by comma (,) maintainer - name and email of the maintainer sentence - a sentence explaining the purpose of the library paragraph - a longer description of the library. The value of sentence will be prepended to this, so you should start by writing the second sentence here category - (defaults to Uncategorized ) allowed values: Display Communication Signal Input/Output Sensors Device Control Timing Data Storage Data Processing Other url - the URL of the library project, for a person to visit. For example, the library's GitHub page. This is used for the \"More info\" links in Library Manager architectures - (defaults to * ) a comma separated list of architectures supported by the library. If the library doesn\u2019t contain architecture specific code use * to match all architectures. This field is used as one factor in determining priority when multiple libraries match an #include directive and to provide a warning message when the library is compiled for a board of an architecture that doesn't match any on the list. depends - (available from Arduino IDE 1.8.10/Arduino CLI 0.7.0) (optional) a comma-separated list of dependencies (libraries that are needed to build the current library). The Arduino IDE's Library Manager will offer to install the dependencies during installation of the library. arduino-cli lib install will automatically install the dependencies. Since spaces are allowed in the name of a library, but not commas, you can refer to libraries containing spaces in the name without ambiguity for example: depends=Very long library name, Another library with long-name Version constraints for the dependency may be specified in parentheses after the name: depends=ArduinoHttpClient (>=1.0.0) dot_a_linkage - (available from Arduino IDE 1.6.0 / arduino-builder 1.0.0-beta13) (optional) when set to true , the library will be compiled using a .a (archive) file. First, all source files are compiled into .o files as normal. Then instead of including all .o files in the linker command directly, all .o files are saved into a .a file, which is then included in the linker command. 1.5 format library folder structure is required. includes - (available from Arduino IDE 1.6.10) (optional) a comma separated list of files of the library to be added to the sketch as #include <...> lines. This property is used with the \"Include library\" command in the Arduino IDE. If the includes property is missing, all the header files (.h) on the root source folder are included. precompiled - (available from Arduino IDE 1.8.6/arduino-builder 1.4.0) (optional) enables support for .a (archive) and .so (shared object) files. See the \"Precompiled binaries\" section for documentation of the required location in the library for these files. The static library should be linked as an ldflag. The precompiled field has two supported values, which control how any source files in the library are handled: true - Source files are always compiled. This is useful for \"mixed\" libraries, such as those that contain both open source code and the precompiled binary of a closed source component. Support for \"mixed\" libraries was inadvertently lost in Arduino IDE 1.8.12/arduino-builder 1.5.2/Arduino CLI 0.8.0, and returned in Arduino IDE 1.8.13/arduino-builder 1.5.3/Arduino CLI 0.11.0. full - (available from Arduino IDE 1.8.13/arduino-builder 1.5.3/Arduino CLI 0.11.0) If the library provides a precompiled library for the board being compiled for, the source files will not be compiled. If no precompiled library was provided for the selected board, source files are compiled as a fallback. This is useful for precompiling the library to reduce compilation time for specific target hardware, but also providing support for arbitrary boards by compiling the library on demand. ldflags - (available from Arduino IDE 1.8.6/arduino-builder 1.4.0) (optional) the linker flags to be added. Ex: ldflags=-lm Example: name=WebServer version=1.0.0 author=Cristian Maglie <c.maglie@example.com>, Pippo Pluto <pippo@example.com> maintainer=Cristian Maglie <c.maglie@example.com> sentence=A library that makes coding a Webserver a breeze. paragraph=Supports HTTP1.1 and you can do GET and POST. category=Communication url=http://example.com/ architectures=avr includes=WebServer.h depends=ArduinoHttpClient Version constraints \u00b6 (available from Arduino IDE 2.0.0-beta.3/Arduino CLI 0.7.0) By default, the latest version of a dependency specified in the depends field of library.properties is installed along with the library. Specifying an exact version or range of versions is also supported. The following operators are available: = equal to > greater than >= greater than or equal to < less than <= less than or equal to ! NOT 1 && AND || OR ( , ) constraint group 1 Available from Arduino IDE 2.0.0-rc7/Arduino CLI 0.22.0 Examples \u00b6 If the library \"ArduinoHttpClient\" has the following releases: 0.1.0 1.0.0 2.0.0 2.1.0 The version of it installed as a dependency would be as follows: depends field value Installs version ArduinoHttpClient 2.1.0 ArduinoHttpClient (=1.0.0) 1.0.0 ArduinoHttpClient (>1.0.0) 2.1.0 ArduinoHttpClient (>=1.0.0) 2.1.0 ArduinoHttpClient (<2.0.0) 1.0.0 ArduinoHttpClient (<=2.0.0) 2.0.0 ArduinoHttpClient (!=1.0.0) 2.1.0 ArduinoHttpClient (>1.0.0 && <2.1.0) 2.0.0 ArduinoHttpClient (<1.0.0 || >2.0.0) 2.1.0 ArduinoHttpClient ((>0.1.0 && <2.0.0) || >2.1.0) 1.0.0 Layout of folders and files \u00b6 Each folder has a specific purpose (sources, examples, documentation, etc). Folders not covered in this specification may be added as needed to future revisions. Library Root folder \u00b6 The library root folder name must start with a basic letter (A-Z or a-z) or number (0-9), followed by basic letters, numbers, underscores (_), dots (.) and dashes (-). The maximum length is 63 characters. Source code \u00b6 For libraries intended to be used with Arduino IDE 1.5.x+ only, the source code resides in the src folder. For example: Servo/src/Servo.h Servo/src/Servo.cpp The source code found in src folder and all its subfolders is compiled and linked in the user\u2019s sketch. Only the src folder is added to the include search path (both when compiling the sketch and the library). When the user imports a library into their sketch (from the Arduino IDE's \"Sketch > Include Library\" menu or the Arduino Web Editor's \"Include\" button), the default behavior (configurable via the library.properties includes field ) is for an #include statement to be added for all header (.h) files in the src/ directory (but not its subfolders). As a result, these header files form something of a de facto interface to your library; in general, the only header files in the root src/ folder should be those that you want to expose to the user's sketch and plan to maintain compatibility with in future versions of the library. Place internal header files in a subfolder of the src/ folder. For backward compatibility with Arduino IDE 1.0.x, the library author may opt to place source code into the root folder, instead of the folder called src . In this case the 1.0 library format is applied and the source code is searched from the library root folder and the utility folder, for example: Servo/Servo.h Servo/Servo.cpp Servo/utility/ServoTimers.h Servo/utility/ServoTimers.cpp This will allow existing 1.0 format libraries to compile under Arduino IDE 1.5.x+ as well, and vice-versa. If a library only needs to run on Arduino IDE 1.5.x+, we recommend placing all source code in the src/ folder. If a library requires recursive compilation of nested source folders, its code must be in the src/ folder (since Arduino IDE 1.0.x doesn\u2019t support recursive compilation, backwards compatibility wouldn\u2019t be possible anyway). Library layout \u00b6 Layout root compiled src compiled utility compiled recursive no recursively no flat yes no yes Precompiled binaries \u00b6 The precompiled field of library.properties enables support for the use of precompiled libraries. This requires providing .a (archive) or .so (shared object) files which are compiled for a particular processor architecture. The target architecture of the files is indicated by folder names. The binaries must be located at src/{build.mcu} , where {build.mcu} is the architecture name of the target the file was compiled for. Ex: cortex-m3 for the Arduino Due. The filenames of the compiled binaries should start with lib (e.g., libFoo.a ). (available from Arduino IDE 1.8.12/arduino-builder 1.5.2/Arduino CLI 0.8.0) The floating point ABI configuration of ARM core microcontrollers may be adjusted via compiler flags. An extra subfolder level can be used to provide files compiled for a specific floating point configuration: src/{build.mcu}/{build.fpu}-{build.float-abi} , where {build.fpu} is the value of the -mfpu compiler flag and {build.float-abi} is the value of the -mfloat-abi compiler flag. (available from Arduino IDE 1.8.13/arduino-builder 1.5.3/Arduino CLI 0.11.0) If floating point configuration flags are used but no folder matching that configuration is found, src/{build.mcu} is used as a fallback. Below is an example library src folder structure that provides: Header file containing the declarations for the library API. Source file to use as a fallback for other architectures ( precompiled=full mode). Archive file for the ARM Cortex M0+ architecture of the Arduino SAMD boards. Archive file for the ARM Cortex M4 architecture of the Arduino Nano 33 BLE, as a fallback for backwards compatibility with Arduino development software before the floating point configuration support was added. Archive file for the ARM Cortex M4 architecture of the Arduino Nano 33 BLE, compiled for the -mfloat-abi=softfp -mfpu=fpv4-sp-d16 floating point ABI configuration. Servo/src/Servo.h Servo/src/Servo.cpp Servo/src/cortex-m0plus/libServo.a Servo/src/cortex-m4/libServo.a Servo/src/cortex-m4/fpv4-sp-d16-softfp/libServo.a Library Examples \u00b6 Library examples must be placed in the examples folder. Note that the examples folder name must be written exactly like that (with lower case letters). Servo/examples/... Sketches contained inside the examples folder will be shown in the Examples menu of the Arduino IDE and Arduino Web Editor. More information: Arduino sketch specification Style guide for Arduino examples Extra documentation \u00b6 An extras folder can be used by the developer to put documentation or other items to be bundled with the library. Remember that files placed inside this folder will increase the size of the library, so putting a 20MB PDF in a library that weights a few kilobytes may not be such a good idea. The content of the extras folder is totally ignored by the Arduino development software; you are free to put anything inside. Keywords \u00b6 A list of keywords for the library may be specified in a file named keywords.txt located in the root of the library folder. When a keyword of any installed library is used in a sketch the Arduino IDE colors it. Servo/keywords.txt An example keywords.txt file: # Syntax Coloring Map For ExampleLibrary # Datatypes (KEYWORD1) Test KEYWORD1 # Methods and Functions (KEYWORD2) doSomething KEYWORD2 # Instances (KEYWORD2) # Constants (LITERAL1) This file would cause the Arduino IDE to highlight Test as a data type, and doSomething as a method / function. keywords.txt format \u00b6 keywords.txt is formatted in four fields which are separated by a single true tab (not spaces): KEYWORD KEYWORD_TOKENTYPE REFERENCE_LINK RSYNTAXTEXTAREA_TOKENTYPE It is permitted to leave a field empty. KEYWORD_TOKENTYPE \u00b6 KEYWORD_TOKENTYPE Use for Theme property KEYWORD1 datatypes editor.data_type.style KEYWORD2 functions editor.function.style KEYWORD3 structures editor.function.style LITERAL1 constants editor.reserved_word_2.style LITERAL2 ? editor.function.style REFERENCE_LINK \u00b6 This field specifies the Arduino Language Reference page to open via the Arduino IDE's Right Click > Find in Reference or Help > Find in Reference when the cursor is on that keyword. Generally it does not make sense to define the REFERENCE_LINK field for 3rd party library keywords since they are not likely to be in the Arduino Language Reference. RSYNTAXTEXTAREA_TOKENTYPE \u00b6 In Arduino IDE 1.6.5 and newer this field overrides KEYWORD_TOKENTYPE . In previous IDE versions the RSYNTAXTEXTAREA_TOKENTYPE field is ignored and KEYWORD_TOKENTYPE is used instead. RSYNTAXTEXTAREA_TOKENTYPE Theme property KEYWORD_TOKENTYPE equivalent RESERVED_WORD editor.reserved_word.style KEYWORD3 RESERVED_WORD_2 editor.reserved_word_2.style LITERAL1 DATA_TYPE editor.data_type.style KEYWORD1 PREPROCESSOR editor.preprocessor.style KEYWORD3 LITERAL_BOOLEAN editor.literal_boolean.style LITERAL1 Development flag file \u00b6 Normally the Arduino IDE treats the contents of the library folder as read-only. This is to prevent users from accidentally modifying example sketches. During the library development process you may want to edit example sketches in place using the Arduino IDE. With Arduino IDE 1.6.6 and newer, the read-only behavior can be disabled by adding a file named .development to the root of the library folder. A library.properties file must also be present. The Library Manager indexer will not pick up releases that contain a .development file so be sure not to push this file to your remote repository. A complete example \u00b6 A hypothetical library named \"Servo\" that adheres to the specification follows: Servo/ Servo/library.properties Servo/keywords.txt Servo/src/ Servo/src/Servo.h Servo/src/Servo.cpp Servo/src/ServoTimers.h Servo/examples/ Servo/examples/Sweep/Sweep.ino Servo/examples/Pot/Pot.ino Servo/extras/ Servo/extras/Servo_Connectors.pdf Working with multiple architectures \u00b6 Libraries placed in the libraries subfolder of the sketchbook folder (AKA \"user directory\") will be made available for all boards, which may include multiple different processor architectures. To provide architecture-specific code or optimizations, library authors can use the ARDUINO_ARCH_XXX preprocessor macro ( #define ), where XXX is the name of the architecture (as determined by the name of the architecture folder of the board's platform). For example, ARDUINO_ARCH_AVR will be defined when compiling for AVR-based boards. An example: #if defined(ARDUINO_ARCH_AVR) // AVR-specific code #elif defined(ARDUINO_ARCH_SAM) // SAM-specific code #else // generic, non-platform specific code #endif Alternatively, if a library only works on certain architectures, you can provide an explicit error message (instead of allowing the compilation to fail in a difficult to understand way): #if defined(ARDUINO_ARCH_AVR) // AVR-specific code #elif defined(ARDUINO_ARCH_SAM) // SAM-specific code #else #error \u201cThis library only supports boards with an AVR or SAM processor.\u201d #endif Old library format (pre-1.5) \u00b6 In order to support old libraries (from Arduino IDE 1.0.x), Arduino IDE and Arduino CLI will also compile libraries missing a library.properties metadata file (the header file is still required). As a result, these libraries should behave as they did in Arduino IDE 1.0.x, although they will be available for all boards, including non-AVR ones (which wouldn\u2019t have been present in Arduino IDE 1.0.x).","title":"Library specification"},{"location":"library-specification/#see-also","text":"Arduino library style guide Library dependency resolution process documentation","title":"See also"},{"location":"library-specification/#15-library-format-rev-22","text":"","title":"1.5 library format (rev. 2.2)"},{"location":"library-specification/#library-metadata","text":"The most significant addition to the format is the ability to add information about the library itself through a properties file called library.properties . This file allows the Library Manager to search and install a library and its dependencies in an easy and automated way. It must be located in the root of the library folder.","title":"Library metadata"},{"location":"library-specification/#libraryproperties-file-format","text":"The library.properties file is a key=value properties list. Every field in this file is UTF-8 encoded. Unless noted otherwise below, all fields are required . The available fields are: name - the name of the library. Library names must contain only basic letters (A-Z or a-z) and numbers (0-9), spaces ( ), underscores (_), dots (.) and dashes (-). They must start with a letter or number. They must contain at least one letter. Note that libraries with a name value starting with Arduino will no longer be allowed addition to the Library Manager index as these names are now reserved for official Arduino libraries. version - version of the library. Version should be semver compliant. 1.2.0 is correct; 1.2 is accepted; r5, 003, 1.1c are invalid author - name/nickname of the authors and their email addresses (not mandatory) separated by comma (,) maintainer - name and email of the maintainer sentence - a sentence explaining the purpose of the library paragraph - a longer description of the library. The value of sentence will be prepended to this, so you should start by writing the second sentence here category - (defaults to Uncategorized ) allowed values: Display Communication Signal Input/Output Sensors Device Control Timing Data Storage Data Processing Other url - the URL of the library project, for a person to visit. For example, the library's GitHub page. This is used for the \"More info\" links in Library Manager architectures - (defaults to * ) a comma separated list of architectures supported by the library. If the library doesn\u2019t contain architecture specific code use * to match all architectures. This field is used as one factor in determining priority when multiple libraries match an #include directive and to provide a warning message when the library is compiled for a board of an architecture that doesn't match any on the list. depends - (available from Arduino IDE 1.8.10/Arduino CLI 0.7.0) (optional) a comma-separated list of dependencies (libraries that are needed to build the current library). The Arduino IDE's Library Manager will offer to install the dependencies during installation of the library. arduino-cli lib install will automatically install the dependencies. Since spaces are allowed in the name of a library, but not commas, you can refer to libraries containing spaces in the name without ambiguity for example: depends=Very long library name, Another library with long-name Version constraints for the dependency may be specified in parentheses after the name: depends=ArduinoHttpClient (>=1.0.0) dot_a_linkage - (available from Arduino IDE 1.6.0 / arduino-builder 1.0.0-beta13) (optional) when set to true , the library will be compiled using a .a (archive) file. First, all source files are compiled into .o files as normal. Then instead of including all .o files in the linker command directly, all .o files are saved into a .a file, which is then included in the linker command. 1.5 format library folder structure is required. includes - (available from Arduino IDE 1.6.10) (optional) a comma separated list of files of the library to be added to the sketch as #include <...> lines. This property is used with the \"Include library\" command in the Arduino IDE. If the includes property is missing, all the header files (.h) on the root source folder are included. precompiled - (available from Arduino IDE 1.8.6/arduino-builder 1.4.0) (optional) enables support for .a (archive) and .so (shared object) files. See the \"Precompiled binaries\" section for documentation of the required location in the library for these files. The static library should be linked as an ldflag. The precompiled field has two supported values, which control how any source files in the library are handled: true - Source files are always compiled. This is useful for \"mixed\" libraries, such as those that contain both open source code and the precompiled binary of a closed source component. Support for \"mixed\" libraries was inadvertently lost in Arduino IDE 1.8.12/arduino-builder 1.5.2/Arduino CLI 0.8.0, and returned in Arduino IDE 1.8.13/arduino-builder 1.5.3/Arduino CLI 0.11.0. full - (available from Arduino IDE 1.8.13/arduino-builder 1.5.3/Arduino CLI 0.11.0) If the library provides a precompiled library for the board being compiled for, the source files will not be compiled. If no precompiled library was provided for the selected board, source files are compiled as a fallback. This is useful for precompiling the library to reduce compilation time for specific target hardware, but also providing support for arbitrary boards by compiling the library on demand. ldflags - (available from Arduino IDE 1.8.6/arduino-builder 1.4.0) (optional) the linker flags to be added. Ex: ldflags=-lm Example: name=WebServer version=1.0.0 author=Cristian Maglie <c.maglie@example.com>, Pippo Pluto <pippo@example.com> maintainer=Cristian Maglie <c.maglie@example.com> sentence=A library that makes coding a Webserver a breeze. paragraph=Supports HTTP1.1 and you can do GET and POST. category=Communication url=http://example.com/ architectures=avr includes=WebServer.h depends=ArduinoHttpClient","title":"library.properties file format"},{"location":"library-specification/#version-constraints","text":"(available from Arduino IDE 2.0.0-beta.3/Arduino CLI 0.7.0) By default, the latest version of a dependency specified in the depends field of library.properties is installed along with the library. Specifying an exact version or range of versions is also supported. The following operators are available: = equal to > greater than >= greater than or equal to < less than <= less than or equal to ! NOT 1 && AND || OR ( , ) constraint group 1 Available from Arduino IDE 2.0.0-rc7/Arduino CLI 0.22.0","title":"Version constraints"},{"location":"library-specification/#examples","text":"If the library \"ArduinoHttpClient\" has the following releases: 0.1.0 1.0.0 2.0.0 2.1.0 The version of it installed as a dependency would be as follows: depends field value Installs version ArduinoHttpClient 2.1.0 ArduinoHttpClient (=1.0.0) 1.0.0 ArduinoHttpClient (>1.0.0) 2.1.0 ArduinoHttpClient (>=1.0.0) 2.1.0 ArduinoHttpClient (<2.0.0) 1.0.0 ArduinoHttpClient (<=2.0.0) 2.0.0 ArduinoHttpClient (!=1.0.0) 2.1.0 ArduinoHttpClient (>1.0.0 && <2.1.0) 2.0.0 ArduinoHttpClient (<1.0.0 || >2.0.0) 2.1.0 ArduinoHttpClient ((>0.1.0 && <2.0.0) || >2.1.0) 1.0.0","title":"Examples"},{"location":"library-specification/#layout-of-folders-and-files","text":"Each folder has a specific purpose (sources, examples, documentation, etc). Folders not covered in this specification may be added as needed to future revisions.","title":"Layout of folders and files"},{"location":"library-specification/#library-root-folder","text":"The library root folder name must start with a basic letter (A-Z or a-z) or number (0-9), followed by basic letters, numbers, underscores (_), dots (.) and dashes (-). The maximum length is 63 characters.","title":"Library Root folder"},{"location":"library-specification/#source-code","text":"For libraries intended to be used with Arduino IDE 1.5.x+ only, the source code resides in the src folder. For example: Servo/src/Servo.h Servo/src/Servo.cpp The source code found in src folder and all its subfolders is compiled and linked in the user\u2019s sketch. Only the src folder is added to the include search path (both when compiling the sketch and the library). When the user imports a library into their sketch (from the Arduino IDE's \"Sketch > Include Library\" menu or the Arduino Web Editor's \"Include\" button), the default behavior (configurable via the library.properties includes field ) is for an #include statement to be added for all header (.h) files in the src/ directory (but not its subfolders). As a result, these header files form something of a de facto interface to your library; in general, the only header files in the root src/ folder should be those that you want to expose to the user's sketch and plan to maintain compatibility with in future versions of the library. Place internal header files in a subfolder of the src/ folder. For backward compatibility with Arduino IDE 1.0.x, the library author may opt to place source code into the root folder, instead of the folder called src . In this case the 1.0 library format is applied and the source code is searched from the library root folder and the utility folder, for example: Servo/Servo.h Servo/Servo.cpp Servo/utility/ServoTimers.h Servo/utility/ServoTimers.cpp This will allow existing 1.0 format libraries to compile under Arduino IDE 1.5.x+ as well, and vice-versa. If a library only needs to run on Arduino IDE 1.5.x+, we recommend placing all source code in the src/ folder. If a library requires recursive compilation of nested source folders, its code must be in the src/ folder (since Arduino IDE 1.0.x doesn\u2019t support recursive compilation, backwards compatibility wouldn\u2019t be possible anyway).","title":"Source code"},{"location":"library-specification/#library-layout","text":"Layout root compiled src compiled utility compiled recursive no recursively no flat yes no yes","title":"Library layout"},{"location":"library-specification/#precompiled-binaries","text":"The precompiled field of library.properties enables support for the use of precompiled libraries. This requires providing .a (archive) or .so (shared object) files which are compiled for a particular processor architecture. The target architecture of the files is indicated by folder names. The binaries must be located at src/{build.mcu} , where {build.mcu} is the architecture name of the target the file was compiled for. Ex: cortex-m3 for the Arduino Due. The filenames of the compiled binaries should start with lib (e.g., libFoo.a ). (available from Arduino IDE 1.8.12/arduino-builder 1.5.2/Arduino CLI 0.8.0) The floating point ABI configuration of ARM core microcontrollers may be adjusted via compiler flags. An extra subfolder level can be used to provide files compiled for a specific floating point configuration: src/{build.mcu}/{build.fpu}-{build.float-abi} , where {build.fpu} is the value of the -mfpu compiler flag and {build.float-abi} is the value of the -mfloat-abi compiler flag. (available from Arduino IDE 1.8.13/arduino-builder 1.5.3/Arduino CLI 0.11.0) If floating point configuration flags are used but no folder matching that configuration is found, src/{build.mcu} is used as a fallback. Below is an example library src folder structure that provides: Header file containing the declarations for the library API. Source file to use as a fallback for other architectures ( precompiled=full mode). Archive file for the ARM Cortex M0+ architecture of the Arduino SAMD boards. Archive file for the ARM Cortex M4 architecture of the Arduino Nano 33 BLE, as a fallback for backwards compatibility with Arduino development software before the floating point configuration support was added. Archive file for the ARM Cortex M4 architecture of the Arduino Nano 33 BLE, compiled for the -mfloat-abi=softfp -mfpu=fpv4-sp-d16 floating point ABI configuration. Servo/src/Servo.h Servo/src/Servo.cpp Servo/src/cortex-m0plus/libServo.a Servo/src/cortex-m4/libServo.a Servo/src/cortex-m4/fpv4-sp-d16-softfp/libServo.a","title":"Precompiled binaries"},{"location":"library-specification/#library-examples","text":"Library examples must be placed in the examples folder. Note that the examples folder name must be written exactly like that (with lower case letters). Servo/examples/... Sketches contained inside the examples folder will be shown in the Examples menu of the Arduino IDE and Arduino Web Editor. More information: Arduino sketch specification Style guide for Arduino examples","title":"Library Examples"},{"location":"library-specification/#extra-documentation","text":"An extras folder can be used by the developer to put documentation or other items to be bundled with the library. Remember that files placed inside this folder will increase the size of the library, so putting a 20MB PDF in a library that weights a few kilobytes may not be such a good idea. The content of the extras folder is totally ignored by the Arduino development software; you are free to put anything inside.","title":"Extra documentation"},{"location":"library-specification/#keywords","text":"A list of keywords for the library may be specified in a file named keywords.txt located in the root of the library folder. When a keyword of any installed library is used in a sketch the Arduino IDE colors it. Servo/keywords.txt An example keywords.txt file: # Syntax Coloring Map For ExampleLibrary # Datatypes (KEYWORD1) Test KEYWORD1 # Methods and Functions (KEYWORD2) doSomething KEYWORD2 # Instances (KEYWORD2) # Constants (LITERAL1) This file would cause the Arduino IDE to highlight Test as a data type, and doSomething as a method / function.","title":"Keywords"},{"location":"library-specification/#keywordstxt-format","text":"keywords.txt is formatted in four fields which are separated by a single true tab (not spaces): KEYWORD KEYWORD_TOKENTYPE REFERENCE_LINK RSYNTAXTEXTAREA_TOKENTYPE It is permitted to leave a field empty.","title":"keywords.txt format"},{"location":"library-specification/#keyword_tokentype","text":"KEYWORD_TOKENTYPE Use for Theme property KEYWORD1 datatypes editor.data_type.style KEYWORD2 functions editor.function.style KEYWORD3 structures editor.function.style LITERAL1 constants editor.reserved_word_2.style LITERAL2 ? editor.function.style","title":"KEYWORD_TOKENTYPE"},{"location":"library-specification/#reference_link","text":"This field specifies the Arduino Language Reference page to open via the Arduino IDE's Right Click > Find in Reference or Help > Find in Reference when the cursor is on that keyword. Generally it does not make sense to define the REFERENCE_LINK field for 3rd party library keywords since they are not likely to be in the Arduino Language Reference.","title":"REFERENCE_LINK"},{"location":"library-specification/#rsyntaxtextarea_tokentype","text":"In Arduino IDE 1.6.5 and newer this field overrides KEYWORD_TOKENTYPE . In previous IDE versions the RSYNTAXTEXTAREA_TOKENTYPE field is ignored and KEYWORD_TOKENTYPE is used instead. RSYNTAXTEXTAREA_TOKENTYPE Theme property KEYWORD_TOKENTYPE equivalent RESERVED_WORD editor.reserved_word.style KEYWORD3 RESERVED_WORD_2 editor.reserved_word_2.style LITERAL1 DATA_TYPE editor.data_type.style KEYWORD1 PREPROCESSOR editor.preprocessor.style KEYWORD3 LITERAL_BOOLEAN editor.literal_boolean.style LITERAL1","title":"RSYNTAXTEXTAREA_TOKENTYPE"},{"location":"library-specification/#development-flag-file","text":"Normally the Arduino IDE treats the contents of the library folder as read-only. This is to prevent users from accidentally modifying example sketches. During the library development process you may want to edit example sketches in place using the Arduino IDE. With Arduino IDE 1.6.6 and newer, the read-only behavior can be disabled by adding a file named .development to the root of the library folder. A library.properties file must also be present. The Library Manager indexer will not pick up releases that contain a .development file so be sure not to push this file to your remote repository.","title":"Development flag file"},{"location":"library-specification/#a-complete-example","text":"A hypothetical library named \"Servo\" that adheres to the specification follows: Servo/ Servo/library.properties Servo/keywords.txt Servo/src/ Servo/src/Servo.h Servo/src/Servo.cpp Servo/src/ServoTimers.h Servo/examples/ Servo/examples/Sweep/Sweep.ino Servo/examples/Pot/Pot.ino Servo/extras/ Servo/extras/Servo_Connectors.pdf","title":"A complete example"},{"location":"library-specification/#working-with-multiple-architectures","text":"Libraries placed in the libraries subfolder of the sketchbook folder (AKA \"user directory\") will be made available for all boards, which may include multiple different processor architectures. To provide architecture-specific code or optimizations, library authors can use the ARDUINO_ARCH_XXX preprocessor macro ( #define ), where XXX is the name of the architecture (as determined by the name of the architecture folder of the board's platform). For example, ARDUINO_ARCH_AVR will be defined when compiling for AVR-based boards. An example: #if defined(ARDUINO_ARCH_AVR) // AVR-specific code #elif defined(ARDUINO_ARCH_SAM) // SAM-specific code #else // generic, non-platform specific code #endif Alternatively, if a library only works on certain architectures, you can provide an explicit error message (instead of allowing the compilation to fail in a difficult to understand way): #if defined(ARDUINO_ARCH_AVR) // AVR-specific code #elif defined(ARDUINO_ARCH_SAM) // SAM-specific code #else #error \u201cThis library only supports boards with an AVR or SAM processor.\u201d #endif","title":"Working with multiple architectures"},{"location":"library-specification/#old-library-format-pre-15","text":"In order to support old libraries (from Arduino IDE 1.0.x), Arduino IDE and Arduino CLI will also compile libraries missing a library.properties metadata file (the header file is still required). As a result, these libraries should behave as they did in Arduino IDE 1.0.x, although they will be available for all boards, including non-AVR ones (which wouldn\u2019t have been present in Arduino IDE 1.0.x).","title":"Old library format (pre-1.5)"},{"location":"package_index_json-specification/","text":"Introduced in Arduino IDE 1.6.4, Boards Manager makes it easy to install and update Arduino platforms. In order to provide Boards Manager installation support for a platform, a JSON formatted index file must be published. This is the specification for that file. Boards Manager functionality is provided by Arduino CLI and Arduino IDE . Naming of the JSON index file \u00b6 Many different index files coming from different vendors may be in use, so each vendor should name their own index file in a way that won't conflict with others. The file must be named as follows: package_YOURNAME_PACKAGENAME_index.json The prefix package_ and the postfix _index.json are mandatory (otherwise the index file is not recognised by the Arduino development software) while the choice of YOURNAME_PACKAGENAME is left to the packager. We suggest using a domain name owned by the packager. For example: package_arduino.cc_index.json or package_example.com_avr_boards_index.json The index URL is periodically checked for updates, so expect a constant flow of downloads (proportional to the number of active users). JSON Index file contents \u00b6 The root of the JSON index is an array of packages : { \"packages\" : [ PACKAGE_XXXX ] } 3rd party vendors should use a single PACKAGE_XXXX that is a dictionary map with the vendor's metadata, a list of PLATFORMS and a list of TOOLS . For example: { \"name\" : \"arduino\" , \"maintainer\" : \"Arduino LLC\" , \"websiteURL\" : \"http://www.arduino.cc/\" , \"email\" : \"packages@arduino.cc\" , \"platforms\" : [ PLATFORM_AVR , PLATFORM_ARM , PLATFORM_XXXXX , PLATFORM_YYYYY ], \"tools\" : [ TOOLS_COMPILER_AVR , TOOLS_UPLOADER_AVR , TOOLS_COMPILER_ARM , TOOLS_XXXXXXX , TOOLS_YYYYYYY ] } The metadata fields are: name : the folder used for the installed cores. The vendor folder name of the installed package is determined by this field maintainer : the extended name of the vendor that is displayed on the Arduino IDE Boards Manager GUI websiteURL : the URL to the vendor's website, appears on the Arduino IDE Boards Manager as a \"More info\" link email : the email of the vendor/maintainer Now, before looking at PLATFORMS , let's explore first how TOOLS are made. Tools definitions \u00b6 Each tool describes a binary distribution of a command line tool. A tool can be: a compiler toolchain an uploader a file preprocessor a debugger a program that performs a firmware upgrade a pluggable discovery a pluggable monitor basically anything that can run on the user's host PC and do something useful. For example, Arduino uses two command line tools for the AVR boards: avr-gcc (the compiler) and avrdude (the uploader). Tools are mapped as JSON in this way: { \"name\" : \"avr-gcc\" , \"version\" : \"7.3.0-atmel3.6.1-arduino7\" , \"systems\" : [ { \"size\" : \"34683056\" , \"checksum\" : \"SHA-256:3903553d035da59e33cff9941b857c3cb379cb0638105dfdf69c97f0acc8e7b5\" , \"host\" : \"arm-linux-gnueabihf\" , \"archiveFileName\" : \"avr-gcc-7.3.0-atmel3.6.1-arduino7-arm-linux-gnueabihf.tar.bz2\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-7.3.0-atmel3.6.1-arduino7-arm-linux-gnueabihf.tar.bz2\" }, { \"size\" : \"38045723\" , \"checksum\" : \"SHA-256:03d322b9df6da17289e9e7c6233c34a8535d9c645c19efc772ba19e56914f339\" , \"host\" : \"aarch64-linux-gnu\" , \"archiveFileName\" : \"avr-gcc-7.3.0-atmel3.6.1-arduino7-aarch64-pc-linux-gnu.tar.bz2\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-7.3.0-atmel3.6.1-arduino7-aarch64-pc-linux-gnu.tar.bz2\" }, { \"size\" : \"36684546\" , \"checksum\" : \"SHA-256:f6ed2346953fcf88df223469088633eb86de997fa27ece117fd1ef170d69c1f8\" , \"host\" : \"x86_64-apple-darwin14\" , \"archiveFileName\" : \"avr-gcc-7.3.0-atmel3.6.1-arduino7-x86_64-apple-darwin14.tar.bz2\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-7.3.0-atmel3.6.1-arduino7-x86_64-apple-darwin14.tar.bz2\" }, { \"size\" : \"52519412\" , \"checksum\" : \"SHA-256:a54f64755fff4cb792a1495e5defdd789902a2a3503982e81b898299cf39800e\" , \"host\" : \"i686-mingw32\" , \"archiveFileName\" : \"avr-gcc-7.3.0-atmel3.6.1-arduino7-i686-w64-mingw32.zip\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-7.3.0-atmel3.6.1-arduino7-i686-w64-mingw32.zip\" }, { \"size\" : \"37176991\" , \"checksum\" : \"SHA-256:954bbffb33545bcdcd473af993da2980bf32e8461ff55a18e0eebc7b2ef69a4c\" , \"host\" : \"i686-linux-gnu\" , \"archiveFileName\" : \"avr-gcc-7.3.0-atmel3.6.1-arduino7-i686-pc-linux-gnu.tar.bz2\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-7.3.0-atmel3.6.1-arduino7-i686-pc-linux-gnu.tar.bz2\" }, { \"size\" : \"37630618\" , \"checksum\" : \"SHA-256:bd8c37f6952a2130ac9ee32c53f6a660feb79bee8353c8e289eb60fdcefed91e\" , \"host\" : \"x86_64-linux-gnu\" , \"archiveFileName\" : \"avr-gcc-7.3.0-atmel3.6.1-arduino7-x86_64-pc-linux-gnu.tar.bz2\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-7.3.0-atmel3.6.1-arduino7-x86_64-pc-linux-gnu.tar.bz2\" } ] }, The field name and version are respectively the name and version of the tool. Each tool is uniquely identified by the triple ( packager , name , version ). packager (AKA \"vendor\") is defined by the name value of the tool's package. There can be many different versions of the same tool available at the same time, for example: ( arduino , avr-gcc , 5.4.0-atmel3.6.1-arduino2 ) ( arduino , avr-gcc , 7.3.0-atmel3.6.1-arduino5 ) ( arduino , avr-gcc , 7.3.0-atmel3.6.1-arduino7 ) ( arduino , avrdude , 5.11 ) ( arduino , avrdude , 6.0 ) ( arduino , avrdude , 6.1 ) ..... The systems field lists all available Tools Flavours . The other fields are: url : the download URL of the tool's archive archiveFileName : the name of the file saved to disk after the download (some web servers don't provide the filename through the HTTP request) size : the size of the archive in bytes checksum : the checksum of the archive, used to check if the file has been corrupted. The format is ALGORITHM:CHECKSUM , currently MD5 , SHA-1 , SHA-256 algorithm are supported, we recommend SHA-256 . On *nix or macOS you can use the command shasum -a 256 filename to generate SHA-256 checksums. There are free options for Windows, including md5deep. There are also online utilities for generating checksums. Tools flavours (available builds made for different OS) \u00b6 Each tool version may come in different build flavours for different OS. Each flavour is listed under the systems array. The IDE will take care to install the right flavour for the user's OS by matching the host value with the following table or fail if a needed flavour is missing. OS flavour host regexp value host suggested value Linux 32 i[3456]86-.*linux-gnu i686-linux-gnu Linux 64 x86_64-.*linux-gnu x86_64-linux-gnu Linux Arm arm.*-linux-gnueabihf arm-linux-gnueabihf Linux Arm64 (aarch64\\|arm64)-linux-gnu aarch64-linux-gnu Windows 32 i[3456]86-.*(mingw32\\|cygwin) i686-mingw32 or i686-cygwin Windows 64 (amd64\\|x86_64)-.*(mingw32\\|cygwin) x86_64-migw32 or x86_64-cygwin MacOSX 32 i[3456]86-apple-darwin.* i686-apple-darwin MacOSX 64 x86_64-apple-darwin.* x86_64-apple-darwin MacOSX Arm64 arm64-apple-darwin.* arm64-apple-darwin FreeBSD 32 i?[3456]86-freebsd[0-9]* i686-freebsd FreeBSD 64 amd64-freebsd[0-9]* amd64-freebsd FreeBSD Arm arm.*-freebsd[0-9]* arm-freebsd The host value is matched with the regexp, this means that a more specific value for the host field is allowed (for example you may write x86_64-apple-darwin14.1 for MacOSX instead of the suggested x86_64-apple-darwin ), by the way, we recommend to keep it simple and stick to the suggested value in the table. Some OS allows to run different flavours: The OS... ...may also run builds for Windows 64 Windows 32 MacOSX 64 MacOSX 32 MacOSX Arm64 MacOSX 64 or MacOSX 32 This is taken into account when the tools are downloaded (for example if we are on a Windows 64 machine and the needed tool is available only for the Windows 32 flavour, then the Windows 32 flavour will be downloaded and used). For completeness, the previous example avr-gcc comes with builds for: ARM Linux 32 ( arm-linux-gnueabihf ), ARM Linux 64 ( aarch64-linux-gnu ), MacOSX 64 ( x86_64-apple-darwin14 ), Windows 32 ( i686-mingw32 ), Linux 32 ( i686-linux-gnu ), Linux 64 ( x86_64-linux-gnu ) MacOSX Arm64 will use the MacOSX 64 flavour Windows 64 will use the Windows 32 flavour Note: this information is not used to select the toolchain during compilation. If you want a specific version to be used, you should use the notation {runtime.tools.TOOLNAME-VERSION.path} in the platform.txt. Platforms definitions \u00b6 Finally, let's see how PLATFORMS are made. { \"name\" : \"Arduino AVR Boards\" , \"architecture\" : \"avr\" , \"version\" : \"1.6.6\" , \"category\" : \"Arduino\" , \"help\" : { \"online\" : \"http://www.arduino.cc/en/Reference/HomePage\" }, \"url\" : \"http://downloads.arduino.cc/cores/avr-1.6.6.tar.bz2\" , \"archiveFileName\" : \"avr-1.6.6.tar.bz2\" , \"checksum\" : \"SHA-256:08ad5db4978ebea22344edc5d77dce0923d8a644da7a14dc8072e883c76058d8\" , \"size\" : \"4876916\" , \"boards\" : [ { \"name\" : \"Arduino Y\u00fan\" }, { \"name\" : \"Arduino Uno\" }, { \"name\" : \"Arduino Diecimila\" }, { \"name\" : \"Arduino Nano\" }, { \"name\" : \"Arduino Mega\" }, { \"name\" : \"Arduino MegaADK\" }, { \"name\" : \"Arduino Leonardo\" }, ], \"toolsDependencies\" : [ { \"packager\" : \"arduino\" , \"name\" : \"avr-gcc\" , \"version\" : \"4.8.1-arduino5\" }, { \"packager\" : \"arduino\" , \"name\" : \"avrdude\" , \"version\" : \"6.0.1-arduino5\" } ], \"discoveryDependencies\" : [ { \"packager\" : \"arduino\" , \"name\" : \"serial-discovery\" }, { \"packager\" : \"arduino\" , \"name\" : \"mdns-discovery\" } ], \"monitorDependencies\" : [ { \"packager\" : \"arduino\" , \"name\" : \"serial-monitor\" } ] }, Each PLATFORM describes a core for a specific architecture. The fields needed are: name : the extended name of the platform that is displayed on the Boards Manager GUI architecture : is the architecture of the platform (avr, sam, etc...). It must match the architecture of the core as explained in the Arduino platform specification version : the version of the platform. deprecated : (optional) setting to true causes the platform to be moved to the bottom of all Boards Manager and arduino-cli core listings and marked \"DEPRECATED\". category : this field is reserved, a 3rd party core must set it to Contributed help / online : is a URL that is displayed on the Arduino IDE's Boards Manager as an \"Online Help\" link url , archiveFileName , size and checksum : metadata of the core archive file. The meaning is the same as for the TOOLS boards : the list of boards supported (note: just the names to display on the Arduino IDE's Boards Manager GUI! the real boards definitions are inside boards.txt inside the core archive file) toolsDependencies : the tools needed by this platform. They will be installed by Boards Manager along with the platform. Each tool is referenced by the triple ( packager , name , version ) as previously said. Note that you can reference tools available in other packages as well, even if no platform of that package is installed. discoveryDependencies : the Pluggable Discoveries needed by this platform. These are tools , defined exactly like the ones referenced in toolsDependencies . Unlike toolsDependencies , discoveries are referenced by the pair ( packager , name ). The version is not specified because the latest installed discovery tool will always be used. Like toolsDependencies they will be installed by Boards Manager along with the platform and can reference tools available in other packages as well, even if no platform of that package is installed. monitorDependencies : the Pluggable Monitors needed by this platform. These are tools , defined exactly like the ones referenced in toolsDependencies . Unlike toolsDependencies , monitors are referenced by the pair ( packager , name ). The version is not specified because the latest installed monitor tool will always be used. Like toolsDependencies they will be installed by Boards Manager along with the platform and can reference tools available in other packages as well, even if no platform of that package is installed. The version field is validated by both Arduino IDE and JSemVer . Here are the rules Arduino IDE follows for parsing versions ( source ): Split the version at the - character and continue with the first part. If there are no dots ( . ), parse version as an integer and form a Version from that integer using Version.forIntegers If there is one dot, split version into two, parse each part as an integer, and form a Version from those integers using Version.forIntegers Otherwise, simply parse version into a Version using Version.valueOf Note: if you miss a bracket in the JSON index, then add the URL to your Preferences, and open Boards Manager it can cause the Arduino IDE to no longer load until you have deleted the file from your arduino15 folder. How a tool's path is determined in platform.txt \u00b6 When the IDE needs a tool, it downloads the corresponding archive file and unpacks the content into a private folder that can be referenced from platform.txt using one of the following properties: {runtime.tools.TOOLNAME-VERSION.path} {runtime.tools.TOOLNAME.path} For example, to obtain the avr-gcc 4.8.1 folder we can use {runtime.tools.avr-gcc-4.8.1.path} or {runtime.tools.avr-gcc.path} . In general the same tool may be provided by different packagers (for example the Arduino packager may provide an arduino:avr-gcc and another 3rd party packager may provide their own 3rdparty:avr-gcc ). The rules to disambiguate are as follows: The property {runtime.tools.TOOLNAME.path} points, in order of priority, to: the tool, version and packager specified via toolsDependencies in the package_index.json the highest version of the tool provided by the packager of the current platform the highest version of the tool provided by the packager of the referenced platform used for compile (see \"Referencing another core, variant or tool\" for more info) the highest version of the tool provided by any other packager (in case of tie, the first packager in alphabetical order wins) The property {runtime.tools.TOOLNAME-VERSION.path} points, in order of priority, to: the tool and version provided by the packager of the current platform the tool and version provided by the packager of the referenced platform used for compile (see \"Referencing another core, variant or tool\" for more info) the tool and version provided by any other packager (in case of tie, the first packager in alphabetical order wins) Example JSON index file \u00b6 { \"packages\" : [ { \"name\" : \"myboard\" , \"maintainer\" : \"Jane Developer\" , \"websiteURL\" : \"https://github.com/janedeveloper/myboard\" , \"email\" : \"jane@janedeveloper.org\" , \"help\" : { \"online\" : \"http://janedeveloper.org/forum/myboard\" }, \"platforms\" : [ { \"name\" : \"My Board\" , \"architecture\" : \"avr\" , \"version\" : \"1.0.0\" , \"category\" : \"Contributed\" , \"help\" : { \"online\" : \"http://janedeveloper.org/forum/myboard\" }, \"url\" : \"https://janedeveloper.github.io/myboard/myboard-1.0.0.zip\" , \"archiveFileName\" : \"myboard-1.0.0.zip\" , \"checksum\" : \"SHA-256:ec3ff8a1dc96d3ba6f432b9b837a35fd4174a34b3d2927de1d51010e8b94f9f1\" , \"size\" : \"15005\" , \"boards\" : [{ \"name\" : \"My Board\" }, { \"name\" : \"My Board Pro\" }], \"toolsDependencies\" : [ { \"packager\" : \"arduino\" , \"name\" : \"avr-gcc\" , \"version\" : \"4.8.1-arduino5\" }, { \"packager\" : \"arduino\" , \"name\" : \"avrdude\" , \"version\" : \"6.0.1-arduino5\" } ] }, { \"name\" : \"My Board\" , \"architecture\" : \"avr\" , \"version\" : \"1.0.1\" , \"category\" : \"Contributed\" , \"help\" : { \"online\" : \"http://janedeveloper.org/forum/myboard\" }, \"url\" : \"https://janedeveloper.github.io/myboard/myboard-1.0.1.zip\" , \"archiveFileName\" : \"myboard-1.0.1.zip\" , \"checksum\" : \"SHA-256:9c86ee28a7ce9fe33e8b07ec643316131e0031b0d22e63bb398902a5fdadbca9\" , \"size\" : \"15125\" , \"boards\" : [{ \"name\" : \"My Board\" }, { \"name\" : \"My Board Pro\" }], \"toolsDependencies\" : [ { \"packager\" : \"arduino\" , \"name\" : \"avr-gcc\" , \"version\" : \"4.8.1-arduino5\" }, { \"packager\" : \"arduino\" , \"name\" : \"avrdude\" , \"version\" : \"6.0.1-arduino5\" } ] } ], \"tools\" : [] } ] } In the example there is one PACKAGE , My Board. The package is compatible with the AVR architecture. There are two versions of the PACKAGE , 1.0.0 and 1.0.1. No TOOLS needed to be installed so that section was left empty. Here is the Boards Manager entry created by the example: Archive structure \u00b6 It must contain a single folder in the root. All files and __MACOSX folder present in the root will be ignored. Valid structure . \u2514\u2500\u2500 avr/ \u251c\u2500\u2500 bootloaders \u251c\u2500\u2500 cores \u251c\u2500\u2500 firmwares \u251c\u2500\u2500 libraries \u251c\u2500\u2500 variants \u251c\u2500\u2500 boards.txt \u251c\u2500\u2500 platform.txt \u2514\u2500\u2500 programmers.txt Invalid structure: . \u251c\u2500\u2500 avr/ \u2502 \u251c\u2500\u2500 ... \u2502 \u251c\u2500\u2500 boards.txt \u2502 \u251c\u2500\u2500 platform.txt \u2502 \u2514\u2500\u2500 programmers.txt \u251c\u2500\u2500 folder2 \u2514\u2500\u2500 folder3 Note : the folder structure of the core archive is slightly different from the standard manually installed Arduino IDE 1.5+ compatible hardware folder structure. You must remove the architecture folder(e.g., avr or arm ), moving all the files and folders within the architecture folder up a level. Installation \u00b6 The installation archives contain the Board support files. Supported formats are .zip , .tar.bz2 , and .tar.gz . Starting from Arduino CLI >=0.30.0 support for .tar.xz , and .tar.zst has been added, by the way, if you want to keep compatibility with older versions of Arduino IDE and Arduino CLI we recommend using one of the older formats. The folder structure of the core archive is slightly different from the standard manually installed Arduino IDE 1.5+ compatible hardware folder structure. You must remove the architecture folder(e.g., avr or arm ), moving all the files and folders within the architecture folder up a level. After adding Boards Manager support for your boards, please share the JSON index file URL on the Unofficial list of 3rd party boards support urls .","title":"Package index specification"},{"location":"package_index_json-specification/#naming-of-the-json-index-file","text":"Many different index files coming from different vendors may be in use, so each vendor should name their own index file in a way that won't conflict with others. The file must be named as follows: package_YOURNAME_PACKAGENAME_index.json The prefix package_ and the postfix _index.json are mandatory (otherwise the index file is not recognised by the Arduino development software) while the choice of YOURNAME_PACKAGENAME is left to the packager. We suggest using a domain name owned by the packager. For example: package_arduino.cc_index.json or package_example.com_avr_boards_index.json The index URL is periodically checked for updates, so expect a constant flow of downloads (proportional to the number of active users).","title":"Naming of the JSON index file"},{"location":"package_index_json-specification/#json-index-file-contents","text":"The root of the JSON index is an array of packages : { \"packages\" : [ PACKAGE_XXXX ] } 3rd party vendors should use a single PACKAGE_XXXX that is a dictionary map with the vendor's metadata, a list of PLATFORMS and a list of TOOLS . For example: { \"name\" : \"arduino\" , \"maintainer\" : \"Arduino LLC\" , \"websiteURL\" : \"http://www.arduino.cc/\" , \"email\" : \"packages@arduino.cc\" , \"platforms\" : [ PLATFORM_AVR , PLATFORM_ARM , PLATFORM_XXXXX , PLATFORM_YYYYY ], \"tools\" : [ TOOLS_COMPILER_AVR , TOOLS_UPLOADER_AVR , TOOLS_COMPILER_ARM , TOOLS_XXXXXXX , TOOLS_YYYYYYY ] } The metadata fields are: name : the folder used for the installed cores. The vendor folder name of the installed package is determined by this field maintainer : the extended name of the vendor that is displayed on the Arduino IDE Boards Manager GUI websiteURL : the URL to the vendor's website, appears on the Arduino IDE Boards Manager as a \"More info\" link email : the email of the vendor/maintainer Now, before looking at PLATFORMS , let's explore first how TOOLS are made.","title":"JSON Index file contents"},{"location":"package_index_json-specification/#tools-definitions","text":"Each tool describes a binary distribution of a command line tool. A tool can be: a compiler toolchain an uploader a file preprocessor a debugger a program that performs a firmware upgrade a pluggable discovery a pluggable monitor basically anything that can run on the user's host PC and do something useful. For example, Arduino uses two command line tools for the AVR boards: avr-gcc (the compiler) and avrdude (the uploader). Tools are mapped as JSON in this way: { \"name\" : \"avr-gcc\" , \"version\" : \"7.3.0-atmel3.6.1-arduino7\" , \"systems\" : [ { \"size\" : \"34683056\" , \"checksum\" : \"SHA-256:3903553d035da59e33cff9941b857c3cb379cb0638105dfdf69c97f0acc8e7b5\" , \"host\" : \"arm-linux-gnueabihf\" , \"archiveFileName\" : \"avr-gcc-7.3.0-atmel3.6.1-arduino7-arm-linux-gnueabihf.tar.bz2\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-7.3.0-atmel3.6.1-arduino7-arm-linux-gnueabihf.tar.bz2\" }, { \"size\" : \"38045723\" , \"checksum\" : \"SHA-256:03d322b9df6da17289e9e7c6233c34a8535d9c645c19efc772ba19e56914f339\" , \"host\" : \"aarch64-linux-gnu\" , \"archiveFileName\" : \"avr-gcc-7.3.0-atmel3.6.1-arduino7-aarch64-pc-linux-gnu.tar.bz2\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-7.3.0-atmel3.6.1-arduino7-aarch64-pc-linux-gnu.tar.bz2\" }, { \"size\" : \"36684546\" , \"checksum\" : \"SHA-256:f6ed2346953fcf88df223469088633eb86de997fa27ece117fd1ef170d69c1f8\" , \"host\" : \"x86_64-apple-darwin14\" , \"archiveFileName\" : \"avr-gcc-7.3.0-atmel3.6.1-arduino7-x86_64-apple-darwin14.tar.bz2\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-7.3.0-atmel3.6.1-arduino7-x86_64-apple-darwin14.tar.bz2\" }, { \"size\" : \"52519412\" , \"checksum\" : \"SHA-256:a54f64755fff4cb792a1495e5defdd789902a2a3503982e81b898299cf39800e\" , \"host\" : \"i686-mingw32\" , \"archiveFileName\" : \"avr-gcc-7.3.0-atmel3.6.1-arduino7-i686-w64-mingw32.zip\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-7.3.0-atmel3.6.1-arduino7-i686-w64-mingw32.zip\" }, { \"size\" : \"37176991\" , \"checksum\" : \"SHA-256:954bbffb33545bcdcd473af993da2980bf32e8461ff55a18e0eebc7b2ef69a4c\" , \"host\" : \"i686-linux-gnu\" , \"archiveFileName\" : \"avr-gcc-7.3.0-atmel3.6.1-arduino7-i686-pc-linux-gnu.tar.bz2\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-7.3.0-atmel3.6.1-arduino7-i686-pc-linux-gnu.tar.bz2\" }, { \"size\" : \"37630618\" , \"checksum\" : \"SHA-256:bd8c37f6952a2130ac9ee32c53f6a660feb79bee8353c8e289eb60fdcefed91e\" , \"host\" : \"x86_64-linux-gnu\" , \"archiveFileName\" : \"avr-gcc-7.3.0-atmel3.6.1-arduino7-x86_64-pc-linux-gnu.tar.bz2\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-7.3.0-atmel3.6.1-arduino7-x86_64-pc-linux-gnu.tar.bz2\" } ] }, The field name and version are respectively the name and version of the tool. Each tool is uniquely identified by the triple ( packager , name , version ). packager (AKA \"vendor\") is defined by the name value of the tool's package. There can be many different versions of the same tool available at the same time, for example: ( arduino , avr-gcc , 5.4.0-atmel3.6.1-arduino2 ) ( arduino , avr-gcc , 7.3.0-atmel3.6.1-arduino5 ) ( arduino , avr-gcc , 7.3.0-atmel3.6.1-arduino7 ) ( arduino , avrdude , 5.11 ) ( arduino , avrdude , 6.0 ) ( arduino , avrdude , 6.1 ) ..... The systems field lists all available Tools Flavours . The other fields are: url : the download URL of the tool's archive archiveFileName : the name of the file saved to disk after the download (some web servers don't provide the filename through the HTTP request) size : the size of the archive in bytes checksum : the checksum of the archive, used to check if the file has been corrupted. The format is ALGORITHM:CHECKSUM , currently MD5 , SHA-1 , SHA-256 algorithm are supported, we recommend SHA-256 . On *nix or macOS you can use the command shasum -a 256 filename to generate SHA-256 checksums. There are free options for Windows, including md5deep. There are also online utilities for generating checksums.","title":"Tools definitions"},{"location":"package_index_json-specification/#tools-flavours-available-builds-made-for-different-os","text":"Each tool version may come in different build flavours for different OS. Each flavour is listed under the systems array. The IDE will take care to install the right flavour for the user's OS by matching the host value with the following table or fail if a needed flavour is missing. OS flavour host regexp value host suggested value Linux 32 i[3456]86-.*linux-gnu i686-linux-gnu Linux 64 x86_64-.*linux-gnu x86_64-linux-gnu Linux Arm arm.*-linux-gnueabihf arm-linux-gnueabihf Linux Arm64 (aarch64\\|arm64)-linux-gnu aarch64-linux-gnu Windows 32 i[3456]86-.*(mingw32\\|cygwin) i686-mingw32 or i686-cygwin Windows 64 (amd64\\|x86_64)-.*(mingw32\\|cygwin) x86_64-migw32 or x86_64-cygwin MacOSX 32 i[3456]86-apple-darwin.* i686-apple-darwin MacOSX 64 x86_64-apple-darwin.* x86_64-apple-darwin MacOSX Arm64 arm64-apple-darwin.* arm64-apple-darwin FreeBSD 32 i?[3456]86-freebsd[0-9]* i686-freebsd FreeBSD 64 amd64-freebsd[0-9]* amd64-freebsd FreeBSD Arm arm.*-freebsd[0-9]* arm-freebsd The host value is matched with the regexp, this means that a more specific value for the host field is allowed (for example you may write x86_64-apple-darwin14.1 for MacOSX instead of the suggested x86_64-apple-darwin ), by the way, we recommend to keep it simple and stick to the suggested value in the table. Some OS allows to run different flavours: The OS... ...may also run builds for Windows 64 Windows 32 MacOSX 64 MacOSX 32 MacOSX Arm64 MacOSX 64 or MacOSX 32 This is taken into account when the tools are downloaded (for example if we are on a Windows 64 machine and the needed tool is available only for the Windows 32 flavour, then the Windows 32 flavour will be downloaded and used). For completeness, the previous example avr-gcc comes with builds for: ARM Linux 32 ( arm-linux-gnueabihf ), ARM Linux 64 ( aarch64-linux-gnu ), MacOSX 64 ( x86_64-apple-darwin14 ), Windows 32 ( i686-mingw32 ), Linux 32 ( i686-linux-gnu ), Linux 64 ( x86_64-linux-gnu ) MacOSX Arm64 will use the MacOSX 64 flavour Windows 64 will use the Windows 32 flavour Note: this information is not used to select the toolchain during compilation. If you want a specific version to be used, you should use the notation {runtime.tools.TOOLNAME-VERSION.path} in the platform.txt.","title":"Tools flavours (available builds made for different OS)"},{"location":"package_index_json-specification/#platforms-definitions","text":"Finally, let's see how PLATFORMS are made. { \"name\" : \"Arduino AVR Boards\" , \"architecture\" : \"avr\" , \"version\" : \"1.6.6\" , \"category\" : \"Arduino\" , \"help\" : { \"online\" : \"http://www.arduino.cc/en/Reference/HomePage\" }, \"url\" : \"http://downloads.arduino.cc/cores/avr-1.6.6.tar.bz2\" , \"archiveFileName\" : \"avr-1.6.6.tar.bz2\" , \"checksum\" : \"SHA-256:08ad5db4978ebea22344edc5d77dce0923d8a644da7a14dc8072e883c76058d8\" , \"size\" : \"4876916\" , \"boards\" : [ { \"name\" : \"Arduino Y\u00fan\" }, { \"name\" : \"Arduino Uno\" }, { \"name\" : \"Arduino Diecimila\" }, { \"name\" : \"Arduino Nano\" }, { \"name\" : \"Arduino Mega\" }, { \"name\" : \"Arduino MegaADK\" }, { \"name\" : \"Arduino Leonardo\" }, ], \"toolsDependencies\" : [ { \"packager\" : \"arduino\" , \"name\" : \"avr-gcc\" , \"version\" : \"4.8.1-arduino5\" }, { \"packager\" : \"arduino\" , \"name\" : \"avrdude\" , \"version\" : \"6.0.1-arduino5\" } ], \"discoveryDependencies\" : [ { \"packager\" : \"arduino\" , \"name\" : \"serial-discovery\" }, { \"packager\" : \"arduino\" , \"name\" : \"mdns-discovery\" } ], \"monitorDependencies\" : [ { \"packager\" : \"arduino\" , \"name\" : \"serial-monitor\" } ] }, Each PLATFORM describes a core for a specific architecture. The fields needed are: name : the extended name of the platform that is displayed on the Boards Manager GUI architecture : is the architecture of the platform (avr, sam, etc...). It must match the architecture of the core as explained in the Arduino platform specification version : the version of the platform. deprecated : (optional) setting to true causes the platform to be moved to the bottom of all Boards Manager and arduino-cli core listings and marked \"DEPRECATED\". category : this field is reserved, a 3rd party core must set it to Contributed help / online : is a URL that is displayed on the Arduino IDE's Boards Manager as an \"Online Help\" link url , archiveFileName , size and checksum : metadata of the core archive file. The meaning is the same as for the TOOLS boards : the list of boards supported (note: just the names to display on the Arduino IDE's Boards Manager GUI! the real boards definitions are inside boards.txt inside the core archive file) toolsDependencies : the tools needed by this platform. They will be installed by Boards Manager along with the platform. Each tool is referenced by the triple ( packager , name , version ) as previously said. Note that you can reference tools available in other packages as well, even if no platform of that package is installed. discoveryDependencies : the Pluggable Discoveries needed by this platform. These are tools , defined exactly like the ones referenced in toolsDependencies . Unlike toolsDependencies , discoveries are referenced by the pair ( packager , name ). The version is not specified because the latest installed discovery tool will always be used. Like toolsDependencies they will be installed by Boards Manager along with the platform and can reference tools available in other packages as well, even if no platform of that package is installed. monitorDependencies : the Pluggable Monitors needed by this platform. These are tools , defined exactly like the ones referenced in toolsDependencies . Unlike toolsDependencies , monitors are referenced by the pair ( packager , name ). The version is not specified because the latest installed monitor tool will always be used. Like toolsDependencies they will be installed by Boards Manager along with the platform and can reference tools available in other packages as well, even if no platform of that package is installed. The version field is validated by both Arduino IDE and JSemVer . Here are the rules Arduino IDE follows for parsing versions ( source ): Split the version at the - character and continue with the first part. If there are no dots ( . ), parse version as an integer and form a Version from that integer using Version.forIntegers If there is one dot, split version into two, parse each part as an integer, and form a Version from those integers using Version.forIntegers Otherwise, simply parse version into a Version using Version.valueOf Note: if you miss a bracket in the JSON index, then add the URL to your Preferences, and open Boards Manager it can cause the Arduino IDE to no longer load until you have deleted the file from your arduino15 folder.","title":"Platforms definitions"},{"location":"package_index_json-specification/#how-a-tools-path-is-determined-in-platformtxt","text":"When the IDE needs a tool, it downloads the corresponding archive file and unpacks the content into a private folder that can be referenced from platform.txt using one of the following properties: {runtime.tools.TOOLNAME-VERSION.path} {runtime.tools.TOOLNAME.path} For example, to obtain the avr-gcc 4.8.1 folder we can use {runtime.tools.avr-gcc-4.8.1.path} or {runtime.tools.avr-gcc.path} . In general the same tool may be provided by different packagers (for example the Arduino packager may provide an arduino:avr-gcc and another 3rd party packager may provide their own 3rdparty:avr-gcc ). The rules to disambiguate are as follows: The property {runtime.tools.TOOLNAME.path} points, in order of priority, to: the tool, version and packager specified via toolsDependencies in the package_index.json the highest version of the tool provided by the packager of the current platform the highest version of the tool provided by the packager of the referenced platform used for compile (see \"Referencing another core, variant or tool\" for more info) the highest version of the tool provided by any other packager (in case of tie, the first packager in alphabetical order wins) The property {runtime.tools.TOOLNAME-VERSION.path} points, in order of priority, to: the tool and version provided by the packager of the current platform the tool and version provided by the packager of the referenced platform used for compile (see \"Referencing another core, variant or tool\" for more info) the tool and version provided by any other packager (in case of tie, the first packager in alphabetical order wins)","title":"How a tool's path is determined in platform.txt"},{"location":"package_index_json-specification/#example-json-index-file","text":"{ \"packages\" : [ { \"name\" : \"myboard\" , \"maintainer\" : \"Jane Developer\" , \"websiteURL\" : \"https://github.com/janedeveloper/myboard\" , \"email\" : \"jane@janedeveloper.org\" , \"help\" : { \"online\" : \"http://janedeveloper.org/forum/myboard\" }, \"platforms\" : [ { \"name\" : \"My Board\" , \"architecture\" : \"avr\" , \"version\" : \"1.0.0\" , \"category\" : \"Contributed\" , \"help\" : { \"online\" : \"http://janedeveloper.org/forum/myboard\" }, \"url\" : \"https://janedeveloper.github.io/myboard/myboard-1.0.0.zip\" , \"archiveFileName\" : \"myboard-1.0.0.zip\" , \"checksum\" : \"SHA-256:ec3ff8a1dc96d3ba6f432b9b837a35fd4174a34b3d2927de1d51010e8b94f9f1\" , \"size\" : \"15005\" , \"boards\" : [{ \"name\" : \"My Board\" }, { \"name\" : \"My Board Pro\" }], \"toolsDependencies\" : [ { \"packager\" : \"arduino\" , \"name\" : \"avr-gcc\" , \"version\" : \"4.8.1-arduino5\" }, { \"packager\" : \"arduino\" , \"name\" : \"avrdude\" , \"version\" : \"6.0.1-arduino5\" } ] }, { \"name\" : \"My Board\" , \"architecture\" : \"avr\" , \"version\" : \"1.0.1\" , \"category\" : \"Contributed\" , \"help\" : { \"online\" : \"http://janedeveloper.org/forum/myboard\" }, \"url\" : \"https://janedeveloper.github.io/myboard/myboard-1.0.1.zip\" , \"archiveFileName\" : \"myboard-1.0.1.zip\" , \"checksum\" : \"SHA-256:9c86ee28a7ce9fe33e8b07ec643316131e0031b0d22e63bb398902a5fdadbca9\" , \"size\" : \"15125\" , \"boards\" : [{ \"name\" : \"My Board\" }, { \"name\" : \"My Board Pro\" }], \"toolsDependencies\" : [ { \"packager\" : \"arduino\" , \"name\" : \"avr-gcc\" , \"version\" : \"4.8.1-arduino5\" }, { \"packager\" : \"arduino\" , \"name\" : \"avrdude\" , \"version\" : \"6.0.1-arduino5\" } ] } ], \"tools\" : [] } ] } In the example there is one PACKAGE , My Board. The package is compatible with the AVR architecture. There are two versions of the PACKAGE , 1.0.0 and 1.0.1. No TOOLS needed to be installed so that section was left empty. Here is the Boards Manager entry created by the example:","title":"Example JSON index file"},{"location":"package_index_json-specification/#archive-structure","text":"It must contain a single folder in the root. All files and __MACOSX folder present in the root will be ignored. Valid structure . \u2514\u2500\u2500 avr/ \u251c\u2500\u2500 bootloaders \u251c\u2500\u2500 cores \u251c\u2500\u2500 firmwares \u251c\u2500\u2500 libraries \u251c\u2500\u2500 variants \u251c\u2500\u2500 boards.txt \u251c\u2500\u2500 platform.txt \u2514\u2500\u2500 programmers.txt Invalid structure: . \u251c\u2500\u2500 avr/ \u2502 \u251c\u2500\u2500 ... \u2502 \u251c\u2500\u2500 boards.txt \u2502 \u251c\u2500\u2500 platform.txt \u2502 \u2514\u2500\u2500 programmers.txt \u251c\u2500\u2500 folder2 \u2514\u2500\u2500 folder3 Note : the folder structure of the core archive is slightly different from the standard manually installed Arduino IDE 1.5+ compatible hardware folder structure. You must remove the architecture folder(e.g., avr or arm ), moving all the files and folders within the architecture folder up a level.","title":"Archive structure"},{"location":"package_index_json-specification/#installation","text":"The installation archives contain the Board support files. Supported formats are .zip , .tar.bz2 , and .tar.gz . Starting from Arduino CLI >=0.30.0 support for .tar.xz , and .tar.zst has been added, by the way, if you want to keep compatibility with older versions of Arduino IDE and Arduino CLI we recommend using one of the older formats. The folder structure of the core archive is slightly different from the standard manually installed Arduino IDE 1.5+ compatible hardware folder structure. You must remove the architecture folder(e.g., avr or arm ), moving all the files and folders within the architecture folder up a level. After adding Boards Manager support for your boards, please share the JSON index file URL on the Unofficial list of 3rd party boards support urls .","title":"Installation"},{"location":"platform-specification/","text":"This is the Arduino platform specification, for use with Arduino development software starting from the Arduino IDE 1.5.x series. Platforms add support for new boards to the Arduino development software. They are installable either via Boards Manager or manual installation to the hardware folder of Arduino's sketchbook folder (AKA \"user directory\"). A platform may consist of as little as a single configuration file. Hardware Folders structure \u00b6 The new hardware folders have a hierarchical structure organized in two levels: the first level is the vendor/maintainer the second level is the supported architecture A vendor/maintainer can have multiple supported architectures. For example, below we have three hardware vendors called \"arduino\", \"yyyyy\" and \"xxxxx\": hardware/arduino/avr/... - Arduino - AVR Boards hardware/arduino/sam/... - Arduino - SAM (32bit ARM) Boards hardware/yyyyy/avr/... - Yyy - AVR hardware/xxxxx/avr/... - Xxx - AVR The vendor \"arduino\" has two supported architectures (AVR and SAM), while \"xxxxx\" and \"yyyyy\" have only AVR. Architecture values are case sensitive (e.g. AVR != avr ). If possible, follow existing architecture name conventions when creating hardware packages. Use the vendor folder name to differentiate your package. The architecture folder name is used to determine library compatibility and to permit referencing resources from another core of the same architecture, so use of a non-standard architecture name can have a harmful effect. Architecture configurations \u00b6 Each architecture must be configured through a set of configuration files: platform.txt contains definitions for the CPU architecture used (compiler, build process parameters, tools used for upload, etc.) boards.txt contains definitions for the boards (board name, parameters for building and uploading sketches, etc.) programmers.txt contains definitions for external programmers (typically used to burn bootloaders or sketches on a blank CPU/board) Configuration files format \u00b6 A configuration file is a list of \"key=value\" properties. The value of a property can be expressed using the value of another property by putting its name inside brackets \"{\" \"}\". For example: compiler.path=/tools/g++_arm_none_eabi/bin/ compiler.c.cmd=arm-none-eabi-gcc [....] recipe.c.o.pattern={compiler.path}{compiler.c.cmd} In this example the property recipe.c.o.pattern will be set to /tools/g++_arm_none_eabi/bin/arm-none-eabi-gcc , which is the composition of the properties compiler.path and compiler.c.cmd . Comments \u00b6 Lines starting with # are treated as comments and will be ignored. # Like in this example # -------------------- # I'm a comment! Automatic property override for specific OS \u00b6 We can specify an OS-specific value for a property. For example the following file: tools.bossac.cmd=bossac tools.bossac.cmd.windows=bossac.exe will set the property tools.bossac.cmd to the value bossac on Linux and macOS and bossac.exe on Windows. Supported suffixes are .linux , .windows and .macosx . Global Predefined properties \u00b6 The following automatically generated properties can be used globally in all configuration files: {runtime.platform.path} : the absolute path of the board platform folder (i.e. the folder containing boards.txt) {runtime.hardware.path} : the absolute path of the hardware folder (i.e. the folder containing the board platform folder) {runtime.ide.path} : the absolute path of the Arduino IDE or Arduino CLI folder {runtime.ide.version} : the version number of the Arduino IDE as a number (this uses two digits per version number component, and removes the points and leading zeroes, so Arduino IDE 1.8.3 becomes 01.08.03 which becomes runtime.ide.version=10803 ). When using Arduino development software other than the Arduino IDE, this is set to a meaningless version number. {ide_version} : Compatibility alias for {runtime.ide.version} {runtime.os} : the running OS (\"linux\", \"windows\", \"macosx\") {software} : set to \"ARDUINO\" {name} : platform vendor name {_id} : board ID of the board being compiled for {build.fqbn} : the FQBN (fully qualified board name) of the board being compiled for. The FQBN follows the format: VENDOR:ARCHITECTURE:BOARD_ID[:MENU_ID=OPTION_ID[,MENU2_ID=OPTION_ID ...]] {build.source.path} : Path to the sketch being compiled. If the sketch is in an unsaved state, it will the path of its temporary folder. {build.library_discovery_phase} : set to 1 during library discovery and to 0 during normal build. A macro defined with this property can be used to disable the inclusion of heavyweight headers during discovery to reduce compilation time. This property was added in Arduino IDE 1.8.14/Arduino Builder 1.6.0/Arduino CLI 0.12.0. Note: with the same intent, -DARDUINO_LIB_DISCOVERY_PHASE was added to recipe.preproc.macros during library discovery in Arduino Builder 1.5.3/Arduino CLI 0.10.0. That flag was replaced by the more flexible {build.library_discovery_phase} property. {compiler.optimization_flags} : see \"Sketch debugging configuration\" for details {extra.time.utc} : Unix time (seconds since 1970-01-01T00:00:00Z) according to the machine the build is running on {extra.time.local} : Unix time with local timezone and DST offset {extra.time.zone} : local timezone offset without the DST component {extra.time.dst} : local daylight savings time offset Compatibility note: Versions before Arduino IDE 1.6.0 only used one digit per version number component in {runtime.ide.version} (so 1.5.9 was 159 , not 10509 ). platform.txt \u00b6 The platform.txt file contains information about a platform's specific aspects (compilers command line flags, paths, system libraries, etc.). The following meta-data must be defined: name=Arduino AVR Boards version=1.5.3 The name will be shown as the Arduino IDE's Board menu section title or the Name field of arduino-cli core list 's output for the platform. The version is currently unused, it is reserved for future use (probably together with the Boards Manager to handle dependencies on cores). Build process \u00b6 The platform.txt file is used to configure the build process . This is done through a list of recipes . Each recipe is a command line expression that explains how to call the compiler (or other tools) for every build step and which parameter should be passed. The Arduino development software, before starting the build, determines the list of files to compile. The list is composed of: the user's Sketch source code in the selected board's Core source code in the Libraries used in the sketch A temporary folder is created to store the build artifacts whose path is available through the global property {build.path} . A property {build.project_name} with the name of the project and a property {build.arch} with the name of the architecture is set as well. {build.path} : The path to the temporary folder to store build artifacts {build.project_name} : The project name {build.arch} : The MCU architecture (avr, sam, etc...) There are some other {build.xxx} properties available, that are explained in the boards.txt section of this guide. Security credential properties \u00b6 Some of them allow specifying trusted security credentials (signing and encryption keys) that can be used by a \"secure boot\" system : build.keys.keychain : for the directory containing the keys build.keys.sign_key : for the signing key build.keys.encrypt_key : for the encryption key If any of these properties are defined, the others are required. These properties can be overwritten respectively with --keys-keychain , --sign-key , --encrypt-key compile flags in the Arduino CLI. Recipes to compile source code \u00b6 We said that the Arduino development software determines a list of files to compile. Each file can be source code written in C (.c files), C++ (.cpp/.cxx/.cc files) or Assembly (.S files). Every language is compiled using its respective recipe : recipe.c.o.pattern : for C files (.c) recipe.cpp.o.pattern : for CPP files (.cpp/.cxx/.cc) recipe.S.o.pattern : for Assembly files (.S) (an optional recipe.cxx.o.pattern and recipe.cc.o.pattern may be provided, if .cxx or .cc needs special handling, but it's not required and we do not recommend it) The recipes can be built concatenating the following automatically generated properties (for each file compiled): {includes} : the list of include paths in the format \"-I/include/path -I/another/path....\" {source_file} : the path to the source file {object_file} : the path to the output file For example the following is used for AVR: ## Compiler global definitions compiler.path={runtime.ide.path}/tools/avr/bin/ compiler.c.cmd=avr-gcc compiler.c.flags=-c -g -Os -w -ffunction-sections -fdata-sections -MMD [......] ## Compile c files recipe.c.o.pattern=\"{compiler.path}{compiler.c.cmd}\" {compiler.c.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {build.extra_flags} {includes} \"{source_file}\" -o \"{object_file}\" Note that some properties, like {build.mcu} for example, are taken from the boards.txt file which is documented later in this specification. Recipes to build the core.a archive file \u00b6 The core of the selected board is compiled as described in the previous paragraph, but the object files obtained from the compile are also archived into a static library named core.a using the recipe.ar.pattern . The recipe can be built concatenating the following automatically generated properties: {object_file} : the object file to include in the archive {archive_file_path} : fully qualified archive file (ex. \"/path/to/core.a\"). This property was added in Arduino IDE 1.6.6/arduino builder 1.0.0-beta12 as a replacement for {build.path}/{archive_file} . {archive_file} : the name of the resulting archive (ex. \"core.a\") For example, Arduino provides the following for AVR: compiler.ar.cmd=avr-ar compiler.ar.flags=rcs [......] ## Create archives recipe.ar.pattern=\"{compiler.path}{compiler.ar.cmd}\" {compiler.ar.flags} \"{archive_file_path}\" \"{object_file}\" Recipes for linking \u00b6 All the artifacts produced by the previous steps (sketch object files, libraries object files and core.a archive) are linked together using the recipe.c.combine.pattern . The recipe can be built concatenating the following automatically generated properties: {object_files} : the list of object files to include in the archive (\"file1.o file2.o ....\") {archive_file_path} : fully qualified archive file (ex. \"/path/to/core.a\"). This property was added in Arduino IDE 1.6.6/arduino builder 1.0.0-beta12 as a replacement for {build.path}/{archive_file} . {archive_file} : the name of the core archive file (ex. \"core.a\") {compiler.libraries.ldflags} : the linking flags for precompiled libraries, which consist of automatically generated -L flags for the library path and -l flags for library files, as well as any custom flags provided via the ldflags field of library.properties. In order to support precompiled libraries, platform.txt must contain a definition of compiler.libraries.ldflags , to which any automatically generated flags will be appended. Support for precompiled libraries was added in Arduino IDE 1.8.6/arduino-builder 1.4.0. For example the following is used for AVR: compiler.c.elf.flags=-Os -Wl,--gc-sections compiler.c.elf.cmd=avr-gcc compiler.libraries.ldflags= [......] ## Combine gc-sections, archives, and objects recipe.c.combine.pattern=\"{compiler.path}{compiler.c.elf.cmd}\" {compiler.c.elf.flags} -mmcu={build.mcu} -o \"{build.path}/{build.project_name}.elf\" {object_files} {compiler.libraries.ldflags} \"{archive_file_path}\" \"-L{build.path}\" -lm Recipes for extraction of executable files and other binary data \u00b6 An arbitrary number of extra steps can be performed at the end of objects linking. These steps can be used to extract binary data used for upload and they are defined by a set of recipes with the following format: recipe.objcopy.FILE_EXTENSION_1.pattern=[.....] recipe.objcopy.FILE_EXTENSION_2.pattern=[.....] [.....] FILE_EXTENSION_x must be replaced with the extension of the extracted file, for example the AVR platform needs two files a .hex and a .eep , so we made two recipes like: recipe.objcopy.eep.pattern=[.....] recipe.objcopy.hex.pattern=[.....] There are no specific properties set by the Arduino development software here. A full example for the AVR platform can be: ## Create eeprom recipe.objcopy.eep.pattern=\"{compiler.path}{compiler.objcopy.cmd}\" {compiler.objcopy.eep.flags} \"{build.path}/{build.project_name}.elf\" \"{build.path}/{build.project_name}.eep\" ## Create hex recipe.objcopy.hex.pattern=\"{compiler.path}{compiler.elf2hex.cmd}\" {compiler.elf2hex.flags} \"{build.path}/{build.project_name}.elf\" \"{build.path}/{build.project_name}.hex\" Recipes to compute binary sketch size \u00b6 At the end of the build the Arduino development software shows the final binary sketch size to the user. The size is calculated using the recipe recipe.size.pattern . The output of the command executed using the recipe is parsed through the regular expressions set in the properties: recipe.size.regex : Program storage space used. recipe.size.regex.data : Dynamic memory used by global variables. For AVR we have: compiler.size.cmd=avr-size [....] ## Compute size recipe.size.pattern=\"{compiler.path}{compiler.size.cmd}\" -A \"{build.path}/{build.project_name}.hex\" recipe.size.regex=^(?:\\.text|\\.data|\\.bootloader)\\s+([0-9]+).* recipe.size.regex.data=^(?:\\.data|\\.bss|\\.noinit)\\s+([0-9]+).* Two properties can be used to define the total available memory: {upload.maximum_size} : available program storage space {upload.maximum_data_size} : available dynamic memory for global variables If the binary sketch size exceeds the value of these properties, the compilation process fails. This information is displayed in the console output after compiling a sketch, along with the relative memory usage value: Sketch uses 924 bytes (2%) of program storage space. Maximum is 32256 bytes. Global variables use 9 bytes (0%) of dynamic memory, leaving 2039 bytes for local variables. Maximum is 2048 bytes. Recipes to compute binary sketch size for more complex systems (since Arduino CLI >=0.21.0) \u00b6 A platform may provide a tool for the specific purpose to analyze the binaries and compute the sketch size and memory usage statistics. This is especially useful for boards with non-trivial memory layouts where the classic reg-exp based approach is not sufficient. The command line to run is specified with the recipe recipe.advanced_size.pattern . The expected output from the tool is a JSON object with the following format: { \"output\" : \"Your sketch uses 2200 bytes of program memory out of 8192 (27%)\\nThe static RAM used is 200 bytes (of 2048 max)\" , \"severity\" : \"info\" , \"sections\" : [ { \"name\" : \"text\" , \"size\" : 2200 , \"max_size\" : 8192 }, { \"name\" : \"data\" , \"size\" : 200 , \"max_size\" : 2048 } ] } The meaning of the fields is the following: output : is a preformatted text that is displayed as-is in console. severity : indicates the warning level of the output messages, it must be info , warning or error . Warnings and errors are displayed in red (or in a different color than normal output). Errors will make the build/upload fail. sections : is an array containing the memory sections and their usage level. This array is used to report memory usage in a machine-readable format if requested by the user. Each item represents a memory section and may contain the following fields name : an identifier for the section size : the sketch size for the section max_size : the maximum size for the section When the severity is set to error the build/upload is interrupted and an exception is returned to the calling process. In this case an extra exception message must be provided through the error field, for example: { \"output\" : \"Your sketch uses 12200 bytes of program memory out of 8192 (149%))\\nThe static RAM used is 200 bytes (of 2048 max)\" , \"severity\" : \"error\" , \"error\" : \"Sketch is too big!\" , \"sections\" : [ { \"name\" : \"text\" , \"size\" : 12200 , \"max_size\" : 8192 }, { \"name\" : \"data\" , \"size\" : 200 , \"max_size\" : 2048 } ] } This means that the sections part is NOT used to automatically check if the sketch size exceeds the available memory: this check is now delegated to the tool that must report a \"severity\":\"error\" with a meaningful error message. If both recipe.size.pattern and recipe.advanced_size.pattern are present then recipe.advanced_size.pattern will be used. Since the recipe.advanced_size.pattern feature is available starting from Arduino CLI>=0.21.0, to maximize backward compatibility, we recommend to provide both recipe.size.pattern and recipe.advanced_size.pattern if possible, so the old versions of the IDE/CLI will continue to work (even with a less detailed memory usage report). Recipes to export compiled binary \u00b6 When you do a Sketch > Export compiled Binary in the Arduino IDE, the compiled binary is copied from the build folder to the sketch folder. Two binaries are copied; the standard binary, and a binary that has been merged with the bootloader file (identified by the .with_bootloader in the filename). Two recipes affect how Export compiled Binary works: recipe.output.tmp_file : Defines the binary's filename in the build folder. recipe.output.save_file : Defines the filename to use when copying the binary file to the sketch folder. As with other processes, there are pre and post build hooks for Export compiled Binary . The recipe.hooks.savehex.presavehex.NUMBER.pattern and recipe.hooks.savehex.postsavehex.NUMBER.pattern hooks (but not recipe.output.tmp_file and recipe.output.save_file ) can be built concatenating the following automatically generated properties: {sketch_path} : the absolute path of the sketch folder Recipe to run the preprocessor \u00b6 For detecting which libraries to include in the build, and for generating function prototypes, (just) the preprocessor is run. For this, the recipe.preproc.macros recipe exists. This recipe must run the preprocessor on a given source file, writing the preprocessed output to a given output file, and generate (only) preprocessor errors on standard output. This preprocessor run should happen with the same defines and other preprocessor-influencing-options as for normally compiling the source files. The recipes can be built concatenating other automatically generated properties (for each file compiled): {includes} : the list of include paths in the format \"-I/include/path -I/another/path....\" {source_file} : the path to the source file {preprocessed_file_path} : the path to the output file For example the following is used for AVR: preproc.macros.flags=-w -x c++ -E -CC recipe.preproc.macros=\"{compiler.path}{compiler.cpp.cmd}\" {compiler.cpp.flags} {preproc.macros.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} \"{source_file}\" -o \"{preprocessed_file_path}\" Note that the {preprocessed_file_path} might point to (your operating system's equivalent) of /dev/null . In this case, also passing -MMD to gcc is problematic, as it will try to generate a dependency file called /dev/null.d , which will usually result in a permission error. Since platforms typically include {compiler.cpp.flags} here, which includes -MMD , the -MMD option is automatically filtered out of the recipe.preproc.macros recipe to prevent this error. If recipe.preproc.macros is not defined, it is automatically generated from recipe.cpp.o.pattern . Note that older Arduino IDE versions used the recipe.preproc.includes recipe (which is not documented here) to determine includes. Since Arduino IDE 1.6.7 (arduino-builder 1.2.0) this was changed and recipe.preproc.includes is no longer used. Pre and post build hooks (since Arduino IDE 1.6.5) \u00b6 You can specify pre and post actions around each recipe. These are called \"hooks\". Here is the complete list of available hooks: recipe.hooks.prebuild.NUMBER.pattern (called before sketch preprocessing and libraries discovery) recipe.hooks.sketch.prebuild.NUMBER.pattern (called before sketch compilation) recipe.hooks.sketch.postbuild.NUMBER.pattern (called after sketch compilation) recipe.hooks.libraries.prebuild.NUMBER.pattern (called before libraries compilation) recipe.hooks.libraries.postbuild.NUMBER.pattern (called after libraries compilation) recipe.hooks.core.prebuild.NUMBER.pattern (called before core compilation) recipe.hooks.core.postbuild.NUMBER.pattern (called after core compilation) recipe.hooks.linking.prelink.NUMBER.pattern (called before linking) recipe.hooks.linking.postlink.NUMBER.pattern (called after linking) recipe.hooks.objcopy.preobjcopy.NUMBER.pattern (called before objcopy recipes execution) recipe.hooks.objcopy.postobjcopy.NUMBER.pattern (called after objcopy recipes execution) recipe.hooks.savehex.presavehex.NUMBER.pattern (called before savehex recipe execution) recipe.hooks.savehex.postsavehex.NUMBER.pattern (called after savehex recipe execution) Example: you want to execute two commands before sketch compilation and one after linking. You'll add to your platform.txt: recipe.hooks.sketch.prebuild.1.pattern=echo sketch compilation started at recipe.hooks.sketch.prebuild.2.pattern=date recipe.hooks.linking.postlink.1.pattern=echo linking is complete Warning: hooks recipes are sorted before execution. If you need to write more than 10 recipes for a single hook, pad the number with a zero, for example: recipe.hooks.sketch.prebuild.01.pattern=echo 1 recipe.hooks.sketch.prebuild.02.pattern=echo 2 ... recipe.hooks.sketch.prebuild.11.pattern=echo 11 Note: all the pre* hooks are executed while producing the \"compilation database\" (a JSON file with the list of commands to run to compile the sketch), but the post* hooks and all compile commands are skipped. See the arduino-cli compile command reference for more info. Global platform.txt \u00b6 Properties defined in a platform.txt created in the hardware subfolder of the Arduino IDE installation folder will be used for all platforms and will override local properties. This feature is currently only available when using the Arduino IDE. platform.local.txt \u00b6 Introduced in Arduino IDE 1.5.7. This file can be used to override properties defined in platform.txt or define new properties without modifying platform.txt (e.g. when platform.txt is tracked by a version control system). It must be placed in the same folder as the platform.txt it supplements. boards.txt \u00b6 This file contains definitions and metadata for the boards supported by the platform. Boards are referenced by their short name, the board ID. The settings for a board are defined through a set of properties with keys having the board ID as prefix. For example, the board ID chosen for the Arduino Uno board is \"uno\". An extract of the Uno board configuration in boards.txt looks like: [......] uno.name=Arduino Uno uno.build.mcu=atmega328p uno.build.f_cpu=16000000L uno.build.board=AVR_UNO uno.build.core=arduino uno.build.variant=standard [......] Note that all the relevant keys start with the board ID uno.xxxxx . The uno.name property contains the human-friendly name of the board. This is shown in the Board menu of the IDEs, the \"Board Name\" field of Arduino CLI's text output, or the \"name\" key of Arduino CLI's JSON output. The uno.build.board property is used to set a compile-time macro ARDUINO_{build.board} to allow use of conditional code between #ifdef s. If not defined, a build.board value is automatically generated and the Arduino development software outputs a warning. In this case the macro defined at compile time will be ARDUINO_AVR_UNO . The other properties will override the corresponding global properties when the user selects the board. These properties will be globally available, in other configuration files too, without the board ID prefix: uno.build.mcu => build.mcu uno.build.f_cpu => build.f_cpu uno.build.board => build.board uno.build.core => build.core uno.build.variant => build.variant This explains the presence of {build.mcu} or {build.board} in the platform.txt recipes: their value is overwritten respectively by {uno.build.mcu} and {uno.build.board} when the Uno board is selected! Moreover the following properties are automatically generated: {build.core.path} : The path to the selected board's core folder (inside the core platform , for example hardware/arduino/avr/core/arduino) {build.system.path} : The path to the core platform 's system folder if available (for example hardware/arduino/sam/system) {build.variant.path} : The path to the selected board variant folder (inside the variant platform , for example hardware/arduino/avr/variants/micro) If the platform supports pluggable discovery it may also declare a set of upload_port.* properties, these properties will be used to identify a board by the discovery process when plugged in. For example we could declare a series of upload_port.vid and upload_port.pid properties for the Uno like so: uno.upload_port.vid.0=0x2341 uno.upload_port.pid.0=0x0043 uno.upload_port.vid.1=0x2341 uno.upload_port.pid.1=0x0001 uno.upload_port.vid.2=0x2A03 uno.upload_port.pid.2=0x0043 uno.upload_port.vid.3=0x2341 uno.upload_port.pid.3=0x0243 In this case we're using the board's USB VID/PID pair to identify it but upload_port.* properties can be anything that can help identify a certain board. For more detailed information see the board identification section of the pluggable discovery documentation. Cores \u00b6 Cores are placed inside the cores subfolder. Many different cores can be provided within a single platform. For example the following could be a valid platform layout: hardware/arduino/avr/cores/ : Cores folder for \"avr\" architecture, package \"arduino\" hardware/arduino/avr/cores/arduino : the Arduino Core hardware/arduino/avr/cores/rtos : a hypothetical RTOS Core The board's property build.core is used to find the core that must be compiled and linked when the board is selected. For example if a board needs the Arduino core the build.core variable should be set to: uno.build.core=arduino or if the RTOS core is needed, to: uno.build.core=rtos In any case the contents of the selected core folder are compiled and the core folder path is added to the include files search path. ArduinoCore-API \u00b6 Although much of the implementation of a core is architecture-specific, the standardized core API and the hardware independent components should be the same for every Arduino platform. In order to free platform authors from the burden of individually maintaining duplicates of this common code, Arduino has published it in a dedicated repository from which it may easily be shared by all platforms. In addition to significantly reducing the effort required to write and maintain a core, ArduinoCore-API assists core authors in providing the unprecedented level of portability between platforms that is a hallmark of the Arduino project. See the arduino/ArduinoCore-API repository for more information. Core Variants \u00b6 Sometimes a board needs some tweaking on the default core configuration (different pin mapping is a typical example). A core variant folder is an additional folder that is compiled together with the core and allows platform developers to easily add specific configurations. Variants must be placed inside the variants folder in the current architecture. For example, Arduino AVR Boards uses: hardware/arduino/avr/cores : Core folder for \"avr\" architecture, \"arduino\" package hardware/arduino/avr/cores/arduino : The Arduino core hardware/arduino/avr/variants/ : Variant folder for \"avr\" architecture, \"arduino\" package hardware/arduino/avr/variants/standard : ATmega328 based variants hardware/arduino/avr/variants/leonardo : ATmega32U4 based variants In this example, the Arduino Uno board needs the standard variant so the build.variant property is set to standard : [.....] uno.build.core=arduino uno.build.variant=standard [.....] instead, the Arduino Leonardo board needs the leonardo variant: [.....] leonardo.build.core=arduino leonardo.build.variant=leonardo [.....] In the example above, both Uno and Leonardo share the same core but use different variants. In any case, the contents of the selected variant folder path is added to the include search path and its contents are compiled and linked with the sketch. The parameter build.variant.path is automatically generated. Board VID/PID \u00b6 USB vendor IDs (VID) and product IDs (PID) identify USB devices to the computer. If the board uses a unique VID/PID pair, it may be defined in boards.txt: uno.vid.0=0x2341 uno.pid.0=0x0043 uno.vid.1=0x2341 uno.pid.1=0x0001 The vid and pid properties end with an arbitrary number, which allows multiple VID/PID pairs to be defined for a board. The snippet above is defining the 2341:0043 and 2341:0001 pairs used by Uno boards. The Arduino development software uses the vid and pid properties to automatically identify the boards connected to the computer. This convenience feature isn't available for boards that don't present a unique VID/PID pair. Serial Monitor control signal configuration \u00b6 Arduino boards that use a USB to TTL serial adapter chip for communication with the computer (e.g., Uno, Nano, Mega) often utilize the DTR (data terminal ready) or RTS (request to send) serial control signals as a mechanism for the Arduino development software to trigger a reset of the primary microcontroller. The adapter's DTR and RTS pins are set LOW when the control signals are asserted by the computer and this LOW level is converted into a pulse on the microcontroller's reset pin by an \"auto-reset\" circuit on the board. The auto-reset system is necessary to activate the bootloader at the start of an upload. This system is also used to reset the microcontroller when Serial Monitor is started. The reset is convenient because it allows viewing all serial output from the time the program starts. In case the reset caused by opening Serial Monitor is not desirable, the control signal assertion behavior of Serial Monitor is configurable via the serial.disableDTR and serial.disableRTS properties. Setting these properties to true will prevent Serial Monitor from asserting the control signals when that board is selected: [.....] uno.serial.disableDTR=true uno.serial.disableRTS=true [.....] Hiding boards \u00b6 Adding a hide property to a board definition causes it to not be shown in the Arduino IDE's Tools > Board menu. uno.hide= The value of the property is ignored; it's the presence or absence of the property that controls the board's visibility. programmers.txt \u00b6 This file contains definitions for external programmers. These programmers are used by: The Tools > Burn Bootloader feature of the IDEs and arduino-cli burn-bootloader The Sketch > Upload Using Programmer feature of the IDEs and arduino-cli upload --programmer <programmer ID> programmers.txt works similarly to boards.txt . Programmers are referenced by their short name: the programmer ID. The settings for a programmer are defined through a set of properties with keys that use the programmer ID as prefix. For example, the programmer ID chosen for the \"Arduino as ISP\" programmer is \"arduinoasisp\". The definition of this programmer in programmers.txt looks like: [......] arduinoasisp.name=Arduino as ISP arduinoasisp.protocol=stk500v1 arduinoasisp.program.speed=19200 arduinoasisp.program.tool=avrdude arduinoasisp.program.extra_params=-P{serial.port} -b{program.speed} [......] These properties can only be used in the recipes of the actions that use the programmer ( erase , bootloader , and program ). The arduinoasisp.name property defines the human-friendly name of the programmer. This is shown in the Tools > Programmer menu of the IDEs and the output of arduino-cli upload --programmer list and arduino-cli burn-bootloader --programmer list . In Arduino IDE 1.8.12 and older, all programmers of all installed platforms were made available for use. Starting with Arduino IDE 1.8.13 (and in all relevant versions of other Arduino development tools), only the programmers defined by the board and core platform of the currently selected board are available. For this reason, platforms may now need to define copies of the programmers that were previously assumed to be provided by another platform. Set a default programmer for a board (since Arduino CLI >=0.35.0, Arduino IDE >=2.3.0) \u00b6 A default programmer for each board may be specified through the programmer.default directive in the board definition: BOARD_ID.programmer.default=PROGRAMMER_ID The default programmer will be selected automatically if the user do not specifiy or select another programmer. This may be useful for boards with an on-board programmer/debugger. For example if we want to set Atmel ICE as the default programmer for the Arduino UNO we would add the following line to the boards.txt file: uno.programmer.default=atmel-ice Tools \u00b6 The Arduino development software uses external command line tools to upload the compiled sketch to the board or to burn bootloaders using external programmers. For example, avrdude is used for AVR based boards and bossac for SAM based boards, but there is no limit, any command line executable can be used. The command line parameters are specified using recipes in the same way used for platform build process. Tools are configured inside the platform.txt file. Every Tool is identified by a short name, the Tool ID. A tool can be used for different purposes: upload a sketch to the target board (using a bootloader preinstalled on the board) program a sketch to the target board using an external programmer erase the target board's flash memory using an external programmer burn a bootloader into the target board using an external programmer Each action has its own recipe and its configuration is done through a set of properties having key starting with tools prefix followed by the tool ID and the action: [....] tools.avrdude.upload.pattern=[......] [....] tools.avrdude.program.pattern=[......] [....] tools.avrdude.erase.pattern=[......] [....] tools.avrdude.bootloader.pattern=[......] [.....] A tool may have some actions not defined (it's not mandatory to define all four actions). Let's look at how the upload action is defined for avrdude: tools.avrdude.path={runtime.tools.avrdude.path} tools.avrdude.cmd.path={path}/bin/avrdude tools.avrdude.config.path={path}/etc/avrdude.conf tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" -p{build.mcu} -c{upload.port.protocol} -P{upload.port.address} -b{upload.speed} -D \"-Uflash:w:{build.path}/{build.project_name}.hex:i\" The tool configuration properties are available globally without the prefix. For example, the tools.avrdude.cmd.path property can be used as {cmd.path} inside the recipe, and the same happens for all the other avrdude configuration variables. How to retrieve tools path via {runtime.tools.*} properties \u00b6 A {runtime.tools.TOOLNAME.path} and {runtime.tools.TOOLNAME-TOOLVERSION.path} property is generated for the tools provided by the current platform and for any other platform installed via Boards Manager. See {runtime.tools.*.path} rules for details on how the runtime properties are determined. Environment variables \u00b6 All the tools launched to compile or upload a sketch will have the following environment variable set: ARDUINO_USER_AGENT : contains the name and version of the client used by the user in HTTP user-agent format , for example \"arduino-cli/0.21.0\" . It may also contain multiple space-delimited entries like \"arduino-cli/0.21.0 ArduinoIDE/2.0.0-rc1\" if this information is available. Pluggable discovery \u00b6 Discovery tools are a special kind of tool used to find supported boards. A platform must declare one or more Pluggable Discoveries in its platform.txt . Discoveries can be referenced from other packages, including the builtin dummy package which contains the traditional discoveries. There are two different syntaxes to declare discoveries. If the platform uses just one discovery: pluggable_discovery.required=VENDOR_ID:DISCOVERY_NAME instead if it needs multiple discoveries: pluggable_discovery.required.0=VENDOR_ID:DISCOVERY_0_NAME pluggable_discovery.required.1=VENDOR_ID:DISCOVERY_1_NAME A platform that supports only boards connected via serial ports can easily use the builtin package's serial-discovery without creating a custom pluggable discovery: pluggable_discovery.required=builtin:serial-discovery if it also supports boards connected via the network, it can use the builtin package's mdns-discovery : pluggable_discovery.required.0=builtin:serial-discovery pluggable_discovery.required.1=builtin:mdns-discovery Since the above syntax requires specifying a discovery via the discoveryDependencies field of the platform's package index , it might be cumbersome to use with manual installations. So we provide another syntax to ease development and beta testing: pluggable_discovery.DISCOVERY_ID.pattern=DISCOVERY_RECIPE DISCOVERY_ID must be replaced by a unique identifier for the particular discovery and DISCOVERY_RECIPE must be replaced by the command line to launch the discovery. An example could be: ## Teensy Ports Discovery pluggable_discovery.teensy.pattern=\"{runtime.tools.teensy_ports.path}/hardware/tools/teensy_ports\" -J2 We strongly recommend using this syntax only for development purposes and not on released platforms. For backward compatibility, if a platform does not declare any discovery (using the pluggable_discovery.* properties in platform.txt ) it will automatically inherit builtin:serial-discovery and builtin:mdns-discovery (but not other builtin discoveries that may be possibly added in the future). For detailed information, see the Pluggable Discovery specification . Pluggable monitor \u00b6 Monitor tools are a special kind of tool used to let the user communicate with the supported boards. A platform must declare one or more Pluggable Monitor in its platform.txt and bind them to a specific port protocol. Monitors can be referenced from other packages. The following directive is used to bind a specific monitor tool to a specific port protocol: pluggable_monitor.required.PROTOCOL=VENDOR_ID:MONITOR_NAME where PROTOCOL must be replaced with the port protocol identifier and VENDOR_ID:MONITOR_NAME must be replaced with the monitor tool identifier. The platform can support as many protocols as needed: pluggable_monitor.required.PROTOCOL1=VENDOR_ID:MONITOR_NAME1 pluggable_monitor.required.PROTOCOL2=VENDOR_ID:MONITOR_NAME2 ... The above syntax requires specifying a monitor tool via the monitorDependencies field of the platform's package index . Since it might be cumbersome to use with manual installations, we provide another syntax to ease development and beta testing: pluggable_monitor.pattern.PROTOCOL=MONITOR_RECIPE where MONITOR_RECIPE must be replaced by the command line to launch the monitor tool for the specific PROTOCOL . An example could be: pluggable_monitor.pattern.custom-ble=\"{runtime.tools.my-ble-monitor.path}/my-ble-monitor\" -H in this case the platform provides a new hypothetical custom-ble protocol monitor tool and the command line tool named my-ble-monitor is launched with the -H parameter to start the monitor tool. In this case the command line pattern may contain any extra parameter in the formula: this is different from the monitor tools installed through the monitorDependencies field that must run without any command line parameter. We strongly recommend using this syntax only for development purposes and not on released platforms. Built-in monitors \u00b6 If a platform supports only boards connected via serial ports it can easily use the builtin:serial-monitor tool without creating a custom pluggable monitor: pluggable_monitor.required.serial=builtin:serial-monitor Backward compatibility \u00b6 For backward compatibility, if a platform does not declare any discovery or monitor tool (using the pluggable_discovery.* or pluggable_monitor.* properties in platform.txt respectively) it will automatically inherit builtin:serial-monitor (but not other builtin monitor tools that may be possibly added in the future). This will allow all legacy non-pluggable platforms to migrate to pluggable monitor without disruption. For detailed information, see the Pluggable Monitor specification . Port configuration \u00b6 Each pluggable monitor has its own default settings that can be overridden using the following board properties: BOARD_ID.monitor_port.PROTOCOL.SETTING_NAME=SETTING_VALUE where: BOARD_ID is the board identifier PROTOCOL is the port protocol SETTING_NAME and SETTING_VALUE are the port setting and the desired value For example, let's suppose that a board needs the baudrate setting of the serial port to be 9600 , then the corresponding properties in the boards.txt file will be: myboard.monitor_port.serial.baudrate=9600 The settings available in a specific pluggable monitor can be queried directly from it . Legacy serial.disableRTS and serial.disableDTR properties \u00b6 In the old Arduino IDE (<=1.8.x) we used the properties: BOARD_ID.serial.disableRTS=true BOARD_ID.serial.disableDTR=true to disable RTS and DTR when opening the serial monitor. To keep backward compatibilty the properties above are automatically converted to the corresponding pluggable monitor properties: BOARD_ID.monitor_port.serial.rts=off BOARD_ID.monitor_port.serial.dtr=off Verbose parameter \u00b6 It is possible for the user to enable verbosity from the Preferences panel of the IDEs or Arduino CLI's --verbose flag. This preference is transferred to the command line using the ACTION.verbose property (where ACTION is the action we are considering). When the verbose mode is enabled, the tools.TOOL_ID.ACTION.params.verbose property is copied into ACTION.verbose . When the verbose mode is disabled, the tools.TOOL_ID.ACTION.params.quiet property is copied into ACTION.verbose . Confused? Maybe an example will make things clear: tools.avrdude.upload.params.verbose=-v -v -v -v tools.avrdude.upload.params.quiet=-q -q tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" {upload.verbose} -p{build.mcu} -c{upload.protocol} -P{serial.port} -b{upload.speed} -D \"-Uflash:w:{build.path}/{build.project_name}.hex:i\" In this example if the user enables verbose mode, then {upload.params.verbose} is used in {upload.verbose} : tools.avrdude.upload.params.verbose => upload.verbose If the user didn't enable verbose mode, then {upload.params.quiet} is used in {upload.verbose} : tools.avrdude.upload.params.quiet => upload.verbose Sketch upload configuration \u00b6 The Upload action is triggered when the user clicks on the \"Upload\" button on the IDE toolbar or uses arduino-cli upload . Arduino uses the term \"upload\" for the process of transferring a program to the Arduino board. The upload.tool.<protocol_name> property determines the tool to be used for upload. A specific upload.tool.<protocol_name> property should be defined for every board in boards.txt: [......] uno.upload.tool.serial=avrdude [......] leonardo.upload.tool.serial=avrdude leonardo.upload.tool.network=arduino_ota [......] Multiple protocols can be defined for each board. When the user tries to upload using a protocol not supported by the board, it will fallback to default if one was defined: [......] uno.upload.tool.default=avrdude [......] leonardo.upload.tool.default=avrdude leonardo.upload.tool.network=arduino_ota [......] default is also used when no upload address is provided by the user. This can be used with tools that have built-in port detection (e.g., openocd ). For backward compatibility with IDE 1.8.15 and older the previous syntax is still supported: uno.upload.tool=avrdude The previous syntax is equivalent to: uno.upload.tool.default=avrdude Other upload parameters can also be defined for the board. For example, in the Arduino AVR Boards boards.txt we have: [.....] uno.name=Arduino Uno uno.upload.tool.serial=avrdude uno.upload.protocol=arduino uno.upload.maximum_size=32256 uno.upload.speed=115200 [.....] leonardo.name=Arduino Leonardo leonardo.upload.tool.serial=avrdude leonardo.upload.protocol=avr109 leonardo.upload.maximum_size=28672 leonardo.upload.speed=57600 leonardo.upload.use_1200bps_touch=true leonardo.upload.wait_for_upload_port=true [.....] Most {upload.XXXX} variables are used later in the avrdude upload recipe in platform.txt: [.....] tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" {upload.verbose} -p{build.mcu} -c{upload.port.protocol} -P{upload.port.address} -b{upload.speed} -D \"-Uflash:w:{build.path}/{build.project_name}.hex:i\" [.....] If necessary the same property can be defined multiple times for different protocols: leonardo.upload.serial.speed=57600 leonardo.upload.network.speed=19200 The two above properties will be available as {upload.speed} , the value will depend on the protocol used to upload. Properties from pluggable discovery \u00b6 If a platform supports pluggable discovery it can also use the port's properties returned by a discovery. For example, the following port metadata coming from a pluggable discovery: { \"eventType\": \"add\", \"port\": { \"address\": \"/dev/ttyACM0\", \"label\": \"ttyACM0\", \"protocol\": \"serial\", \"protocolLabel\": \"Serial Port (USB)\", \"properties\": { \"pid\": \"0x804e\", \"vid\": \"0x2341\", \"serialNumber\": \"EBEABFD6514D32364E202020FF10181E\", \"name\": \"ttyACM0\" } } } will be available on the recipe as the variables: {upload.port.address} = /dev/ttyACM0 {upload.port.label} = ttyACM0 {upload.port.protocol} = serial {upload.port.protocolLabel} = Serial Port (USB) {upload.port.properties.pid} = 0x8043 {upload.port.properties.vid} = 0x2341 {upload.port.properties.serialNumber} = EBEABFD6514D32364E202020FF10181E {upload.port.properties.name} = ttyACM0 {serial.port} = /dev/ttyACM0 # for backward compatibility {serial.port.file} = ttyACM0 # only because protocol=serial Here another example: { \"eventType\": \"add\", \"port\": { \"address\": \"192.168.1.232\", \"label\": \"SSH on my-board (192.168.1.232)\", \"protocol\": \"ssh\", \"protocolLabel\": \"SSH Network port\", \"properties\": { \"macprefix\": \"AA:BB:CC\", \"macaddress\": \"AA:BB:CC:DD:EE:FF\" } } } that is translated to: {upload.port.address} = 192.168.1.232 {upload.port.label} = SSH on my-board (192.168.1.232) {upload.port.protocol} = ssh {upload.port.protocolLabel} = SSH Network port {upload.port.properties.macprefix} = AA:BB:CC {upload.port.properties.macaddress} = AA:BB:CC:DD:EE:FF {serial.port} = 192.168.1.232 # for backward compatibility This configuration, together with protocol selection, allows to remove the hardcoded network_pattern . Now we can replace the legacy recipe (split into multiple lines for clarity): tools.bossac.upload.network_pattern=\"{runtime.tools.arduinoOTA.path}/bin/arduinoOTA\" -address {serial.port} -port 65280 -sketch \"{build.path}/{build.project_name}.bin\" with: tools.arduino_ota.upload.pattern=\"{runtime.tools.arduinoOTA.path}/bin/arduinoOTA\" -address {upload.port.address} -port 65280 -sketch \"{build.path}/{build.project_name}.bin\" User provided fields \u00b6 Some upload recipes might require custom fields that must be provided by the user, like username and password to upload over the network. In this case the recipe must use the special placeholder {upload.field.FIELD_NAME} , where FIELD_NAME must be declared separately in the recipe using the following format: tools.UPLOAD_RECIPE_ID.upload.field.FIELD_NAME=FIELD_LABEL tools.UPLOAD_RECIPE_ID.upload.field.FIELD_NAME.secret=true FIELD_LABEL is the label shown in the graphical prompt where the user is asked to enter the value for the field. The optional secret property should be set to true if the field is a secret (like a password or token). Let's see a complete example: tools.arduino_ota.upload.field.username=Username tools.arduino_ota.upload.field.password=Password tools.arduino_ota.upload.field.password.secret=true tools.arduino_ota.upload.pattern=\"{runtime.tools.arduinoOTA.path}/bin/arduinoOTA\" -address {upload.port.address} -port 65280 -username \"{upload.field.username} -password \"{upload.field.password}\" -sketch \"{build.path}/{build.project_name}.bin\" If a FIELD_LABEL is longer than 50 characters it will be truncated to 49 characters and an ellipsis ( \u2026 ) appended to it. For example this field: tools.arduino_ota.upload.field.some_field=This is a really long label that ideally must never be set by any platform will be shown to the user as: This is a really long label that ideally must nev\u2026 Upload verification \u00b6 Upload verification can be enabled via the Arduino IDE's File > Preferences > Verify code after upload or arduino-cli upload --verify . This uses a system similar to the verbose parameter . tools.TOOL_ID.ACTION.params.verify defines the value of the ACTION.verify property when verification is enabled and tools.TOOL_ID.ACTION.params.noverify the value when verification is disabled. The {ACTION.verify} property is only defined for the upload and program actions of upload.tool . Prior to Arduino IDE 1.6.9, tools.TOOL_ID.ACTION.params.verify/noverify were not supported and {upload.verify} was set to true / false according to the verification preference setting, while {program.verify} was left undefined. For this reason, backwards compatibility with older IDE versions requires the addition of definitions for the upload.verify and program.verify properties to platform.txt: [.....] tools.avrdude.upload.verify= [.....] tools.avrdude.program.verify= [.....] These definitions are overridden with the value defined by tools.TOOL_ID.ACTION.params.verify/noverify when a modern version of Arduino development software is in use. 1200 bps bootloader reset \u00b6 Some Arduino boards use a dedicated USB-to-serial chip, that takes care of restarting the main MCU (starting the bootloader) when the serial port is opened. However, boards that have a native USB connection (such as the Leonardo or Zero) will have to disconnect from USB when rebooting into the bootloader (after which the bootloader reconnects to USB and offers a new serial port for uploading). After the upload is complete, the bootloader disconnects from USB again, starts the sketch, which then reconnects to USB. Because of these reconnections, the standard restart-on-serial open will not work, since that would cause the serial port to disappear and be closed again. Instead, the sketch running on these boards interprets a bitrate of 1200 bps as a signal the bootloader should be started. To let the Arduino development software perform these steps, two board properties can be set to true : use_1200bps_touch causes the selected serial port to be briefly opened at 1200 bps (8N1) before starting the upload. wait_for_upload_port causes the upload procedure to wait for the serial port to (re)appear before and after the upload. This is only used when use_1200bps_touch is also set. When set, after doing the 1200 bps touch, the development software will wait for a new serial port to appear and use that as the port for uploads. Alternatively, if the original port does not disappear within a few seconds, the upload continues with the original port (which can be the case if the board was already put into bootloader manually, or the the disconnect and reconnect was missed). Additionally, after the upload is complete, the IDE again waits for a new port to appear (or the originally selected port to be present). Note that the IDE implementation of this 1200 bps touch has some peculiarities, and the newer arduino-cli implementation also seems different (does not wait for the port after the reset, which is probably only needed in the IDE to prevent opening the wrong port on the serial monitor, and does not have a shorter timeout when the port never disappears). Upload Using Programmer by default \u00b6 If the upload.protocol property is not defined for a board, the Arduino IDE's \"Upload\" process will use the same behavior as \"Upload Using Programmer\" . This is convenient for boards which only support uploading via programmer. Serial port \u00b6 The full path (e.g., /dev/ttyACM0 ) of the port selected via the IDE or arduino-cli upload 's --port option is available as a configuration property {upload.port.address} . The file component of the port's path (e.g., ttyACM0 ) is available as the configuration property {upload.port.label} . For backward compatibility with IDE 1.8.15 and older the old property serial.port is still available and is identical to {upload.port.address} . Instead serial.port.file is identical to {upload.port.label} and available only if protocol in use is serial . Upload using an external programmer \u00b6 The program action is triggered via the Sketch > Upload Using Programmer feature of the IDEs or arduino-cli upload --programmer <programmer ID> . This action is used to transfer a compiled sketch to a board using an external programmer. The program.tool property determines the tool to be used for this action. This property is typically defined for each programmer in programmers.txt and uses the same syntax as the upload action : [......] usbasp.program.tool.serial=avrdude [......] arduinoasisp.program.tool.serial=avrdude [......] arduinoisp.program.tool.default=avrdude [......] For backward compatibility with IDE 1.8.15 and older the previous syntax is still supported: [......] usbasp.program.tool=avrdude [......] arduinoasisp.program.tool=avrdude [......] This action can use the same upload verification preference system as the upload action, via the program.verify property. When using the Arduino IDE, if the selected programmer is from a different platform than the board, the program recipe defined in the programmer's platform is used without overrides from the properties defined in the platform.txt of the board platform . When using Arduino development software other than the Arduino IDE, the handling of properties is the same as when doing a standard Upload . Burn Bootloader \u00b6 The erase and bootloader actions are triggered via the Tools > Burn Bootloader feature of the Arduino IDE or arduino-cli burn-bootloader . This action is used to flash a bootloader to the board. \"Burn Bootloader\" is unique in that it uses two actions, which are executed in sequence: erase is typically used to erase the microcontroller's flash memory and set the configuration fuses according to the properties defined in the board definition bootloader is used to flash the bootloader to the board The bootloader.tool property determines the tool to be used for the erase and bootloader actions both. This property is typically defined for each board in boards.txt and uses the same syntax as the upload action : [......] uno.bootloader.tool.serial=avrdude [......] leonardo.bootloader.tool.serial=avrdude leonardo.bootloader.tool.network=arduino_ota [......] duemilanove.bootloader.tool.default=avrdude [......] For backward compatibility with IDE 1.8.15 and older the previous syntax is still supported: [......] uno.bootloader.tool=avrdude [......] leonardo.bootloader.tool=avrdude [......] When using the Arduino IDE, if the board uses a core reference , the platform.txt of the core platform is not used at all in defining the recipes for erase and bootloader actions. When using Arduino development software other than the Arduino IDE, the handling of properties from the core platform's platform.txt is done as usual. Sketch debugging configuration \u00b6 Starting from Arduino CLI 0.9.0 / Arduino IDE 2.x, sketch debugging support is available for platforms. The debug action is triggered when the user clicks the Debug button in the Arduino IDE or runs the arduino-cli debug command. Since opening a debug session requires the orchestration of numerous tools, the CLI/IDE will take care of that duty: differently from the upload actions, there is no need for the platform to provide debug recipes, the only requirement is to provide some debug configuration directives. Debugger configuration directives \u00b6 All the debug directives are grouped under the debug.* directives. Here is the complete list of the supported directives: debug.executable : is the absolute path to the compiled binary of the sketch debug.toolchain : is a unique identifier of the required toolchain, currently we support gcc (and compatible) only debug.toolchain.path : is the absolute path to the toolchain directory debug.toolchain.prefix : is the prefix of the toolchain (for example arm-none-eabi- ) debug.server : is a unique identifier of the required debug server, currently we support only openocd debug.svd_file : is the absolute path to the SVD descriptor. If the debug.executable property is not present or is empty debugging will not be allowed. OpenOCD server specific configurations: debug.server.openocd.path : is the absolute path to the OpenOCD directory debug.server.openocd.scripts_dir : is the absolute path to the OpenOCD scripts directory debug.server.openocd.scripts.N : is a list of OpenOCD script files to run, where N is a number (a sequence of non-consecutive numbers is allowed) debug.server.openocd.script : if there is only one OpenOCD script to run, this directive con be used instead of the debug.server.openocd.scripts.N (this directive is ignored if debug.server.openocd.scripts.N is present) Custom config for Cortext-debug plugin for Arduino IDE \u00b6 The Arduino IDE uses cortex-debug plugin to start a debugging session. The IDE creates a launch.json file that is needed to start the debugging via the cortex-debug plugin. To give the platform developers more flexibility, it is allowed to pass any extra arbitrary setup to launch.json generated by the IDE. To allow this the directives under the group debug.cortex-debug.custom.* are converted into JSON and added to the generated launch.json as-is. Moreover, if a directive has a key with a numeric suffix, it is converted into a JSON array. For example the following directives: debug.cortex-debug.custom.postAttachCommands.0=set remote hardware-watchpoint-limit 2 debug.cortex-debug.custom.postAttachCommands.1=monitor reset halt debug.cortex-debug.custom.postAttachCommands.2=monitor gdb_sync debug.cortex-debug.custom.postAttachCommands.3=thb setup debug.cortex-debug.custom.postAttachCommands.4=c debug.cortex-debug.custom.overrideRestartCommands.0=monitor reset halt debug.cortex-debug.custom.overrideRestartCommands.1=monitor gdb_sync debug.cortex-debug.custom.overrideRestartCommands.2=thb setup debug.cortex-debug.custom.overrideRestartCommands.3=c will result in the following JSON to be merged in the Arduino IDE generated launch.json : { \"overrideRestartCommands\" : [ \"monitor reset halt\" , \"monitor gdb_sync\" , \"thb setup\" , \"c\" ], \"postAttachCommands\" : [ \"set remote hardware-watchpoint-limit 2\" , \"monitor reset halt\" , \"monitor gdb_sync\" , \"thb setup\" , \"c\" ] } All the values are converted by default to a string in the resulting JSON. If another type is needed the value can be prefixed with the tags [boolean] , [number] , [string] or [object] to force a specific type in the JSON. Moreover the hierarchy of the properties may be used to build JSON objects. For example: debug.cortex-debug.custom.aBoolean=[boolean]true debug.cortex-debug.custom.aNumber=[number]10 debug.cortex-debug.custom.anotherNumber=[number]10.20 debug.cortex-debug.custom.anObject=[object]{\"key\":\"value\", \"boolean\":true} debug.cortex-debug.custom.anotherObject.key=value debug.cortex-debug.custom.anotherObject.boolean=[boolean]true will result in the following JSON: { \"aBoolean\" : true , \"aNumber\" : 10 , \"anotherNumber\" : 10.2 , \"anObject\" : { \"boolean\" : true , \"key\" : \"value\" }, \"anotherObject\" : { \"boolean\" : true , \"key\" : \"value\" } } Additional debugger config selection via debug.additional_config directive. \u00b6 It is possible to use any sub-tree of the platform configuration to override the debugger configuration using the directive debug.additional_config=CONFIG_PREFIX . This rule will use the configuration under CONFIG_PREFIX.* to override the current debug.* config. This change allows a more convenient rationalization and selection of the configs to apply to the debugger. For example, we could factor common parts of a configuration in the platform.txt file: # CONFIG 1 debug-overrides.esp32.cortex-debug.custom.name=Arduino on ESP32 debug-overrides.esp32.cortex-debug.custom.request=attach debug-overrides.esp32.cortex-debug.custom.postAttachCommands.0=set remote hardware-watchpoint-limit 2 debug-overrides.esp32.cortex-debug.custom.postAttachCommands.1=monitor reset halt debug-overrides.esp32.cortex-debug.custom.postAttachCommands.2=monitor gdb_sync debug-overrides.esp32.cortex-debug.custom.postAttachCommands.3=thb setup debug-overrides.esp32.cortex-debug.custom.postAttachCommands.4=c debug-overrides.esp32.cortex-debug.custom.overrideRestartCommands.0=monitor reset halt debug-overrides.esp32.cortex-debug.custom.overrideRestartCommands.1=monitor gdb_sync debug-overrides.esp32.cortex-debug.custom.overrideRestartCommands.2=thb setup debug-overrides.esp32.cortex-debug.custom.overrideRestartCommands.3=c # CONFIG 2 debug-overrides.esp32s2.cortex-debug.custom.name=Arduino on ESP32-S2 debug-overrides.esp32s2.cortex-debug.custom.request=attach debug-overrides.esp32s2.cortex-debug.custom.postAttachCommands.0=set remote hardware-watchpoint-limit 2 debug-overrides.esp32s2.cortex-debug.custom.postAttachCommands.1=monitor reset halt debug-overrides.esp32s2.cortex-debug.custom.postAttachCommands.2=monitor gdb_sync debug-overrides.esp32s2.cortex-debug.custom.postAttachCommands.3=thb setup debug-overrides.esp32s2.cortex-debug.custom.postAttachCommands.4=c debug-overrides.esp32s2.cortex-debug.custom.overrideRestartCommands.0=monitor reset halt debug-overrides.esp32s2.cortex-debug.custom.overrideRestartCommands.1=monitor gdb_sync debug-overrides.esp32s2.cortex-debug.custom.overrideRestartCommands.2=thb setup debug-overrides.esp32s2.cortex-debug.custom.overrideRestartCommands.3=c and choose which one to use depending on the board in the boards.txt file: myboard.name=My Board with esp32 myboard.debug.additional_config=debug-overrides.esp32 anotherboard.name=My Board with esp32s2 anotherboard.debug.additional_config=debug-overrides.esp32s2 ... Another possibility is to compose the configuration using another variable present in the board configuration, for example if in the platform.txt we add: debug.additional_config=debug-overrides.{build.mcu} we may use the build.mcu value as a \"selector\" for the board-specific debug configuration that is overlapped to the global debug configuration: myboard.name=My Board with esp32 myboard.build.mcu=esp32 ... anotherboard.name=My Board with esp32s2 anotherboard.build.mcu=esp32s2 ... Optimization level for debugging \u00b6 The compiler optimization level that is appropriate for normal usage will often not provide a good experience while debugging. For this reason, it may be helpful to use different compiler flags when compiling a sketch for use with the debugger. The flags for use when compiling for debugging can be defined via the compiler.optimization_flags.debug property, and those for normal use via the compiler.optimization_flags.release property. The compiler.optimization_flags property will be defined according to one or the other depending on the Arduino Pro IDE's Sketch > Optimize for Debugging setting or arduino-cli compile 's --optimize-for-debug option. Custom board options \u00b6 It can sometimes be useful to provide user selectable configuration options for a specific board. For example, a board could be provided in two or more variants with different microcontrollers, or may have different crystal speed based on the board model, and so on... When using Arduino CLI, the option can be selected via the FQBN, or using the --board-options flag In the Arduino IDE the options add extra menu items under the \"Tools\" menu. In Arduino Web Editor, the options are displayed in the \"Flavours\" menu. Let's see an example of how a custom option is implemented. The board used in the example is the Arduino Duemilanove. This board was produced in two models, one with an ATmega168 microcontroller and another with an ATmega328P. We are going then to define a custom option, using the \"cpu\" MENU_ID, that allows the user to choose between the two different microcontrollers. We must first define a set of menu.MENU_ID=Text properties. Text is what is displayed on the GUI for every custom menu we are going to create and must be declared at the beginning of the boards.txt file: menu.cpu=Processor [.....] in this case, the menu name is \"Processor\". Now let's add, always in the boards.txt file, the default configuration (common to all processors) for the duemilanove board: menu.cpu=Processor [.....] duemilanove.name=Arduino Duemilanove duemilanove.upload.tool=avrdude duemilanove.upload.protocol=arduino duemilanove.build.f_cpu=16000000L duemilanove.build.board=AVR_DUEMILANOVE duemilanove.build.core=arduino duemilanove.build.variant=standard [.....] Now let's define the possible values of the \"cpu\" option: [.....] duemilanove.menu.cpu.atmega328=ATmega328P [.....] duemilanove.menu.cpu.atmega168=ATmega168 [.....] We have defined two values: \"atmega328\" and \"atmega168\". Note that the property keys must follow the format BOARD_ID.menu.MENU_ID.OPTION_ID=Text , where Text is what is displayed under the \"Processor\" menu in the IDE's GUI. Finally, the specific configuration for each option value: [.....] ## Arduino Duemilanove w/ ATmega328P duemilanove.menu.cpu.atmega328=ATmega328P duemilanove.menu.cpu.atmega328.upload.maximum_size=30720 duemilanove.menu.cpu.atmega328.upload.speed=57600 duemilanove.menu.cpu.atmega328.build.mcu=atmega328p ## Arduino Duemilanove w/ ATmega168 duemilanove.menu.cpu.atmega168=ATmega168 duemilanove.menu.cpu.atmega168.upload.maximum_size=14336 duemilanove.menu.cpu.atmega168.upload.speed=19200 duemilanove.menu.cpu.atmega168.build.mcu=atmega168 [.....] Note that when the user selects an option value, all the \"sub properties\" of that value are copied in the global configuration. For example, when the user selects \"ATmega168\" from the \"Processor\" menu, or uses the FQBN arduino:avr:duemilanove:cpu=atmega168 with Arduino CLI, the configuration under atmega168 is made available globally: duemilanove.menu.cpu.atmega168.upload.maximum_size => upload.maximum_size duemilanove.menu.cpu.atmega168.upload.speed => upload.speed duemilanove.menu.cpu.atmega168.build.mcu => build.mcu There is no limit to the number of custom menus that can be defined. Referencing another core, variant or tool \u00b6 The Arduino platform referencing system allows using components of other platforms in cases where it would otherwise be necessary to duplicate those components. This feature allows us to reduce the minimum set of files needed to define a new \"hardware\" to just the boards.txt file. Core reference \u00b6 Inside the boards.txt we can define a board that uses a core provided by another vendor/maintainer using the syntax VENDOR_ID:CORE_ID . For example, if we want to define a board that uses the \"arduino\" core from the \"arduino\" vendor we should write: [....] myboard.name=My Wonderful Arduino Compatible board myboard.build.core=arduino:arduino [....] Note that we don't need to specify any architecture since the same architecture of \"myboard\" is used, so we just say \"arduino:arduino\" instead of \"arduino:avr:arduino\". The platform.txt settings are inherited from the referenced core platform, thus there is no need to provide a platform.txt unless there are some specific properties that need to be overridden. The bundled libraries from the referenced platform are used, thus there is no need for the referencing platform to bundle those libraries. If libraries are provided, the list of available libraries is the sum of the two libraries, where the referencing platform has priority over the referenced platform. The programmers from the referenced platform are made available, thus there is no need for the referencing platform to define those programmers. If the referencing platform does provide its own programmer definitions, the list of available programmer is the sum of the programmers of the two platforms. In Arduino IDE 1.8.12 and older, all programmers of all installed platforms were made available. Variant reference \u00b6 In the same way we can use a variant defined on another platform using the syntax VENDOR_ID:VARIANT_ID : [....] myboard.build.variant=arduino:standard [....] Note that, unlike core references, other resources (platform.txt, bundled libraries, programmers) are not inherited from the referenced platform. Tool references \u00b6 Tool recipes defined in the platform.txt of other platforms can also be referenced using the syntax VENDOR_ID:TOOL_ID : [....] myboard.upload.tool=arduino:avrdude myboard.bootloader.tool=arduino:avrdude [....] When using Arduino CLI or Arduino IDE 2.x (but not Arduino IDE 1.x), properties used in the referenced tool recipe may be overridden in the referencing platform's platform.txt. Note that, unlike core references, referencing a tool recipe does not result in any other resources being inherited from the referenced platform. Platform Terminology \u00b6 Because boards can reference cores, variants and tools in different platforms, this means that a single build or upload can use data from up to four different platforms. To keep this clear, the following terminology is used: The \"board platform\" is the platform that defines the currently selected board (e.g. the platform that contains the board.txt the board is defined in. The \"core platform\" is the the platform that contains the core to be used. The \"variant platform\" is the platform that contains the variant to be used. The \"tool platform\" is the platform that contains the tool used for the current operation. In the most common case: a board platform without any references, all of these will refer to the same platform. Note that the above terminology is not in widespread use, but was invented for clarity within this document. In the actual Arduino CLI code, the \"board platform\" is called targetPlatform , the \"core platform\" is called actualPlatform , the others are pretty much nameless. boards.local.txt \u00b6 Introduced in Arduino IDE 1.6.6. This file can be used to override properties defined in boards.txt or define new properties without modifying boards.txt . It must be placed in the same folder as the boards.txt it supplements. Platform bundled libraries \u00b6 Arduino libraries placed in the platform's libraries subfolder are accessible when a board of the platform, or of a platform that references the platform's core, is selected. When any other board is selected, the platform bundled libraries are inaccessible. These are often architecture-specific libraries (e.g., SPI, Wire) which must be implemented differently for each architecture. Platform bundled libraries may be used to provide specialized versions of libraries which use the dependency resolution system to override built-in libraries. For more information, see the Arduino library specification . keywords.txt \u00b6 As of Arduino IDE 1.6.6, per-platform keywords can be defined by adding a keywords.txt file to the platform's architecture folder. These keywords are only highlighted in the Arduino IDE when one of the boards of that platform are selected. This file follows the same format as the keywords.txt used in libraries. Post-install script \u00b6 After Boards Manager finishes installation of a platform, it checks for the presence of a script named: post_install.bat - when running on Windows post_install.sh - when running on any non-Windows operating system If present, the script is executed. This script may be used to configure the user's system for the platform, such as installing drivers. The circumstances under which the post-install script will run are different depending on which Arduino development software is in use: Arduino IDE 1.x : runs the script when the installed platform is signed with Arduino's private key. Arduino IDE 2.x : runs the script for any installed platform. Arduino CLI : (since 0.12.0) runs the script for any installed platform when Arduino CLI is in \"interactive\" mode. This behavior can be configured Pre-uninstall script \u00b6 Before Boards Manager starts uninstalling a platform, it checks for the presence of a script named: pre_uninstall.bat - when running on Windows pre_uninstall.sh - when running on any non-Windows operating system If present, the script is executed. This script may be used to configure the user's system for the removal of drivers, stopping background programs and execute any action that should be performed before the platform files are removed. The circumstances under which the pre-uninstall script will run are different depending on which Arduino development software is in use: Arduino CLI : runs the script for any installed platform when Arduino CLI is in \"interactive\" mode. This behavior can be configured","title":"Platform specification"},{"location":"platform-specification/#hardware-folders-structure","text":"The new hardware folders have a hierarchical structure organized in two levels: the first level is the vendor/maintainer the second level is the supported architecture A vendor/maintainer can have multiple supported architectures. For example, below we have three hardware vendors called \"arduino\", \"yyyyy\" and \"xxxxx\": hardware/arduino/avr/... - Arduino - AVR Boards hardware/arduino/sam/... - Arduino - SAM (32bit ARM) Boards hardware/yyyyy/avr/... - Yyy - AVR hardware/xxxxx/avr/... - Xxx - AVR The vendor \"arduino\" has two supported architectures (AVR and SAM), while \"xxxxx\" and \"yyyyy\" have only AVR. Architecture values are case sensitive (e.g. AVR != avr ). If possible, follow existing architecture name conventions when creating hardware packages. Use the vendor folder name to differentiate your package. The architecture folder name is used to determine library compatibility and to permit referencing resources from another core of the same architecture, so use of a non-standard architecture name can have a harmful effect.","title":"Hardware Folders structure"},{"location":"platform-specification/#architecture-configurations","text":"Each architecture must be configured through a set of configuration files: platform.txt contains definitions for the CPU architecture used (compiler, build process parameters, tools used for upload, etc.) boards.txt contains definitions for the boards (board name, parameters for building and uploading sketches, etc.) programmers.txt contains definitions for external programmers (typically used to burn bootloaders or sketches on a blank CPU/board)","title":"Architecture configurations"},{"location":"platform-specification/#configuration-files-format","text":"A configuration file is a list of \"key=value\" properties. The value of a property can be expressed using the value of another property by putting its name inside brackets \"{\" \"}\". For example: compiler.path=/tools/g++_arm_none_eabi/bin/ compiler.c.cmd=arm-none-eabi-gcc [....] recipe.c.o.pattern={compiler.path}{compiler.c.cmd} In this example the property recipe.c.o.pattern will be set to /tools/g++_arm_none_eabi/bin/arm-none-eabi-gcc , which is the composition of the properties compiler.path and compiler.c.cmd .","title":"Configuration files format"},{"location":"platform-specification/#comments","text":"Lines starting with # are treated as comments and will be ignored. # Like in this example # -------------------- # I'm a comment!","title":"Comments"},{"location":"platform-specification/#automatic-property-override-for-specific-os","text":"We can specify an OS-specific value for a property. For example the following file: tools.bossac.cmd=bossac tools.bossac.cmd.windows=bossac.exe will set the property tools.bossac.cmd to the value bossac on Linux and macOS and bossac.exe on Windows. Supported suffixes are .linux , .windows and .macosx .","title":"Automatic property override for specific OS"},{"location":"platform-specification/#global-predefined-properties","text":"The following automatically generated properties can be used globally in all configuration files: {runtime.platform.path} : the absolute path of the board platform folder (i.e. the folder containing boards.txt) {runtime.hardware.path} : the absolute path of the hardware folder (i.e. the folder containing the board platform folder) {runtime.ide.path} : the absolute path of the Arduino IDE or Arduino CLI folder {runtime.ide.version} : the version number of the Arduino IDE as a number (this uses two digits per version number component, and removes the points and leading zeroes, so Arduino IDE 1.8.3 becomes 01.08.03 which becomes runtime.ide.version=10803 ). When using Arduino development software other than the Arduino IDE, this is set to a meaningless version number. {ide_version} : Compatibility alias for {runtime.ide.version} {runtime.os} : the running OS (\"linux\", \"windows\", \"macosx\") {software} : set to \"ARDUINO\" {name} : platform vendor name {_id} : board ID of the board being compiled for {build.fqbn} : the FQBN (fully qualified board name) of the board being compiled for. The FQBN follows the format: VENDOR:ARCHITECTURE:BOARD_ID[:MENU_ID=OPTION_ID[,MENU2_ID=OPTION_ID ...]] {build.source.path} : Path to the sketch being compiled. If the sketch is in an unsaved state, it will the path of its temporary folder. {build.library_discovery_phase} : set to 1 during library discovery and to 0 during normal build. A macro defined with this property can be used to disable the inclusion of heavyweight headers during discovery to reduce compilation time. This property was added in Arduino IDE 1.8.14/Arduino Builder 1.6.0/Arduino CLI 0.12.0. Note: with the same intent, -DARDUINO_LIB_DISCOVERY_PHASE was added to recipe.preproc.macros during library discovery in Arduino Builder 1.5.3/Arduino CLI 0.10.0. That flag was replaced by the more flexible {build.library_discovery_phase} property. {compiler.optimization_flags} : see \"Sketch debugging configuration\" for details {extra.time.utc} : Unix time (seconds since 1970-01-01T00:00:00Z) according to the machine the build is running on {extra.time.local} : Unix time with local timezone and DST offset {extra.time.zone} : local timezone offset without the DST component {extra.time.dst} : local daylight savings time offset Compatibility note: Versions before Arduino IDE 1.6.0 only used one digit per version number component in {runtime.ide.version} (so 1.5.9 was 159 , not 10509 ).","title":"Global Predefined properties"},{"location":"platform-specification/#platformtxt","text":"The platform.txt file contains information about a platform's specific aspects (compilers command line flags, paths, system libraries, etc.). The following meta-data must be defined: name=Arduino AVR Boards version=1.5.3 The name will be shown as the Arduino IDE's Board menu section title or the Name field of arduino-cli core list 's output for the platform. The version is currently unused, it is reserved for future use (probably together with the Boards Manager to handle dependencies on cores).","title":"platform.txt"},{"location":"platform-specification/#build-process","text":"The platform.txt file is used to configure the build process . This is done through a list of recipes . Each recipe is a command line expression that explains how to call the compiler (or other tools) for every build step and which parameter should be passed. The Arduino development software, before starting the build, determines the list of files to compile. The list is composed of: the user's Sketch source code in the selected board's Core source code in the Libraries used in the sketch A temporary folder is created to store the build artifacts whose path is available through the global property {build.path} . A property {build.project_name} with the name of the project and a property {build.arch} with the name of the architecture is set as well. {build.path} : The path to the temporary folder to store build artifacts {build.project_name} : The project name {build.arch} : The MCU architecture (avr, sam, etc...) There are some other {build.xxx} properties available, that are explained in the boards.txt section of this guide.","title":"Build process"},{"location":"platform-specification/#security-credential-properties","text":"Some of them allow specifying trusted security credentials (signing and encryption keys) that can be used by a \"secure boot\" system : build.keys.keychain : for the directory containing the keys build.keys.sign_key : for the signing key build.keys.encrypt_key : for the encryption key If any of these properties are defined, the others are required. These properties can be overwritten respectively with --keys-keychain , --sign-key , --encrypt-key compile flags in the Arduino CLI.","title":"Security credential properties"},{"location":"platform-specification/#recipes-to-compile-source-code","text":"We said that the Arduino development software determines a list of files to compile. Each file can be source code written in C (.c files), C++ (.cpp/.cxx/.cc files) or Assembly (.S files). Every language is compiled using its respective recipe : recipe.c.o.pattern : for C files (.c) recipe.cpp.o.pattern : for CPP files (.cpp/.cxx/.cc) recipe.S.o.pattern : for Assembly files (.S) (an optional recipe.cxx.o.pattern and recipe.cc.o.pattern may be provided, if .cxx or .cc needs special handling, but it's not required and we do not recommend it) The recipes can be built concatenating the following automatically generated properties (for each file compiled): {includes} : the list of include paths in the format \"-I/include/path -I/another/path....\" {source_file} : the path to the source file {object_file} : the path to the output file For example the following is used for AVR: ## Compiler global definitions compiler.path={runtime.ide.path}/tools/avr/bin/ compiler.c.cmd=avr-gcc compiler.c.flags=-c -g -Os -w -ffunction-sections -fdata-sections -MMD [......] ## Compile c files recipe.c.o.pattern=\"{compiler.path}{compiler.c.cmd}\" {compiler.c.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {build.extra_flags} {includes} \"{source_file}\" -o \"{object_file}\" Note that some properties, like {build.mcu} for example, are taken from the boards.txt file which is documented later in this specification.","title":"Recipes to compile source code"},{"location":"platform-specification/#recipes-to-build-the-corea-archive-file","text":"The core of the selected board is compiled as described in the previous paragraph, but the object files obtained from the compile are also archived into a static library named core.a using the recipe.ar.pattern . The recipe can be built concatenating the following automatically generated properties: {object_file} : the object file to include in the archive {archive_file_path} : fully qualified archive file (ex. \"/path/to/core.a\"). This property was added in Arduino IDE 1.6.6/arduino builder 1.0.0-beta12 as a replacement for {build.path}/{archive_file} . {archive_file} : the name of the resulting archive (ex. \"core.a\") For example, Arduino provides the following for AVR: compiler.ar.cmd=avr-ar compiler.ar.flags=rcs [......] ## Create archives recipe.ar.pattern=\"{compiler.path}{compiler.ar.cmd}\" {compiler.ar.flags} \"{archive_file_path}\" \"{object_file}\"","title":"Recipes to build the core.a archive file"},{"location":"platform-specification/#recipes-for-linking","text":"All the artifacts produced by the previous steps (sketch object files, libraries object files and core.a archive) are linked together using the recipe.c.combine.pattern . The recipe can be built concatenating the following automatically generated properties: {object_files} : the list of object files to include in the archive (\"file1.o file2.o ....\") {archive_file_path} : fully qualified archive file (ex. \"/path/to/core.a\"). This property was added in Arduino IDE 1.6.6/arduino builder 1.0.0-beta12 as a replacement for {build.path}/{archive_file} . {archive_file} : the name of the core archive file (ex. \"core.a\") {compiler.libraries.ldflags} : the linking flags for precompiled libraries, which consist of automatically generated -L flags for the library path and -l flags for library files, as well as any custom flags provided via the ldflags field of library.properties. In order to support precompiled libraries, platform.txt must contain a definition of compiler.libraries.ldflags , to which any automatically generated flags will be appended. Support for precompiled libraries was added in Arduino IDE 1.8.6/arduino-builder 1.4.0. For example the following is used for AVR: compiler.c.elf.flags=-Os -Wl,--gc-sections compiler.c.elf.cmd=avr-gcc compiler.libraries.ldflags= [......] ## Combine gc-sections, archives, and objects recipe.c.combine.pattern=\"{compiler.path}{compiler.c.elf.cmd}\" {compiler.c.elf.flags} -mmcu={build.mcu} -o \"{build.path}/{build.project_name}.elf\" {object_files} {compiler.libraries.ldflags} \"{archive_file_path}\" \"-L{build.path}\" -lm","title":"Recipes for linking"},{"location":"platform-specification/#recipes-for-extraction-of-executable-files-and-other-binary-data","text":"An arbitrary number of extra steps can be performed at the end of objects linking. These steps can be used to extract binary data used for upload and they are defined by a set of recipes with the following format: recipe.objcopy.FILE_EXTENSION_1.pattern=[.....] recipe.objcopy.FILE_EXTENSION_2.pattern=[.....] [.....] FILE_EXTENSION_x must be replaced with the extension of the extracted file, for example the AVR platform needs two files a .hex and a .eep , so we made two recipes like: recipe.objcopy.eep.pattern=[.....] recipe.objcopy.hex.pattern=[.....] There are no specific properties set by the Arduino development software here. A full example for the AVR platform can be: ## Create eeprom recipe.objcopy.eep.pattern=\"{compiler.path}{compiler.objcopy.cmd}\" {compiler.objcopy.eep.flags} \"{build.path}/{build.project_name}.elf\" \"{build.path}/{build.project_name}.eep\" ## Create hex recipe.objcopy.hex.pattern=\"{compiler.path}{compiler.elf2hex.cmd}\" {compiler.elf2hex.flags} \"{build.path}/{build.project_name}.elf\" \"{build.path}/{build.project_name}.hex\"","title":"Recipes for extraction of executable files and other binary data"},{"location":"platform-specification/#recipes-to-compute-binary-sketch-size","text":"At the end of the build the Arduino development software shows the final binary sketch size to the user. The size is calculated using the recipe recipe.size.pattern . The output of the command executed using the recipe is parsed through the regular expressions set in the properties: recipe.size.regex : Program storage space used. recipe.size.regex.data : Dynamic memory used by global variables. For AVR we have: compiler.size.cmd=avr-size [....] ## Compute size recipe.size.pattern=\"{compiler.path}{compiler.size.cmd}\" -A \"{build.path}/{build.project_name}.hex\" recipe.size.regex=^(?:\\.text|\\.data|\\.bootloader)\\s+([0-9]+).* recipe.size.regex.data=^(?:\\.data|\\.bss|\\.noinit)\\s+([0-9]+).* Two properties can be used to define the total available memory: {upload.maximum_size} : available program storage space {upload.maximum_data_size} : available dynamic memory for global variables If the binary sketch size exceeds the value of these properties, the compilation process fails. This information is displayed in the console output after compiling a sketch, along with the relative memory usage value: Sketch uses 924 bytes (2%) of program storage space. Maximum is 32256 bytes. Global variables use 9 bytes (0%) of dynamic memory, leaving 2039 bytes for local variables. Maximum is 2048 bytes.","title":"Recipes to compute binary sketch size"},{"location":"platform-specification/#recipes-to-compute-binary-sketch-size-for-more-complex-systems-since-arduino-cli-0210","text":"A platform may provide a tool for the specific purpose to analyze the binaries and compute the sketch size and memory usage statistics. This is especially useful for boards with non-trivial memory layouts where the classic reg-exp based approach is not sufficient. The command line to run is specified with the recipe recipe.advanced_size.pattern . The expected output from the tool is a JSON object with the following format: { \"output\" : \"Your sketch uses 2200 bytes of program memory out of 8192 (27%)\\nThe static RAM used is 200 bytes (of 2048 max)\" , \"severity\" : \"info\" , \"sections\" : [ { \"name\" : \"text\" , \"size\" : 2200 , \"max_size\" : 8192 }, { \"name\" : \"data\" , \"size\" : 200 , \"max_size\" : 2048 } ] } The meaning of the fields is the following: output : is a preformatted text that is displayed as-is in console. severity : indicates the warning level of the output messages, it must be info , warning or error . Warnings and errors are displayed in red (or in a different color than normal output). Errors will make the build/upload fail. sections : is an array containing the memory sections and their usage level. This array is used to report memory usage in a machine-readable format if requested by the user. Each item represents a memory section and may contain the following fields name : an identifier for the section size : the sketch size for the section max_size : the maximum size for the section When the severity is set to error the build/upload is interrupted and an exception is returned to the calling process. In this case an extra exception message must be provided through the error field, for example: { \"output\" : \"Your sketch uses 12200 bytes of program memory out of 8192 (149%))\\nThe static RAM used is 200 bytes (of 2048 max)\" , \"severity\" : \"error\" , \"error\" : \"Sketch is too big!\" , \"sections\" : [ { \"name\" : \"text\" , \"size\" : 12200 , \"max_size\" : 8192 }, { \"name\" : \"data\" , \"size\" : 200 , \"max_size\" : 2048 } ] } This means that the sections part is NOT used to automatically check if the sketch size exceeds the available memory: this check is now delegated to the tool that must report a \"severity\":\"error\" with a meaningful error message. If both recipe.size.pattern and recipe.advanced_size.pattern are present then recipe.advanced_size.pattern will be used. Since the recipe.advanced_size.pattern feature is available starting from Arduino CLI>=0.21.0, to maximize backward compatibility, we recommend to provide both recipe.size.pattern and recipe.advanced_size.pattern if possible, so the old versions of the IDE/CLI will continue to work (even with a less detailed memory usage report).","title":"Recipes to compute binary sketch size for more complex systems (since Arduino CLI &gt;=0.21.0)"},{"location":"platform-specification/#recipes-to-export-compiled-binary","text":"When you do a Sketch > Export compiled Binary in the Arduino IDE, the compiled binary is copied from the build folder to the sketch folder. Two binaries are copied; the standard binary, and a binary that has been merged with the bootloader file (identified by the .with_bootloader in the filename). Two recipes affect how Export compiled Binary works: recipe.output.tmp_file : Defines the binary's filename in the build folder. recipe.output.save_file : Defines the filename to use when copying the binary file to the sketch folder. As with other processes, there are pre and post build hooks for Export compiled Binary . The recipe.hooks.savehex.presavehex.NUMBER.pattern and recipe.hooks.savehex.postsavehex.NUMBER.pattern hooks (but not recipe.output.tmp_file and recipe.output.save_file ) can be built concatenating the following automatically generated properties: {sketch_path} : the absolute path of the sketch folder","title":"Recipes to export compiled binary"},{"location":"platform-specification/#recipe-to-run-the-preprocessor","text":"For detecting which libraries to include in the build, and for generating function prototypes, (just) the preprocessor is run. For this, the recipe.preproc.macros recipe exists. This recipe must run the preprocessor on a given source file, writing the preprocessed output to a given output file, and generate (only) preprocessor errors on standard output. This preprocessor run should happen with the same defines and other preprocessor-influencing-options as for normally compiling the source files. The recipes can be built concatenating other automatically generated properties (for each file compiled): {includes} : the list of include paths in the format \"-I/include/path -I/another/path....\" {source_file} : the path to the source file {preprocessed_file_path} : the path to the output file For example the following is used for AVR: preproc.macros.flags=-w -x c++ -E -CC recipe.preproc.macros=\"{compiler.path}{compiler.cpp.cmd}\" {compiler.cpp.flags} {preproc.macros.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} \"{source_file}\" -o \"{preprocessed_file_path}\" Note that the {preprocessed_file_path} might point to (your operating system's equivalent) of /dev/null . In this case, also passing -MMD to gcc is problematic, as it will try to generate a dependency file called /dev/null.d , which will usually result in a permission error. Since platforms typically include {compiler.cpp.flags} here, which includes -MMD , the -MMD option is automatically filtered out of the recipe.preproc.macros recipe to prevent this error. If recipe.preproc.macros is not defined, it is automatically generated from recipe.cpp.o.pattern . Note that older Arduino IDE versions used the recipe.preproc.includes recipe (which is not documented here) to determine includes. Since Arduino IDE 1.6.7 (arduino-builder 1.2.0) this was changed and recipe.preproc.includes is no longer used.","title":"Recipe to run the preprocessor"},{"location":"platform-specification/#pre-and-post-build-hooks-since-arduino-ide-165","text":"You can specify pre and post actions around each recipe. These are called \"hooks\". Here is the complete list of available hooks: recipe.hooks.prebuild.NUMBER.pattern (called before sketch preprocessing and libraries discovery) recipe.hooks.sketch.prebuild.NUMBER.pattern (called before sketch compilation) recipe.hooks.sketch.postbuild.NUMBER.pattern (called after sketch compilation) recipe.hooks.libraries.prebuild.NUMBER.pattern (called before libraries compilation) recipe.hooks.libraries.postbuild.NUMBER.pattern (called after libraries compilation) recipe.hooks.core.prebuild.NUMBER.pattern (called before core compilation) recipe.hooks.core.postbuild.NUMBER.pattern (called after core compilation) recipe.hooks.linking.prelink.NUMBER.pattern (called before linking) recipe.hooks.linking.postlink.NUMBER.pattern (called after linking) recipe.hooks.objcopy.preobjcopy.NUMBER.pattern (called before objcopy recipes execution) recipe.hooks.objcopy.postobjcopy.NUMBER.pattern (called after objcopy recipes execution) recipe.hooks.savehex.presavehex.NUMBER.pattern (called before savehex recipe execution) recipe.hooks.savehex.postsavehex.NUMBER.pattern (called after savehex recipe execution) Example: you want to execute two commands before sketch compilation and one after linking. You'll add to your platform.txt: recipe.hooks.sketch.prebuild.1.pattern=echo sketch compilation started at recipe.hooks.sketch.prebuild.2.pattern=date recipe.hooks.linking.postlink.1.pattern=echo linking is complete Warning: hooks recipes are sorted before execution. If you need to write more than 10 recipes for a single hook, pad the number with a zero, for example: recipe.hooks.sketch.prebuild.01.pattern=echo 1 recipe.hooks.sketch.prebuild.02.pattern=echo 2 ... recipe.hooks.sketch.prebuild.11.pattern=echo 11 Note: all the pre* hooks are executed while producing the \"compilation database\" (a JSON file with the list of commands to run to compile the sketch), but the post* hooks and all compile commands are skipped. See the arduino-cli compile command reference for more info.","title":"Pre and post build hooks (since Arduino IDE 1.6.5)"},{"location":"platform-specification/#global-platformtxt","text":"Properties defined in a platform.txt created in the hardware subfolder of the Arduino IDE installation folder will be used for all platforms and will override local properties. This feature is currently only available when using the Arduino IDE.","title":"Global platform.txt"},{"location":"platform-specification/#platformlocaltxt","text":"Introduced in Arduino IDE 1.5.7. This file can be used to override properties defined in platform.txt or define new properties without modifying platform.txt (e.g. when platform.txt is tracked by a version control system). It must be placed in the same folder as the platform.txt it supplements.","title":"platform.local.txt"},{"location":"platform-specification/#boardstxt","text":"This file contains definitions and metadata for the boards supported by the platform. Boards are referenced by their short name, the board ID. The settings for a board are defined through a set of properties with keys having the board ID as prefix. For example, the board ID chosen for the Arduino Uno board is \"uno\". An extract of the Uno board configuration in boards.txt looks like: [......] uno.name=Arduino Uno uno.build.mcu=atmega328p uno.build.f_cpu=16000000L uno.build.board=AVR_UNO uno.build.core=arduino uno.build.variant=standard [......] Note that all the relevant keys start with the board ID uno.xxxxx . The uno.name property contains the human-friendly name of the board. This is shown in the Board menu of the IDEs, the \"Board Name\" field of Arduino CLI's text output, or the \"name\" key of Arduino CLI's JSON output. The uno.build.board property is used to set a compile-time macro ARDUINO_{build.board} to allow use of conditional code between #ifdef s. If not defined, a build.board value is automatically generated and the Arduino development software outputs a warning. In this case the macro defined at compile time will be ARDUINO_AVR_UNO . The other properties will override the corresponding global properties when the user selects the board. These properties will be globally available, in other configuration files too, without the board ID prefix: uno.build.mcu => build.mcu uno.build.f_cpu => build.f_cpu uno.build.board => build.board uno.build.core => build.core uno.build.variant => build.variant This explains the presence of {build.mcu} or {build.board} in the platform.txt recipes: their value is overwritten respectively by {uno.build.mcu} and {uno.build.board} when the Uno board is selected! Moreover the following properties are automatically generated: {build.core.path} : The path to the selected board's core folder (inside the core platform , for example hardware/arduino/avr/core/arduino) {build.system.path} : The path to the core platform 's system folder if available (for example hardware/arduino/sam/system) {build.variant.path} : The path to the selected board variant folder (inside the variant platform , for example hardware/arduino/avr/variants/micro) If the platform supports pluggable discovery it may also declare a set of upload_port.* properties, these properties will be used to identify a board by the discovery process when plugged in. For example we could declare a series of upload_port.vid and upload_port.pid properties for the Uno like so: uno.upload_port.vid.0=0x2341 uno.upload_port.pid.0=0x0043 uno.upload_port.vid.1=0x2341 uno.upload_port.pid.1=0x0001 uno.upload_port.vid.2=0x2A03 uno.upload_port.pid.2=0x0043 uno.upload_port.vid.3=0x2341 uno.upload_port.pid.3=0x0243 In this case we're using the board's USB VID/PID pair to identify it but upload_port.* properties can be anything that can help identify a certain board. For more detailed information see the board identification section of the pluggable discovery documentation.","title":"boards.txt"},{"location":"platform-specification/#cores","text":"Cores are placed inside the cores subfolder. Many different cores can be provided within a single platform. For example the following could be a valid platform layout: hardware/arduino/avr/cores/ : Cores folder for \"avr\" architecture, package \"arduino\" hardware/arduino/avr/cores/arduino : the Arduino Core hardware/arduino/avr/cores/rtos : a hypothetical RTOS Core The board's property build.core is used to find the core that must be compiled and linked when the board is selected. For example if a board needs the Arduino core the build.core variable should be set to: uno.build.core=arduino or if the RTOS core is needed, to: uno.build.core=rtos In any case the contents of the selected core folder are compiled and the core folder path is added to the include files search path.","title":"Cores"},{"location":"platform-specification/#arduinocore-api","text":"Although much of the implementation of a core is architecture-specific, the standardized core API and the hardware independent components should be the same for every Arduino platform. In order to free platform authors from the burden of individually maintaining duplicates of this common code, Arduino has published it in a dedicated repository from which it may easily be shared by all platforms. In addition to significantly reducing the effort required to write and maintain a core, ArduinoCore-API assists core authors in providing the unprecedented level of portability between platforms that is a hallmark of the Arduino project. See the arduino/ArduinoCore-API repository for more information.","title":"ArduinoCore-API"},{"location":"platform-specification/#core-variants","text":"Sometimes a board needs some tweaking on the default core configuration (different pin mapping is a typical example). A core variant folder is an additional folder that is compiled together with the core and allows platform developers to easily add specific configurations. Variants must be placed inside the variants folder in the current architecture. For example, Arduino AVR Boards uses: hardware/arduino/avr/cores : Core folder for \"avr\" architecture, \"arduino\" package hardware/arduino/avr/cores/arduino : The Arduino core hardware/arduino/avr/variants/ : Variant folder for \"avr\" architecture, \"arduino\" package hardware/arduino/avr/variants/standard : ATmega328 based variants hardware/arduino/avr/variants/leonardo : ATmega32U4 based variants In this example, the Arduino Uno board needs the standard variant so the build.variant property is set to standard : [.....] uno.build.core=arduino uno.build.variant=standard [.....] instead, the Arduino Leonardo board needs the leonardo variant: [.....] leonardo.build.core=arduino leonardo.build.variant=leonardo [.....] In the example above, both Uno and Leonardo share the same core but use different variants. In any case, the contents of the selected variant folder path is added to the include search path and its contents are compiled and linked with the sketch. The parameter build.variant.path is automatically generated.","title":"Core Variants"},{"location":"platform-specification/#board-vidpid","text":"USB vendor IDs (VID) and product IDs (PID) identify USB devices to the computer. If the board uses a unique VID/PID pair, it may be defined in boards.txt: uno.vid.0=0x2341 uno.pid.0=0x0043 uno.vid.1=0x2341 uno.pid.1=0x0001 The vid and pid properties end with an arbitrary number, which allows multiple VID/PID pairs to be defined for a board. The snippet above is defining the 2341:0043 and 2341:0001 pairs used by Uno boards. The Arduino development software uses the vid and pid properties to automatically identify the boards connected to the computer. This convenience feature isn't available for boards that don't present a unique VID/PID pair.","title":"Board VID/PID"},{"location":"platform-specification/#serial-monitor-control-signal-configuration","text":"Arduino boards that use a USB to TTL serial adapter chip for communication with the computer (e.g., Uno, Nano, Mega) often utilize the DTR (data terminal ready) or RTS (request to send) serial control signals as a mechanism for the Arduino development software to trigger a reset of the primary microcontroller. The adapter's DTR and RTS pins are set LOW when the control signals are asserted by the computer and this LOW level is converted into a pulse on the microcontroller's reset pin by an \"auto-reset\" circuit on the board. The auto-reset system is necessary to activate the bootloader at the start of an upload. This system is also used to reset the microcontroller when Serial Monitor is started. The reset is convenient because it allows viewing all serial output from the time the program starts. In case the reset caused by opening Serial Monitor is not desirable, the control signal assertion behavior of Serial Monitor is configurable via the serial.disableDTR and serial.disableRTS properties. Setting these properties to true will prevent Serial Monitor from asserting the control signals when that board is selected: [.....] uno.serial.disableDTR=true uno.serial.disableRTS=true [.....]","title":"Serial Monitor control signal configuration"},{"location":"platform-specification/#hiding-boards","text":"Adding a hide property to a board definition causes it to not be shown in the Arduino IDE's Tools > Board menu. uno.hide= The value of the property is ignored; it's the presence or absence of the property that controls the board's visibility.","title":"Hiding boards"},{"location":"platform-specification/#programmerstxt","text":"This file contains definitions for external programmers. These programmers are used by: The Tools > Burn Bootloader feature of the IDEs and arduino-cli burn-bootloader The Sketch > Upload Using Programmer feature of the IDEs and arduino-cli upload --programmer <programmer ID> programmers.txt works similarly to boards.txt . Programmers are referenced by their short name: the programmer ID. The settings for a programmer are defined through a set of properties with keys that use the programmer ID as prefix. For example, the programmer ID chosen for the \"Arduino as ISP\" programmer is \"arduinoasisp\". The definition of this programmer in programmers.txt looks like: [......] arduinoasisp.name=Arduino as ISP arduinoasisp.protocol=stk500v1 arduinoasisp.program.speed=19200 arduinoasisp.program.tool=avrdude arduinoasisp.program.extra_params=-P{serial.port} -b{program.speed} [......] These properties can only be used in the recipes of the actions that use the programmer ( erase , bootloader , and program ). The arduinoasisp.name property defines the human-friendly name of the programmer. This is shown in the Tools > Programmer menu of the IDEs and the output of arduino-cli upload --programmer list and arduino-cli burn-bootloader --programmer list . In Arduino IDE 1.8.12 and older, all programmers of all installed platforms were made available for use. Starting with Arduino IDE 1.8.13 (and in all relevant versions of other Arduino development tools), only the programmers defined by the board and core platform of the currently selected board are available. For this reason, platforms may now need to define copies of the programmers that were previously assumed to be provided by another platform.","title":"programmers.txt"},{"location":"platform-specification/#set-a-default-programmer-for-a-board-since-arduino-cli-0350-arduino-ide-230","text":"A default programmer for each board may be specified through the programmer.default directive in the board definition: BOARD_ID.programmer.default=PROGRAMMER_ID The default programmer will be selected automatically if the user do not specifiy or select another programmer. This may be useful for boards with an on-board programmer/debugger. For example if we want to set Atmel ICE as the default programmer for the Arduino UNO we would add the following line to the boards.txt file: uno.programmer.default=atmel-ice","title":"Set a default programmer for a board (since Arduino CLI &gt;=0.35.0, Arduino IDE &gt;=2.3.0)"},{"location":"platform-specification/#tools","text":"The Arduino development software uses external command line tools to upload the compiled sketch to the board or to burn bootloaders using external programmers. For example, avrdude is used for AVR based boards and bossac for SAM based boards, but there is no limit, any command line executable can be used. The command line parameters are specified using recipes in the same way used for platform build process. Tools are configured inside the platform.txt file. Every Tool is identified by a short name, the Tool ID. A tool can be used for different purposes: upload a sketch to the target board (using a bootloader preinstalled on the board) program a sketch to the target board using an external programmer erase the target board's flash memory using an external programmer burn a bootloader into the target board using an external programmer Each action has its own recipe and its configuration is done through a set of properties having key starting with tools prefix followed by the tool ID and the action: [....] tools.avrdude.upload.pattern=[......] [....] tools.avrdude.program.pattern=[......] [....] tools.avrdude.erase.pattern=[......] [....] tools.avrdude.bootloader.pattern=[......] [.....] A tool may have some actions not defined (it's not mandatory to define all four actions). Let's look at how the upload action is defined for avrdude: tools.avrdude.path={runtime.tools.avrdude.path} tools.avrdude.cmd.path={path}/bin/avrdude tools.avrdude.config.path={path}/etc/avrdude.conf tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" -p{build.mcu} -c{upload.port.protocol} -P{upload.port.address} -b{upload.speed} -D \"-Uflash:w:{build.path}/{build.project_name}.hex:i\" The tool configuration properties are available globally without the prefix. For example, the tools.avrdude.cmd.path property can be used as {cmd.path} inside the recipe, and the same happens for all the other avrdude configuration variables.","title":"Tools"},{"location":"platform-specification/#how-to-retrieve-tools-path-via-runtimetools-properties","text":"A {runtime.tools.TOOLNAME.path} and {runtime.tools.TOOLNAME-TOOLVERSION.path} property is generated for the tools provided by the current platform and for any other platform installed via Boards Manager. See {runtime.tools.*.path} rules for details on how the runtime properties are determined.","title":"How to retrieve tools path via {runtime.tools.*} properties"},{"location":"platform-specification/#environment-variables","text":"All the tools launched to compile or upload a sketch will have the following environment variable set: ARDUINO_USER_AGENT : contains the name and version of the client used by the user in HTTP user-agent format , for example \"arduino-cli/0.21.0\" . It may also contain multiple space-delimited entries like \"arduino-cli/0.21.0 ArduinoIDE/2.0.0-rc1\" if this information is available.","title":"Environment variables"},{"location":"platform-specification/#pluggable-discovery","text":"Discovery tools are a special kind of tool used to find supported boards. A platform must declare one or more Pluggable Discoveries in its platform.txt . Discoveries can be referenced from other packages, including the builtin dummy package which contains the traditional discoveries. There are two different syntaxes to declare discoveries. If the platform uses just one discovery: pluggable_discovery.required=VENDOR_ID:DISCOVERY_NAME instead if it needs multiple discoveries: pluggable_discovery.required.0=VENDOR_ID:DISCOVERY_0_NAME pluggable_discovery.required.1=VENDOR_ID:DISCOVERY_1_NAME A platform that supports only boards connected via serial ports can easily use the builtin package's serial-discovery without creating a custom pluggable discovery: pluggable_discovery.required=builtin:serial-discovery if it also supports boards connected via the network, it can use the builtin package's mdns-discovery : pluggable_discovery.required.0=builtin:serial-discovery pluggable_discovery.required.1=builtin:mdns-discovery Since the above syntax requires specifying a discovery via the discoveryDependencies field of the platform's package index , it might be cumbersome to use with manual installations. So we provide another syntax to ease development and beta testing: pluggable_discovery.DISCOVERY_ID.pattern=DISCOVERY_RECIPE DISCOVERY_ID must be replaced by a unique identifier for the particular discovery and DISCOVERY_RECIPE must be replaced by the command line to launch the discovery. An example could be: ## Teensy Ports Discovery pluggable_discovery.teensy.pattern=\"{runtime.tools.teensy_ports.path}/hardware/tools/teensy_ports\" -J2 We strongly recommend using this syntax only for development purposes and not on released platforms. For backward compatibility, if a platform does not declare any discovery (using the pluggable_discovery.* properties in platform.txt ) it will automatically inherit builtin:serial-discovery and builtin:mdns-discovery (but not other builtin discoveries that may be possibly added in the future). For detailed information, see the Pluggable Discovery specification .","title":"Pluggable discovery"},{"location":"platform-specification/#pluggable-monitor","text":"Monitor tools are a special kind of tool used to let the user communicate with the supported boards. A platform must declare one or more Pluggable Monitor in its platform.txt and bind them to a specific port protocol. Monitors can be referenced from other packages. The following directive is used to bind a specific monitor tool to a specific port protocol: pluggable_monitor.required.PROTOCOL=VENDOR_ID:MONITOR_NAME where PROTOCOL must be replaced with the port protocol identifier and VENDOR_ID:MONITOR_NAME must be replaced with the monitor tool identifier. The platform can support as many protocols as needed: pluggable_monitor.required.PROTOCOL1=VENDOR_ID:MONITOR_NAME1 pluggable_monitor.required.PROTOCOL2=VENDOR_ID:MONITOR_NAME2 ... The above syntax requires specifying a monitor tool via the monitorDependencies field of the platform's package index . Since it might be cumbersome to use with manual installations, we provide another syntax to ease development and beta testing: pluggable_monitor.pattern.PROTOCOL=MONITOR_RECIPE where MONITOR_RECIPE must be replaced by the command line to launch the monitor tool for the specific PROTOCOL . An example could be: pluggable_monitor.pattern.custom-ble=\"{runtime.tools.my-ble-monitor.path}/my-ble-monitor\" -H in this case the platform provides a new hypothetical custom-ble protocol monitor tool and the command line tool named my-ble-monitor is launched with the -H parameter to start the monitor tool. In this case the command line pattern may contain any extra parameter in the formula: this is different from the monitor tools installed through the monitorDependencies field that must run without any command line parameter. We strongly recommend using this syntax only for development purposes and not on released platforms.","title":"Pluggable monitor"},{"location":"platform-specification/#built-in-monitors","text":"If a platform supports only boards connected via serial ports it can easily use the builtin:serial-monitor tool without creating a custom pluggable monitor: pluggable_monitor.required.serial=builtin:serial-monitor","title":"Built-in monitors"},{"location":"platform-specification/#backward-compatibility","text":"For backward compatibility, if a platform does not declare any discovery or monitor tool (using the pluggable_discovery.* or pluggable_monitor.* properties in platform.txt respectively) it will automatically inherit builtin:serial-monitor (but not other builtin monitor tools that may be possibly added in the future). This will allow all legacy non-pluggable platforms to migrate to pluggable monitor without disruption. For detailed information, see the Pluggable Monitor specification .","title":"Backward compatibility"},{"location":"platform-specification/#port-configuration","text":"Each pluggable monitor has its own default settings that can be overridden using the following board properties: BOARD_ID.monitor_port.PROTOCOL.SETTING_NAME=SETTING_VALUE where: BOARD_ID is the board identifier PROTOCOL is the port protocol SETTING_NAME and SETTING_VALUE are the port setting and the desired value For example, let's suppose that a board needs the baudrate setting of the serial port to be 9600 , then the corresponding properties in the boards.txt file will be: myboard.monitor_port.serial.baudrate=9600 The settings available in a specific pluggable monitor can be queried directly from it .","title":"Port configuration"},{"location":"platform-specification/#legacy-serialdisablerts-and-serialdisabledtr-properties","text":"In the old Arduino IDE (<=1.8.x) we used the properties: BOARD_ID.serial.disableRTS=true BOARD_ID.serial.disableDTR=true to disable RTS and DTR when opening the serial monitor. To keep backward compatibilty the properties above are automatically converted to the corresponding pluggable monitor properties: BOARD_ID.monitor_port.serial.rts=off BOARD_ID.monitor_port.serial.dtr=off","title":"Legacy serial.disableRTS and serial.disableDTR properties"},{"location":"platform-specification/#verbose-parameter","text":"It is possible for the user to enable verbosity from the Preferences panel of the IDEs or Arduino CLI's --verbose flag. This preference is transferred to the command line using the ACTION.verbose property (where ACTION is the action we are considering). When the verbose mode is enabled, the tools.TOOL_ID.ACTION.params.verbose property is copied into ACTION.verbose . When the verbose mode is disabled, the tools.TOOL_ID.ACTION.params.quiet property is copied into ACTION.verbose . Confused? Maybe an example will make things clear: tools.avrdude.upload.params.verbose=-v -v -v -v tools.avrdude.upload.params.quiet=-q -q tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" {upload.verbose} -p{build.mcu} -c{upload.protocol} -P{serial.port} -b{upload.speed} -D \"-Uflash:w:{build.path}/{build.project_name}.hex:i\" In this example if the user enables verbose mode, then {upload.params.verbose} is used in {upload.verbose} : tools.avrdude.upload.params.verbose => upload.verbose If the user didn't enable verbose mode, then {upload.params.quiet} is used in {upload.verbose} : tools.avrdude.upload.params.quiet => upload.verbose","title":"Verbose parameter"},{"location":"platform-specification/#sketch-upload-configuration","text":"The Upload action is triggered when the user clicks on the \"Upload\" button on the IDE toolbar or uses arduino-cli upload . Arduino uses the term \"upload\" for the process of transferring a program to the Arduino board. The upload.tool.<protocol_name> property determines the tool to be used for upload. A specific upload.tool.<protocol_name> property should be defined for every board in boards.txt: [......] uno.upload.tool.serial=avrdude [......] leonardo.upload.tool.serial=avrdude leonardo.upload.tool.network=arduino_ota [......] Multiple protocols can be defined for each board. When the user tries to upload using a protocol not supported by the board, it will fallback to default if one was defined: [......] uno.upload.tool.default=avrdude [......] leonardo.upload.tool.default=avrdude leonardo.upload.tool.network=arduino_ota [......] default is also used when no upload address is provided by the user. This can be used with tools that have built-in port detection (e.g., openocd ). For backward compatibility with IDE 1.8.15 and older the previous syntax is still supported: uno.upload.tool=avrdude The previous syntax is equivalent to: uno.upload.tool.default=avrdude Other upload parameters can also be defined for the board. For example, in the Arduino AVR Boards boards.txt we have: [.....] uno.name=Arduino Uno uno.upload.tool.serial=avrdude uno.upload.protocol=arduino uno.upload.maximum_size=32256 uno.upload.speed=115200 [.....] leonardo.name=Arduino Leonardo leonardo.upload.tool.serial=avrdude leonardo.upload.protocol=avr109 leonardo.upload.maximum_size=28672 leonardo.upload.speed=57600 leonardo.upload.use_1200bps_touch=true leonardo.upload.wait_for_upload_port=true [.....] Most {upload.XXXX} variables are used later in the avrdude upload recipe in platform.txt: [.....] tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" {upload.verbose} -p{build.mcu} -c{upload.port.protocol} -P{upload.port.address} -b{upload.speed} -D \"-Uflash:w:{build.path}/{build.project_name}.hex:i\" [.....] If necessary the same property can be defined multiple times for different protocols: leonardo.upload.serial.speed=57600 leonardo.upload.network.speed=19200 The two above properties will be available as {upload.speed} , the value will depend on the protocol used to upload.","title":"Sketch upload configuration"},{"location":"platform-specification/#properties-from-pluggable-discovery","text":"If a platform supports pluggable discovery it can also use the port's properties returned by a discovery. For example, the following port metadata coming from a pluggable discovery: { \"eventType\": \"add\", \"port\": { \"address\": \"/dev/ttyACM0\", \"label\": \"ttyACM0\", \"protocol\": \"serial\", \"protocolLabel\": \"Serial Port (USB)\", \"properties\": { \"pid\": \"0x804e\", \"vid\": \"0x2341\", \"serialNumber\": \"EBEABFD6514D32364E202020FF10181E\", \"name\": \"ttyACM0\" } } } will be available on the recipe as the variables: {upload.port.address} = /dev/ttyACM0 {upload.port.label} = ttyACM0 {upload.port.protocol} = serial {upload.port.protocolLabel} = Serial Port (USB) {upload.port.properties.pid} = 0x8043 {upload.port.properties.vid} = 0x2341 {upload.port.properties.serialNumber} = EBEABFD6514D32364E202020FF10181E {upload.port.properties.name} = ttyACM0 {serial.port} = /dev/ttyACM0 # for backward compatibility {serial.port.file} = ttyACM0 # only because protocol=serial Here another example: { \"eventType\": \"add\", \"port\": { \"address\": \"192.168.1.232\", \"label\": \"SSH on my-board (192.168.1.232)\", \"protocol\": \"ssh\", \"protocolLabel\": \"SSH Network port\", \"properties\": { \"macprefix\": \"AA:BB:CC\", \"macaddress\": \"AA:BB:CC:DD:EE:FF\" } } } that is translated to: {upload.port.address} = 192.168.1.232 {upload.port.label} = SSH on my-board (192.168.1.232) {upload.port.protocol} = ssh {upload.port.protocolLabel} = SSH Network port {upload.port.properties.macprefix} = AA:BB:CC {upload.port.properties.macaddress} = AA:BB:CC:DD:EE:FF {serial.port} = 192.168.1.232 # for backward compatibility This configuration, together with protocol selection, allows to remove the hardcoded network_pattern . Now we can replace the legacy recipe (split into multiple lines for clarity): tools.bossac.upload.network_pattern=\"{runtime.tools.arduinoOTA.path}/bin/arduinoOTA\" -address {serial.port} -port 65280 -sketch \"{build.path}/{build.project_name}.bin\" with: tools.arduino_ota.upload.pattern=\"{runtime.tools.arduinoOTA.path}/bin/arduinoOTA\" -address {upload.port.address} -port 65280 -sketch \"{build.path}/{build.project_name}.bin\"","title":"Properties from pluggable discovery"},{"location":"platform-specification/#user-provided-fields","text":"Some upload recipes might require custom fields that must be provided by the user, like username and password to upload over the network. In this case the recipe must use the special placeholder {upload.field.FIELD_NAME} , where FIELD_NAME must be declared separately in the recipe using the following format: tools.UPLOAD_RECIPE_ID.upload.field.FIELD_NAME=FIELD_LABEL tools.UPLOAD_RECIPE_ID.upload.field.FIELD_NAME.secret=true FIELD_LABEL is the label shown in the graphical prompt where the user is asked to enter the value for the field. The optional secret property should be set to true if the field is a secret (like a password or token). Let's see a complete example: tools.arduino_ota.upload.field.username=Username tools.arduino_ota.upload.field.password=Password tools.arduino_ota.upload.field.password.secret=true tools.arduino_ota.upload.pattern=\"{runtime.tools.arduinoOTA.path}/bin/arduinoOTA\" -address {upload.port.address} -port 65280 -username \"{upload.field.username} -password \"{upload.field.password}\" -sketch \"{build.path}/{build.project_name}.bin\" If a FIELD_LABEL is longer than 50 characters it will be truncated to 49 characters and an ellipsis ( \u2026 ) appended to it. For example this field: tools.arduino_ota.upload.field.some_field=This is a really long label that ideally must never be set by any platform will be shown to the user as: This is a really long label that ideally must nev\u2026","title":"User provided fields"},{"location":"platform-specification/#upload-verification","text":"Upload verification can be enabled via the Arduino IDE's File > Preferences > Verify code after upload or arduino-cli upload --verify . This uses a system similar to the verbose parameter . tools.TOOL_ID.ACTION.params.verify defines the value of the ACTION.verify property when verification is enabled and tools.TOOL_ID.ACTION.params.noverify the value when verification is disabled. The {ACTION.verify} property is only defined for the upload and program actions of upload.tool . Prior to Arduino IDE 1.6.9, tools.TOOL_ID.ACTION.params.verify/noverify were not supported and {upload.verify} was set to true / false according to the verification preference setting, while {program.verify} was left undefined. For this reason, backwards compatibility with older IDE versions requires the addition of definitions for the upload.verify and program.verify properties to platform.txt: [.....] tools.avrdude.upload.verify= [.....] tools.avrdude.program.verify= [.....] These definitions are overridden with the value defined by tools.TOOL_ID.ACTION.params.verify/noverify when a modern version of Arduino development software is in use.","title":"Upload verification"},{"location":"platform-specification/#1200-bps-bootloader-reset","text":"Some Arduino boards use a dedicated USB-to-serial chip, that takes care of restarting the main MCU (starting the bootloader) when the serial port is opened. However, boards that have a native USB connection (such as the Leonardo or Zero) will have to disconnect from USB when rebooting into the bootloader (after which the bootloader reconnects to USB and offers a new serial port for uploading). After the upload is complete, the bootloader disconnects from USB again, starts the sketch, which then reconnects to USB. Because of these reconnections, the standard restart-on-serial open will not work, since that would cause the serial port to disappear and be closed again. Instead, the sketch running on these boards interprets a bitrate of 1200 bps as a signal the bootloader should be started. To let the Arduino development software perform these steps, two board properties can be set to true : use_1200bps_touch causes the selected serial port to be briefly opened at 1200 bps (8N1) before starting the upload. wait_for_upload_port causes the upload procedure to wait for the serial port to (re)appear before and after the upload. This is only used when use_1200bps_touch is also set. When set, after doing the 1200 bps touch, the development software will wait for a new serial port to appear and use that as the port for uploads. Alternatively, if the original port does not disappear within a few seconds, the upload continues with the original port (which can be the case if the board was already put into bootloader manually, or the the disconnect and reconnect was missed). Additionally, after the upload is complete, the IDE again waits for a new port to appear (or the originally selected port to be present). Note that the IDE implementation of this 1200 bps touch has some peculiarities, and the newer arduino-cli implementation also seems different (does not wait for the port after the reset, which is probably only needed in the IDE to prevent opening the wrong port on the serial monitor, and does not have a shorter timeout when the port never disappears).","title":"1200 bps bootloader reset"},{"location":"platform-specification/#upload-using-programmer-by-default","text":"If the upload.protocol property is not defined for a board, the Arduino IDE's \"Upload\" process will use the same behavior as \"Upload Using Programmer\" . This is convenient for boards which only support uploading via programmer.","title":"Upload Using Programmer by default"},{"location":"platform-specification/#serial-port","text":"The full path (e.g., /dev/ttyACM0 ) of the port selected via the IDE or arduino-cli upload 's --port option is available as a configuration property {upload.port.address} . The file component of the port's path (e.g., ttyACM0 ) is available as the configuration property {upload.port.label} . For backward compatibility with IDE 1.8.15 and older the old property serial.port is still available and is identical to {upload.port.address} . Instead serial.port.file is identical to {upload.port.label} and available only if protocol in use is serial .","title":"Serial port"},{"location":"platform-specification/#upload-using-an-external-programmer","text":"The program action is triggered via the Sketch > Upload Using Programmer feature of the IDEs or arduino-cli upload --programmer <programmer ID> . This action is used to transfer a compiled sketch to a board using an external programmer. The program.tool property determines the tool to be used for this action. This property is typically defined for each programmer in programmers.txt and uses the same syntax as the upload action : [......] usbasp.program.tool.serial=avrdude [......] arduinoasisp.program.tool.serial=avrdude [......] arduinoisp.program.tool.default=avrdude [......] For backward compatibility with IDE 1.8.15 and older the previous syntax is still supported: [......] usbasp.program.tool=avrdude [......] arduinoasisp.program.tool=avrdude [......] This action can use the same upload verification preference system as the upload action, via the program.verify property. When using the Arduino IDE, if the selected programmer is from a different platform than the board, the program recipe defined in the programmer's platform is used without overrides from the properties defined in the platform.txt of the board platform . When using Arduino development software other than the Arduino IDE, the handling of properties is the same as when doing a standard Upload .","title":"Upload using an external programmer"},{"location":"platform-specification/#burn-bootloader","text":"The erase and bootloader actions are triggered via the Tools > Burn Bootloader feature of the Arduino IDE or arduino-cli burn-bootloader . This action is used to flash a bootloader to the board. \"Burn Bootloader\" is unique in that it uses two actions, which are executed in sequence: erase is typically used to erase the microcontroller's flash memory and set the configuration fuses according to the properties defined in the board definition bootloader is used to flash the bootloader to the board The bootloader.tool property determines the tool to be used for the erase and bootloader actions both. This property is typically defined for each board in boards.txt and uses the same syntax as the upload action : [......] uno.bootloader.tool.serial=avrdude [......] leonardo.bootloader.tool.serial=avrdude leonardo.bootloader.tool.network=arduino_ota [......] duemilanove.bootloader.tool.default=avrdude [......] For backward compatibility with IDE 1.8.15 and older the previous syntax is still supported: [......] uno.bootloader.tool=avrdude [......] leonardo.bootloader.tool=avrdude [......] When using the Arduino IDE, if the board uses a core reference , the platform.txt of the core platform is not used at all in defining the recipes for erase and bootloader actions. When using Arduino development software other than the Arduino IDE, the handling of properties from the core platform's platform.txt is done as usual.","title":"Burn Bootloader"},{"location":"platform-specification/#sketch-debugging-configuration","text":"Starting from Arduino CLI 0.9.0 / Arduino IDE 2.x, sketch debugging support is available for platforms. The debug action is triggered when the user clicks the Debug button in the Arduino IDE or runs the arduino-cli debug command. Since opening a debug session requires the orchestration of numerous tools, the CLI/IDE will take care of that duty: differently from the upload actions, there is no need for the platform to provide debug recipes, the only requirement is to provide some debug configuration directives.","title":"Sketch debugging configuration"},{"location":"platform-specification/#debugger-configuration-directives","text":"All the debug directives are grouped under the debug.* directives. Here is the complete list of the supported directives: debug.executable : is the absolute path to the compiled binary of the sketch debug.toolchain : is a unique identifier of the required toolchain, currently we support gcc (and compatible) only debug.toolchain.path : is the absolute path to the toolchain directory debug.toolchain.prefix : is the prefix of the toolchain (for example arm-none-eabi- ) debug.server : is a unique identifier of the required debug server, currently we support only openocd debug.svd_file : is the absolute path to the SVD descriptor. If the debug.executable property is not present or is empty debugging will not be allowed. OpenOCD server specific configurations: debug.server.openocd.path : is the absolute path to the OpenOCD directory debug.server.openocd.scripts_dir : is the absolute path to the OpenOCD scripts directory debug.server.openocd.scripts.N : is a list of OpenOCD script files to run, where N is a number (a sequence of non-consecutive numbers is allowed) debug.server.openocd.script : if there is only one OpenOCD script to run, this directive con be used instead of the debug.server.openocd.scripts.N (this directive is ignored if debug.server.openocd.scripts.N is present)","title":"Debugger configuration directives"},{"location":"platform-specification/#custom-config-for-cortext-debug-plugin-for-arduino-ide","text":"The Arduino IDE uses cortex-debug plugin to start a debugging session. The IDE creates a launch.json file that is needed to start the debugging via the cortex-debug plugin. To give the platform developers more flexibility, it is allowed to pass any extra arbitrary setup to launch.json generated by the IDE. To allow this the directives under the group debug.cortex-debug.custom.* are converted into JSON and added to the generated launch.json as-is. Moreover, if a directive has a key with a numeric suffix, it is converted into a JSON array. For example the following directives: debug.cortex-debug.custom.postAttachCommands.0=set remote hardware-watchpoint-limit 2 debug.cortex-debug.custom.postAttachCommands.1=monitor reset halt debug.cortex-debug.custom.postAttachCommands.2=monitor gdb_sync debug.cortex-debug.custom.postAttachCommands.3=thb setup debug.cortex-debug.custom.postAttachCommands.4=c debug.cortex-debug.custom.overrideRestartCommands.0=monitor reset halt debug.cortex-debug.custom.overrideRestartCommands.1=monitor gdb_sync debug.cortex-debug.custom.overrideRestartCommands.2=thb setup debug.cortex-debug.custom.overrideRestartCommands.3=c will result in the following JSON to be merged in the Arduino IDE generated launch.json : { \"overrideRestartCommands\" : [ \"monitor reset halt\" , \"monitor gdb_sync\" , \"thb setup\" , \"c\" ], \"postAttachCommands\" : [ \"set remote hardware-watchpoint-limit 2\" , \"monitor reset halt\" , \"monitor gdb_sync\" , \"thb setup\" , \"c\" ] } All the values are converted by default to a string in the resulting JSON. If another type is needed the value can be prefixed with the tags [boolean] , [number] , [string] or [object] to force a specific type in the JSON. Moreover the hierarchy of the properties may be used to build JSON objects. For example: debug.cortex-debug.custom.aBoolean=[boolean]true debug.cortex-debug.custom.aNumber=[number]10 debug.cortex-debug.custom.anotherNumber=[number]10.20 debug.cortex-debug.custom.anObject=[object]{\"key\":\"value\", \"boolean\":true} debug.cortex-debug.custom.anotherObject.key=value debug.cortex-debug.custom.anotherObject.boolean=[boolean]true will result in the following JSON: { \"aBoolean\" : true , \"aNumber\" : 10 , \"anotherNumber\" : 10.2 , \"anObject\" : { \"boolean\" : true , \"key\" : \"value\" }, \"anotherObject\" : { \"boolean\" : true , \"key\" : \"value\" } }","title":"Custom config for Cortext-debug plugin for Arduino IDE"},{"location":"platform-specification/#additional-debugger-config-selection-via-debugadditional_config-directive","text":"It is possible to use any sub-tree of the platform configuration to override the debugger configuration using the directive debug.additional_config=CONFIG_PREFIX . This rule will use the configuration under CONFIG_PREFIX.* to override the current debug.* config. This change allows a more convenient rationalization and selection of the configs to apply to the debugger. For example, we could factor common parts of a configuration in the platform.txt file: # CONFIG 1 debug-overrides.esp32.cortex-debug.custom.name=Arduino on ESP32 debug-overrides.esp32.cortex-debug.custom.request=attach debug-overrides.esp32.cortex-debug.custom.postAttachCommands.0=set remote hardware-watchpoint-limit 2 debug-overrides.esp32.cortex-debug.custom.postAttachCommands.1=monitor reset halt debug-overrides.esp32.cortex-debug.custom.postAttachCommands.2=monitor gdb_sync debug-overrides.esp32.cortex-debug.custom.postAttachCommands.3=thb setup debug-overrides.esp32.cortex-debug.custom.postAttachCommands.4=c debug-overrides.esp32.cortex-debug.custom.overrideRestartCommands.0=monitor reset halt debug-overrides.esp32.cortex-debug.custom.overrideRestartCommands.1=monitor gdb_sync debug-overrides.esp32.cortex-debug.custom.overrideRestartCommands.2=thb setup debug-overrides.esp32.cortex-debug.custom.overrideRestartCommands.3=c # CONFIG 2 debug-overrides.esp32s2.cortex-debug.custom.name=Arduino on ESP32-S2 debug-overrides.esp32s2.cortex-debug.custom.request=attach debug-overrides.esp32s2.cortex-debug.custom.postAttachCommands.0=set remote hardware-watchpoint-limit 2 debug-overrides.esp32s2.cortex-debug.custom.postAttachCommands.1=monitor reset halt debug-overrides.esp32s2.cortex-debug.custom.postAttachCommands.2=monitor gdb_sync debug-overrides.esp32s2.cortex-debug.custom.postAttachCommands.3=thb setup debug-overrides.esp32s2.cortex-debug.custom.postAttachCommands.4=c debug-overrides.esp32s2.cortex-debug.custom.overrideRestartCommands.0=monitor reset halt debug-overrides.esp32s2.cortex-debug.custom.overrideRestartCommands.1=monitor gdb_sync debug-overrides.esp32s2.cortex-debug.custom.overrideRestartCommands.2=thb setup debug-overrides.esp32s2.cortex-debug.custom.overrideRestartCommands.3=c and choose which one to use depending on the board in the boards.txt file: myboard.name=My Board with esp32 myboard.debug.additional_config=debug-overrides.esp32 anotherboard.name=My Board with esp32s2 anotherboard.debug.additional_config=debug-overrides.esp32s2 ... Another possibility is to compose the configuration using another variable present in the board configuration, for example if in the platform.txt we add: debug.additional_config=debug-overrides.{build.mcu} we may use the build.mcu value as a \"selector\" for the board-specific debug configuration that is overlapped to the global debug configuration: myboard.name=My Board with esp32 myboard.build.mcu=esp32 ... anotherboard.name=My Board with esp32s2 anotherboard.build.mcu=esp32s2 ...","title":"Additional debugger config selection via debug.additional_config directive."},{"location":"platform-specification/#optimization-level-for-debugging","text":"The compiler optimization level that is appropriate for normal usage will often not provide a good experience while debugging. For this reason, it may be helpful to use different compiler flags when compiling a sketch for use with the debugger. The flags for use when compiling for debugging can be defined via the compiler.optimization_flags.debug property, and those for normal use via the compiler.optimization_flags.release property. The compiler.optimization_flags property will be defined according to one or the other depending on the Arduino Pro IDE's Sketch > Optimize for Debugging setting or arduino-cli compile 's --optimize-for-debug option.","title":"Optimization level for debugging"},{"location":"platform-specification/#custom-board-options","text":"It can sometimes be useful to provide user selectable configuration options for a specific board. For example, a board could be provided in two or more variants with different microcontrollers, or may have different crystal speed based on the board model, and so on... When using Arduino CLI, the option can be selected via the FQBN, or using the --board-options flag In the Arduino IDE the options add extra menu items under the \"Tools\" menu. In Arduino Web Editor, the options are displayed in the \"Flavours\" menu. Let's see an example of how a custom option is implemented. The board used in the example is the Arduino Duemilanove. This board was produced in two models, one with an ATmega168 microcontroller and another with an ATmega328P. We are going then to define a custom option, using the \"cpu\" MENU_ID, that allows the user to choose between the two different microcontrollers. We must first define a set of menu.MENU_ID=Text properties. Text is what is displayed on the GUI for every custom menu we are going to create and must be declared at the beginning of the boards.txt file: menu.cpu=Processor [.....] in this case, the menu name is \"Processor\". Now let's add, always in the boards.txt file, the default configuration (common to all processors) for the duemilanove board: menu.cpu=Processor [.....] duemilanove.name=Arduino Duemilanove duemilanove.upload.tool=avrdude duemilanove.upload.protocol=arduino duemilanove.build.f_cpu=16000000L duemilanove.build.board=AVR_DUEMILANOVE duemilanove.build.core=arduino duemilanove.build.variant=standard [.....] Now let's define the possible values of the \"cpu\" option: [.....] duemilanove.menu.cpu.atmega328=ATmega328P [.....] duemilanove.menu.cpu.atmega168=ATmega168 [.....] We have defined two values: \"atmega328\" and \"atmega168\". Note that the property keys must follow the format BOARD_ID.menu.MENU_ID.OPTION_ID=Text , where Text is what is displayed under the \"Processor\" menu in the IDE's GUI. Finally, the specific configuration for each option value: [.....] ## Arduino Duemilanove w/ ATmega328P duemilanove.menu.cpu.atmega328=ATmega328P duemilanove.menu.cpu.atmega328.upload.maximum_size=30720 duemilanove.menu.cpu.atmega328.upload.speed=57600 duemilanove.menu.cpu.atmega328.build.mcu=atmega328p ## Arduino Duemilanove w/ ATmega168 duemilanove.menu.cpu.atmega168=ATmega168 duemilanove.menu.cpu.atmega168.upload.maximum_size=14336 duemilanove.menu.cpu.atmega168.upload.speed=19200 duemilanove.menu.cpu.atmega168.build.mcu=atmega168 [.....] Note that when the user selects an option value, all the \"sub properties\" of that value are copied in the global configuration. For example, when the user selects \"ATmega168\" from the \"Processor\" menu, or uses the FQBN arduino:avr:duemilanove:cpu=atmega168 with Arduino CLI, the configuration under atmega168 is made available globally: duemilanove.menu.cpu.atmega168.upload.maximum_size => upload.maximum_size duemilanove.menu.cpu.atmega168.upload.speed => upload.speed duemilanove.menu.cpu.atmega168.build.mcu => build.mcu There is no limit to the number of custom menus that can be defined.","title":"Custom board options"},{"location":"platform-specification/#referencing-another-core-variant-or-tool","text":"The Arduino platform referencing system allows using components of other platforms in cases where it would otherwise be necessary to duplicate those components. This feature allows us to reduce the minimum set of files needed to define a new \"hardware\" to just the boards.txt file.","title":"Referencing another core, variant or tool"},{"location":"platform-specification/#core-reference","text":"Inside the boards.txt we can define a board that uses a core provided by another vendor/maintainer using the syntax VENDOR_ID:CORE_ID . For example, if we want to define a board that uses the \"arduino\" core from the \"arduino\" vendor we should write: [....] myboard.name=My Wonderful Arduino Compatible board myboard.build.core=arduino:arduino [....] Note that we don't need to specify any architecture since the same architecture of \"myboard\" is used, so we just say \"arduino:arduino\" instead of \"arduino:avr:arduino\". The platform.txt settings are inherited from the referenced core platform, thus there is no need to provide a platform.txt unless there are some specific properties that need to be overridden. The bundled libraries from the referenced platform are used, thus there is no need for the referencing platform to bundle those libraries. If libraries are provided, the list of available libraries is the sum of the two libraries, where the referencing platform has priority over the referenced platform. The programmers from the referenced platform are made available, thus there is no need for the referencing platform to define those programmers. If the referencing platform does provide its own programmer definitions, the list of available programmer is the sum of the programmers of the two platforms. In Arduino IDE 1.8.12 and older, all programmers of all installed platforms were made available.","title":"Core reference"},{"location":"platform-specification/#variant-reference","text":"In the same way we can use a variant defined on another platform using the syntax VENDOR_ID:VARIANT_ID : [....] myboard.build.variant=arduino:standard [....] Note that, unlike core references, other resources (platform.txt, bundled libraries, programmers) are not inherited from the referenced platform.","title":"Variant reference"},{"location":"platform-specification/#tool-references","text":"Tool recipes defined in the platform.txt of other platforms can also be referenced using the syntax VENDOR_ID:TOOL_ID : [....] myboard.upload.tool=arduino:avrdude myboard.bootloader.tool=arduino:avrdude [....] When using Arduino CLI or Arduino IDE 2.x (but not Arduino IDE 1.x), properties used in the referenced tool recipe may be overridden in the referencing platform's platform.txt. Note that, unlike core references, referencing a tool recipe does not result in any other resources being inherited from the referenced platform.","title":"Tool references"},{"location":"platform-specification/#platform-terminology","text":"Because boards can reference cores, variants and tools in different platforms, this means that a single build or upload can use data from up to four different platforms. To keep this clear, the following terminology is used: The \"board platform\" is the platform that defines the currently selected board (e.g. the platform that contains the board.txt the board is defined in. The \"core platform\" is the the platform that contains the core to be used. The \"variant platform\" is the platform that contains the variant to be used. The \"tool platform\" is the platform that contains the tool used for the current operation. In the most common case: a board platform without any references, all of these will refer to the same platform. Note that the above terminology is not in widespread use, but was invented for clarity within this document. In the actual Arduino CLI code, the \"board platform\" is called targetPlatform , the \"core platform\" is called actualPlatform , the others are pretty much nameless.","title":"Platform Terminology"},{"location":"platform-specification/#boardslocaltxt","text":"Introduced in Arduino IDE 1.6.6. This file can be used to override properties defined in boards.txt or define new properties without modifying boards.txt . It must be placed in the same folder as the boards.txt it supplements.","title":"boards.local.txt"},{"location":"platform-specification/#platform-bundled-libraries","text":"Arduino libraries placed in the platform's libraries subfolder are accessible when a board of the platform, or of a platform that references the platform's core, is selected. When any other board is selected, the platform bundled libraries are inaccessible. These are often architecture-specific libraries (e.g., SPI, Wire) which must be implemented differently for each architecture. Platform bundled libraries may be used to provide specialized versions of libraries which use the dependency resolution system to override built-in libraries. For more information, see the Arduino library specification .","title":"Platform bundled libraries"},{"location":"platform-specification/#keywordstxt","text":"As of Arduino IDE 1.6.6, per-platform keywords can be defined by adding a keywords.txt file to the platform's architecture folder. These keywords are only highlighted in the Arduino IDE when one of the boards of that platform are selected. This file follows the same format as the keywords.txt used in libraries.","title":"keywords.txt"},{"location":"platform-specification/#post-install-script","text":"After Boards Manager finishes installation of a platform, it checks for the presence of a script named: post_install.bat - when running on Windows post_install.sh - when running on any non-Windows operating system If present, the script is executed. This script may be used to configure the user's system for the platform, such as installing drivers. The circumstances under which the post-install script will run are different depending on which Arduino development software is in use: Arduino IDE 1.x : runs the script when the installed platform is signed with Arduino's private key. Arduino IDE 2.x : runs the script for any installed platform. Arduino CLI : (since 0.12.0) runs the script for any installed platform when Arduino CLI is in \"interactive\" mode. This behavior can be configured","title":"Post-install script"},{"location":"platform-specification/#pre-uninstall-script","text":"Before Boards Manager starts uninstalling a platform, it checks for the presence of a script named: pre_uninstall.bat - when running on Windows pre_uninstall.sh - when running on any non-Windows operating system If present, the script is executed. This script may be used to configure the user's system for the removal of drivers, stopping background programs and execute any action that should be performed before the platform files are removed. The circumstances under which the pre-uninstall script will run are different depending on which Arduino development software is in use: Arduino CLI : runs the script for any installed platform when Arduino CLI is in \"interactive\" mode. This behavior can be configured","title":"Pre-uninstall script"},{"location":"pluggable-discovery-specification/","text":"Discovery tools are a special kind of tool used to find supported boards, a platform developer can create their own following the specification below. These tools must be in the form of executables that can be launched as a subprocess using a platform.txt command line recipe. They communicate to the parent process via stdin/stdout, accepting commands as plain text strings from stdin and sending answers back in JSON format on stdout. Each tool will implement the commands to list and enumerate ports for a specific protocol as specified in this document. Pluggable discovery API via stdin/stdout \u00b6 All the commands listed in this specification must be implemented in the discovery. After startup, the tool will just stay idle waiting for commands. The available commands are: HELLO , START , STOP , QUIT , LIST and START_SYNC . After each command the client always expects a response from the discovery. The discovery must not introduce any delay and must respond to all commands as fast as possible. HELLO command \u00b6 HELLO must be the first command sent to the discovery to tell the name of the client/IDE and the version of the pluggable discovery protocol that the client/IDE supports. The syntax of the command is: HELLO <PROTOCOL_VERSION> \"<USER_AGENT>\" <PROTOCOL_VERSION> is the maximum protocol version supported by the client/IDE (currently 1 ) <USER_AGENT> is the name and version of the client. It must not contain double-quotes ( \" ). some examples: HELLO 1 \"Arduino IDE 1.8.13\" HELLO 1 \"arduino-cli 1.2.3\" the response to the command is: { \"eventType\" : \"hello\" , \"protocolVersion\" : 1 , \"message\" : \"OK\" } The protocolVersion field represents the protocol version that will be used in the rest of the communication. There are three possible cases: if the client/IDE supports the same or a more recent version of the protocol than the discovery, then the client/IDE should go into a compatibility mode and use the protocol level supported by the discovery. if the discovery supports a more recent version of the protocol than the client/IDE: the discovery should downgrade itself into compatibility mode and report a protocolVersion that is less than or equal to the one supported by the client/IDE. if the discovery cannot go into compatibility mode, it must report the protocol version supported (even if greater than the version supported by the client/IDE) and the client/IDE may decide to terminate the discovery or produce an error/warning. START command \u00b6 The START command initializes and starts the discovery internal subroutines. This command must be called before LIST . The response to the start command is: { \"eventType\" : \"start\" , \"message\" : \"OK\" } If the discovery could not start, for any reason, it must report the error with: { \"eventType\" : \"start\" , \"error\" : true , \"message\" : \"Permission error\" } The error field must be set to true and the message field should contain a description of the error. STOP command \u00b6 The STOP command stops the discovery internal subroutines and possibly frees the internally used resources. This command should be called if the client wants to pause the discovery for a while. The response to the command is: { \"eventType\" : \"stop\" , \"message\" : \"OK\" } If an error occurs: { \"eventType\" : \"stop\" , \"error\" : true , \"message\" : \"Resource busy\" } The error field must be set to true and the message field should contain a description of the error. QUIT command \u00b6 The QUIT command terminates the discovery. The response to QUIT is: { \"eventType\" : \"quit\" , \"message\" : \"OK\" } after this output the discovery exits. This command is supposed to always succeed. LIST command \u00b6 The LIST command executes an enumeration of the ports and returns a list of the available ports at the moment of the call. The format of the response is the following: { \"eventType\": \"list\", \"ports\": [ { \"address\": <-- THE ADDRESS OF THE PORT \"label\": <-- HOW THE PORT IS DISPLAYED ON THE GUI \"protocol\": <-- THE PROTOCOL USED BY THE BOARD \"protocolLabel\": <-- HOW THE PROTOCOL IS DISPLAYED ON THE GUI \"hardwareId\": <-- A STRING THAT UNIQUELY IDENTIFIES A BOARD INSTANCE \"properties\": { <-- A LIST OF PROPERTIES OF THE PORT } }, { ... <-- OTHER PORTS... } ] } The ports field contains a list of the available ports. Each port has: an address (for example /dev/ttyACM0 for serial ports or 192.168.10.100 for network ports) a label that is the human readable form of the address (it may be for example ttyACM0 or SSH on 192.168.10.100 ) protocol is the protocol identifier (such as serial or dfu or ssh ) protocolLabel is the protocol in human readable form (for example Serial port or DFU USB or Network (ssh) ) hardwareId (optional) a string that uniquely identifies a specific board instance (even among other boards of the same model). Different ports with the same hardwareId must belong to the same board instance. The identifier should be sufficiently long to uniquely identify the board instance and reduce the probability of collisions. Good examples of hardwareId values are: Ethernet MAC Address, USB Serial Number, CPU-ID number, etc. This value should not be used to identify the board model (see the board identification section for more information about identification of the board model). properties is a list of key/value pairs that represent information relative to the specific port. To make the above more clear let's show an example output from the serial-discovery builtin in the Arduino CLI: { \"eventType\" : \"list\" , \"ports\" : [ { \"address\" : \"/dev/ttyACM0\" , \"label\" : \"ttyACM0\" , \"protocol\" : \"serial\" , \"protocolLabel\" : \"Serial Port (USB)\" , \"hardwareId\" : \"EBEABFD6514D32364E202020FF10181E\" , \"properties\" : { \"pid\" : \"0x804e\" , \"vid\" : \"0x2341\" , \"serialNumber\" : \"EBEABFD6514D32364E202020FF10181E\" , \"name\" : \"ttyACM0\" } } ] } In this case the serial port metadata comes from a USB serial converter. Inside the properties we have all the properties of the port, and some of them may be useful for product identification (in this case only USB VID/PID is useful to identify the board model). The hardwareId field is populated with the USB serialNumber since this value is useful to identify the board instance. The LIST command performs a one-shot polling of the ports. The discovery should answer as soon as reasonably possible, without any additional delay. Some discoveries may require some time to discover a new port (for example network protocols like MDNS, Bluetooth, etc. require some seconds to receive the broadcasts from all available clients) in that case it is fine to answer with an empty or incomplete list. If an error occurs and the discovery can't complete the enumeration, it must report the error with: { \"eventType\" : \"list\" , \"error\" : true , \"message\" : \"Resource busy\" } The error field must be set to true and the message field should contain a description of the error. START_SYNC command \u00b6 The START_SYNC command puts the tool in \"events\" mode: the discovery will send add and remove events each time a new port is detected or removed respectively. If the discovery goes into \"events\" mode successfully the response to this command is: { \"eventType\" : \"start_sync\" , \"message\" : \"OK\" } After this message the discovery will send add and remove events asynchronously (more on that later). If an error occurs and the discovery can't go in \"events\" mode the error must be reported as: { \"eventType\" : \"start_sync\" , \"error\" : true , \"message\" : \"Resource busy\" } The error field must be set to true and the message field should contain a description of the error. Once in \"event\" mode, the discovery is allowed to send add and remove messages asynchronously in realtime, this means that the client must be able to handle these incoming messages at any moment. The add event looks like the following: { \"eventType\" : \"add\" , \"port\" : { \"address\" : \"/dev/ttyACM0\" , \"label\" : \"ttyACM0\" , \"hardwareId\" : \"EBEABFD6514D32364E202020FF10181E\" , \"properties\" : { \"pid\" : \"0x804e\" , \"vid\" : \"0x2341\" , \"serialNumber\" : \"EBEABFD6514D32364E202020FF10181E\" , \"name\" : \"ttyACM0\" }, \"protocol\" : \"serial\" , \"protocolLabel\" : \"Serial Port (USB)\" } } It basically provides the same information as the list event but for a single port. After calling START_SYNC an initial burst of add events must be generated in sequence to report all the ports available at the moment of the start. The remove event looks like the following: { \"eventType\" : \"remove\" , \"port\" : { \"address\" : \"/dev/ttyACM0\" , \"protocol\" : \"serial\" } } The content is straightforward, in this case only the address and protocol fields are reported. If the information about a port needs to be updated the discovery may send a new add message for the same port address and protocol without sending a remove first: this means that all the previous information about the port must be discarded and replaced with the new one. Invalid commands \u00b6 If the client sends an invalid or malformed command, the discovery should answer with: { \"eventType\" : \"command_error\" , \"error\" : true , \"message\" : \"Unknown command XXXX\" } State machine \u00b6 A well behaved pluggable discovery tool must reflect the following state machine. The arrows represent the commands outlined in the above sections, calling a command successfully assumes the state changes. A pluggable discovery state is Alive when the process has been started but no command has been executed. Dead means the process has been stopped and no further commands can be received. Board identification \u00b6 The properties associated to a port can be used to identify the board attached to that port. The algorithm is simple: each board listed in the platform file boards.txt may declare a set of upload_port.* properties if each upload_port.* property has a match in the properties set coming from the discovery then the board is a \"candidate\" board attached to that port. Some port properties may not be precise enough to uniquely identify a board, in that case more boards may match the same set of properties , that's why we called it \"candidate\". Let's see an example to clarify things a bit, let's suppose that we have the following properties coming from the serial discovery: \"port\": { \"address\": \"/dev/ttyACM0\", \"properties\": { \"pid\": \"0x804e\", \"vid\": \"0x2341\", \"serialNumber\": \"EBEABFD6514D32364E202020FF10181E\", \"name\": \"ttyACM0\" }, ... in this case we can use vid and pid to identify the board. The serialNumber , instead, is unique for that specific instance of the board so it can't be used to identify the board model. Let's suppose we have the following boards.txt : # Arduino Zero (Programming Port) # --------------------------------------- arduino_zero_edbg.name=Arduino Zero (Programming Port) arduino_zero_edbg.upload_port.vid=0x03eb arduino_zero_edbg.upload_port.pid=0x2157 [...CUT...] # Arduino Zero (Native USB Port) # -------------------------------------- arduino_zero_native.name=Arduino Zero (Native USB Port) arduino_zero_native.upload_port.0.vid=0x2341 arduino_zero_native.upload_port.0.pid=0x804d arduino_zero_native.upload_port.1.vid=0x2341 arduino_zero_native.upload_port.1.pid=0x004d arduino_zero_native.upload_port.2.vid=0x2341 arduino_zero_native.upload_port.2.pid=0x824d arduino_zero_native.upload_port.3.vid=0x2341 arduino_zero_native.upload_port.3.pid=0x024d [...CUT...] # Arduino MKR1000 # ----------------------- mkr1000.name=Arduino MKR1000 mkr1000.upload_port.0.vid=0x2341 <------- MATCHING IDs mkr1000.upload_port.0.pid=0x804e <------- MATCHING IDs mkr1000.upload_port.1.vid=0x2341 mkr1000.upload_port.1.pid=0x004e mkr1000.upload_port.2.vid=0x2341 mkr1000.upload_port.2.pid=0x824e mkr1000.upload_port.3.vid=0x2341 mkr1000.upload_port.3.pid=0x024e [...CUT...] As we can see the only board that has the two properties matching is the mkr1000 , in this case the CLI knows that the board is surely an MKR1000. Note that vid and pid properties are just free text key/value pairs: the discovery may return basically anything, the board just needs to have the same properties defined in boards.txt as upload_port.* to be identified. We can also specify multiple identification properties for the same board using the .N suffix, for example: myboard.name=My Wonderful Arduino Compatible Board myboard.upload_port.pears=20 myboard.upload_port.apples=30 will match on pears=20, apples=30 but: myboard.name=My Wonderful Arduino Compatible Board myboard.upload_port.0.pears=20 myboard.upload_port.0.apples=30 myboard.upload_port.1.pears=30 myboard.upload_port.1.apples=40 will match on both pears=20, apples=30 and pears=30, apples=40 but not pears=20, apples=40 , in that sense each \"set\" of identification properties is independent from each other and cannot be mixed for port matching. Identification of board options \u00b6 Custom board options can also be identified. Identification property values are associated with a custom board option by the board definition in boards.txt . Two formats are available. If only a single set of identification properties are associated with the option: BOARD_ID.menu.MENU_ID.OPTION_ID.upload_port.PORT_PROPERTY_KEY=PORT_PROPERTY_VALUE If one or more sets of identification properties are associated with the option, an index number is used for each set: BOARD_ID.menu.MENU_ID.OPTION_ID.upload_port.SET_INDEX.PORT_PROPERTY_KEY=PORT_PROPERTY_VALUE If multiple identification properties are associated within a set, all must match for the option to be identified. Let's see an example to clarify it, in the following boards.txt : myboard.upload_port.pid=0x0010 myboard.upload_port.vid=0x2341 myboard.menu.cpu.atmega1280=ATmega1280 myboard.menu.cpu.atmega1280.upload_port.c=atmega1280 <--- identification property for cpu=atmega1280 myboard.menu.cpu.atmega1280.build_cpu=atmega1280 myboard.menu.cpu.atmega2560=ATmega2560 myboard.menu.cpu.atmega2560.upload_port.c=atmega2560 <--- identification property for cpu=atmega2560 myboard.menu.cpu.atmega2560.build_cpu=atmega2560 myboard.menu.mem.1k=1KB myboard.menu.mem.1k.upload_port.mem=1 <--- identification property for mem=1k myboard.menu.mem.1k.build_mem=1024 myboard.menu.mem.2k=2KB myboard.menu.mem.2k.upload_port.1.mem=2 <------ identification property for mem=2k (case 1) myboard.menu.mem.2k.upload_port.2.ab=ef <---\\ myboard.menu.mem.2k.upload_port.2.cd=gh <---+-- identification property for mem=2k (case 2) myboard.menu.mem.2k.build_mem=2048 we have a board called myboard with two custom menu options cpu and mem . A port with the following identification properties: vid=0x0010 pid=0x2341 c=atmega2560 will be identified as FQBN mypackage:avr:myboard:cpu=atmega2560 because of the property c=atmega2560 . A port with the following identification properties: vid=0x0010 pid=0x2341 c=atmega2560 mem=2 will be identified as FQBN mypackage:avr:myboard:cpu=atmega2560,mem=2k . A port with the following identification properties: vid=0x0010 pid=0x2341 c=atmega2560 ab=ef cd=gh will be identified as FQBN mypackage:avr:myboard:cpu=atmega2560,mem=2k too (they will match the second identification properties set for mem=2k ).","title":"Pluggable discovery specification"},{"location":"pluggable-discovery-specification/#pluggable-discovery-api-via-stdinstdout","text":"All the commands listed in this specification must be implemented in the discovery. After startup, the tool will just stay idle waiting for commands. The available commands are: HELLO , START , STOP , QUIT , LIST and START_SYNC . After each command the client always expects a response from the discovery. The discovery must not introduce any delay and must respond to all commands as fast as possible.","title":"Pluggable discovery API via stdin/stdout"},{"location":"pluggable-discovery-specification/#hello-command","text":"HELLO must be the first command sent to the discovery to tell the name of the client/IDE and the version of the pluggable discovery protocol that the client/IDE supports. The syntax of the command is: HELLO <PROTOCOL_VERSION> \"<USER_AGENT>\" <PROTOCOL_VERSION> is the maximum protocol version supported by the client/IDE (currently 1 ) <USER_AGENT> is the name and version of the client. It must not contain double-quotes ( \" ). some examples: HELLO 1 \"Arduino IDE 1.8.13\" HELLO 1 \"arduino-cli 1.2.3\" the response to the command is: { \"eventType\" : \"hello\" , \"protocolVersion\" : 1 , \"message\" : \"OK\" } The protocolVersion field represents the protocol version that will be used in the rest of the communication. There are three possible cases: if the client/IDE supports the same or a more recent version of the protocol than the discovery, then the client/IDE should go into a compatibility mode and use the protocol level supported by the discovery. if the discovery supports a more recent version of the protocol than the client/IDE: the discovery should downgrade itself into compatibility mode and report a protocolVersion that is less than or equal to the one supported by the client/IDE. if the discovery cannot go into compatibility mode, it must report the protocol version supported (even if greater than the version supported by the client/IDE) and the client/IDE may decide to terminate the discovery or produce an error/warning.","title":"HELLO command"},{"location":"pluggable-discovery-specification/#start-command","text":"The START command initializes and starts the discovery internal subroutines. This command must be called before LIST . The response to the start command is: { \"eventType\" : \"start\" , \"message\" : \"OK\" } If the discovery could not start, for any reason, it must report the error with: { \"eventType\" : \"start\" , \"error\" : true , \"message\" : \"Permission error\" } The error field must be set to true and the message field should contain a description of the error.","title":"START command"},{"location":"pluggable-discovery-specification/#stop-command","text":"The STOP command stops the discovery internal subroutines and possibly frees the internally used resources. This command should be called if the client wants to pause the discovery for a while. The response to the command is: { \"eventType\" : \"stop\" , \"message\" : \"OK\" } If an error occurs: { \"eventType\" : \"stop\" , \"error\" : true , \"message\" : \"Resource busy\" } The error field must be set to true and the message field should contain a description of the error.","title":"STOP command"},{"location":"pluggable-discovery-specification/#quit-command","text":"The QUIT command terminates the discovery. The response to QUIT is: { \"eventType\" : \"quit\" , \"message\" : \"OK\" } after this output the discovery exits. This command is supposed to always succeed.","title":"QUIT command"},{"location":"pluggable-discovery-specification/#list-command","text":"The LIST command executes an enumeration of the ports and returns a list of the available ports at the moment of the call. The format of the response is the following: { \"eventType\": \"list\", \"ports\": [ { \"address\": <-- THE ADDRESS OF THE PORT \"label\": <-- HOW THE PORT IS DISPLAYED ON THE GUI \"protocol\": <-- THE PROTOCOL USED BY THE BOARD \"protocolLabel\": <-- HOW THE PROTOCOL IS DISPLAYED ON THE GUI \"hardwareId\": <-- A STRING THAT UNIQUELY IDENTIFIES A BOARD INSTANCE \"properties\": { <-- A LIST OF PROPERTIES OF THE PORT } }, { ... <-- OTHER PORTS... } ] } The ports field contains a list of the available ports. Each port has: an address (for example /dev/ttyACM0 for serial ports or 192.168.10.100 for network ports) a label that is the human readable form of the address (it may be for example ttyACM0 or SSH on 192.168.10.100 ) protocol is the protocol identifier (such as serial or dfu or ssh ) protocolLabel is the protocol in human readable form (for example Serial port or DFU USB or Network (ssh) ) hardwareId (optional) a string that uniquely identifies a specific board instance (even among other boards of the same model). Different ports with the same hardwareId must belong to the same board instance. The identifier should be sufficiently long to uniquely identify the board instance and reduce the probability of collisions. Good examples of hardwareId values are: Ethernet MAC Address, USB Serial Number, CPU-ID number, etc. This value should not be used to identify the board model (see the board identification section for more information about identification of the board model). properties is a list of key/value pairs that represent information relative to the specific port. To make the above more clear let's show an example output from the serial-discovery builtin in the Arduino CLI: { \"eventType\" : \"list\" , \"ports\" : [ { \"address\" : \"/dev/ttyACM0\" , \"label\" : \"ttyACM0\" , \"protocol\" : \"serial\" , \"protocolLabel\" : \"Serial Port (USB)\" , \"hardwareId\" : \"EBEABFD6514D32364E202020FF10181E\" , \"properties\" : { \"pid\" : \"0x804e\" , \"vid\" : \"0x2341\" , \"serialNumber\" : \"EBEABFD6514D32364E202020FF10181E\" , \"name\" : \"ttyACM0\" } } ] } In this case the serial port metadata comes from a USB serial converter. Inside the properties we have all the properties of the port, and some of them may be useful for product identification (in this case only USB VID/PID is useful to identify the board model). The hardwareId field is populated with the USB serialNumber since this value is useful to identify the board instance. The LIST command performs a one-shot polling of the ports. The discovery should answer as soon as reasonably possible, without any additional delay. Some discoveries may require some time to discover a new port (for example network protocols like MDNS, Bluetooth, etc. require some seconds to receive the broadcasts from all available clients) in that case it is fine to answer with an empty or incomplete list. If an error occurs and the discovery can't complete the enumeration, it must report the error with: { \"eventType\" : \"list\" , \"error\" : true , \"message\" : \"Resource busy\" } The error field must be set to true and the message field should contain a description of the error.","title":"LIST command"},{"location":"pluggable-discovery-specification/#start_sync-command","text":"The START_SYNC command puts the tool in \"events\" mode: the discovery will send add and remove events each time a new port is detected or removed respectively. If the discovery goes into \"events\" mode successfully the response to this command is: { \"eventType\" : \"start_sync\" , \"message\" : \"OK\" } After this message the discovery will send add and remove events asynchronously (more on that later). If an error occurs and the discovery can't go in \"events\" mode the error must be reported as: { \"eventType\" : \"start_sync\" , \"error\" : true , \"message\" : \"Resource busy\" } The error field must be set to true and the message field should contain a description of the error. Once in \"event\" mode, the discovery is allowed to send add and remove messages asynchronously in realtime, this means that the client must be able to handle these incoming messages at any moment. The add event looks like the following: { \"eventType\" : \"add\" , \"port\" : { \"address\" : \"/dev/ttyACM0\" , \"label\" : \"ttyACM0\" , \"hardwareId\" : \"EBEABFD6514D32364E202020FF10181E\" , \"properties\" : { \"pid\" : \"0x804e\" , \"vid\" : \"0x2341\" , \"serialNumber\" : \"EBEABFD6514D32364E202020FF10181E\" , \"name\" : \"ttyACM0\" }, \"protocol\" : \"serial\" , \"protocolLabel\" : \"Serial Port (USB)\" } } It basically provides the same information as the list event but for a single port. After calling START_SYNC an initial burst of add events must be generated in sequence to report all the ports available at the moment of the start. The remove event looks like the following: { \"eventType\" : \"remove\" , \"port\" : { \"address\" : \"/dev/ttyACM0\" , \"protocol\" : \"serial\" } } The content is straightforward, in this case only the address and protocol fields are reported. If the information about a port needs to be updated the discovery may send a new add message for the same port address and protocol without sending a remove first: this means that all the previous information about the port must be discarded and replaced with the new one.","title":"START_SYNC command"},{"location":"pluggable-discovery-specification/#invalid-commands","text":"If the client sends an invalid or malformed command, the discovery should answer with: { \"eventType\" : \"command_error\" , \"error\" : true , \"message\" : \"Unknown command XXXX\" }","title":"Invalid commands"},{"location":"pluggable-discovery-specification/#state-machine","text":"A well behaved pluggable discovery tool must reflect the following state machine. The arrows represent the commands outlined in the above sections, calling a command successfully assumes the state changes. A pluggable discovery state is Alive when the process has been started but no command has been executed. Dead means the process has been stopped and no further commands can be received.","title":"State machine"},{"location":"pluggable-discovery-specification/#board-identification","text":"The properties associated to a port can be used to identify the board attached to that port. The algorithm is simple: each board listed in the platform file boards.txt may declare a set of upload_port.* properties if each upload_port.* property has a match in the properties set coming from the discovery then the board is a \"candidate\" board attached to that port. Some port properties may not be precise enough to uniquely identify a board, in that case more boards may match the same set of properties , that's why we called it \"candidate\". Let's see an example to clarify things a bit, let's suppose that we have the following properties coming from the serial discovery: \"port\": { \"address\": \"/dev/ttyACM0\", \"properties\": { \"pid\": \"0x804e\", \"vid\": \"0x2341\", \"serialNumber\": \"EBEABFD6514D32364E202020FF10181E\", \"name\": \"ttyACM0\" }, ... in this case we can use vid and pid to identify the board. The serialNumber , instead, is unique for that specific instance of the board so it can't be used to identify the board model. Let's suppose we have the following boards.txt : # Arduino Zero (Programming Port) # --------------------------------------- arduino_zero_edbg.name=Arduino Zero (Programming Port) arduino_zero_edbg.upload_port.vid=0x03eb arduino_zero_edbg.upload_port.pid=0x2157 [...CUT...] # Arduino Zero (Native USB Port) # -------------------------------------- arduino_zero_native.name=Arduino Zero (Native USB Port) arduino_zero_native.upload_port.0.vid=0x2341 arduino_zero_native.upload_port.0.pid=0x804d arduino_zero_native.upload_port.1.vid=0x2341 arduino_zero_native.upload_port.1.pid=0x004d arduino_zero_native.upload_port.2.vid=0x2341 arduino_zero_native.upload_port.2.pid=0x824d arduino_zero_native.upload_port.3.vid=0x2341 arduino_zero_native.upload_port.3.pid=0x024d [...CUT...] # Arduino MKR1000 # ----------------------- mkr1000.name=Arduino MKR1000 mkr1000.upload_port.0.vid=0x2341 <------- MATCHING IDs mkr1000.upload_port.0.pid=0x804e <------- MATCHING IDs mkr1000.upload_port.1.vid=0x2341 mkr1000.upload_port.1.pid=0x004e mkr1000.upload_port.2.vid=0x2341 mkr1000.upload_port.2.pid=0x824e mkr1000.upload_port.3.vid=0x2341 mkr1000.upload_port.3.pid=0x024e [...CUT...] As we can see the only board that has the two properties matching is the mkr1000 , in this case the CLI knows that the board is surely an MKR1000. Note that vid and pid properties are just free text key/value pairs: the discovery may return basically anything, the board just needs to have the same properties defined in boards.txt as upload_port.* to be identified. We can also specify multiple identification properties for the same board using the .N suffix, for example: myboard.name=My Wonderful Arduino Compatible Board myboard.upload_port.pears=20 myboard.upload_port.apples=30 will match on pears=20, apples=30 but: myboard.name=My Wonderful Arduino Compatible Board myboard.upload_port.0.pears=20 myboard.upload_port.0.apples=30 myboard.upload_port.1.pears=30 myboard.upload_port.1.apples=40 will match on both pears=20, apples=30 and pears=30, apples=40 but not pears=20, apples=40 , in that sense each \"set\" of identification properties is independent from each other and cannot be mixed for port matching.","title":"Board identification"},{"location":"pluggable-discovery-specification/#identification-of-board-options","text":"Custom board options can also be identified. Identification property values are associated with a custom board option by the board definition in boards.txt . Two formats are available. If only a single set of identification properties are associated with the option: BOARD_ID.menu.MENU_ID.OPTION_ID.upload_port.PORT_PROPERTY_KEY=PORT_PROPERTY_VALUE If one or more sets of identification properties are associated with the option, an index number is used for each set: BOARD_ID.menu.MENU_ID.OPTION_ID.upload_port.SET_INDEX.PORT_PROPERTY_KEY=PORT_PROPERTY_VALUE If multiple identification properties are associated within a set, all must match for the option to be identified. Let's see an example to clarify it, in the following boards.txt : myboard.upload_port.pid=0x0010 myboard.upload_port.vid=0x2341 myboard.menu.cpu.atmega1280=ATmega1280 myboard.menu.cpu.atmega1280.upload_port.c=atmega1280 <--- identification property for cpu=atmega1280 myboard.menu.cpu.atmega1280.build_cpu=atmega1280 myboard.menu.cpu.atmega2560=ATmega2560 myboard.menu.cpu.atmega2560.upload_port.c=atmega2560 <--- identification property for cpu=atmega2560 myboard.menu.cpu.atmega2560.build_cpu=atmega2560 myboard.menu.mem.1k=1KB myboard.menu.mem.1k.upload_port.mem=1 <--- identification property for mem=1k myboard.menu.mem.1k.build_mem=1024 myboard.menu.mem.2k=2KB myboard.menu.mem.2k.upload_port.1.mem=2 <------ identification property for mem=2k (case 1) myboard.menu.mem.2k.upload_port.2.ab=ef <---\\ myboard.menu.mem.2k.upload_port.2.cd=gh <---+-- identification property for mem=2k (case 2) myboard.menu.mem.2k.build_mem=2048 we have a board called myboard with two custom menu options cpu and mem . A port with the following identification properties: vid=0x0010 pid=0x2341 c=atmega2560 will be identified as FQBN mypackage:avr:myboard:cpu=atmega2560 because of the property c=atmega2560 . A port with the following identification properties: vid=0x0010 pid=0x2341 c=atmega2560 mem=2 will be identified as FQBN mypackage:avr:myboard:cpu=atmega2560,mem=2k . A port with the following identification properties: vid=0x0010 pid=0x2341 c=atmega2560 ab=ef cd=gh will be identified as FQBN mypackage:avr:myboard:cpu=atmega2560,mem=2k too (they will match the second identification properties set for mem=2k ).","title":"Identification of board options"},{"location":"pluggable-monitor-specification/","text":"Monitor tools are a special kind of tool used to let the user communicate with the supported boards. A platform developer can create their own tools following the specification below. These tools must be in the form of command line executables that can be launched as a subprocess. They will communicate to the parent process via stdin/stdout, in particular a monitor tool will accept commands as plain text strings from stdin and will send answers back in JSON format on stdout. Each tool will implement the commands to open and control communication ports for a specific protocol as specified in this document. The actual I/O data stream from the communication port will be transferred to the parent process through a separate channel via TCP/IP. Pluggable monitor API via stdin/stdout \u00b6 All the commands listed in this specification must be implemented in the monitor tool. After startup, the tool will just stay idle waiting for commands. The available commands are: HELLO , DESCRIBE , CONFIGURE , OPEN , CLOSE and QUIT . After each command the client always expects a response from the monitor. The monitor must not introduce any delay and must respond to all commands as fast as possible. HELLO command \u00b6 HELLO must be the first command sent to the monitor to tell the name of the client/IDE and the version of the pluggable monitor protocol that the client/IDE supports. The syntax of the command is: HELLO <PROTOCOL_VERSION> \"<USER_AGENT>\" <PROTOCOL_VERSION> is the maximum protocol version supported by the client/IDE (currently 1 ) <USER_AGENT> is the name and version of the client. It must not contain double-quotes ( \" ). some examples: HELLO 1 \"Arduino IDE 1.8.13\" HELLO 1 \"arduino-cli 1.2.3\" the response to the command is: { \"eventType\" : \"hello\" , \"protocolVersion\" : 1 , \"message\" : \"OK\" } The protocolVersion field represents the protocol version that will be used in the rest of the communication. There are three possible cases: if the client/IDE supports the same or a more recent version of the protocol than the monitor tool, then the client/IDE should go into a compatibility mode and use the protocol level supported by the monitor tool. if the monitor tool supports a more recent version of the protocol than the client/IDE, then the monitor tool should downgrade itself into compatibility mode and report a protocolVersion that is less than or equal to the one supported by the client/IDE. if the monitor tool cannot go into compatibility mode, it must report the protocol version supported (even if greater than the version supported by the client/IDE) and the client/IDE may decide to terminate the monitor tool or produce an error/warning. DESCRIBE command \u00b6 The DESCRIBE command returns a description of the communication port. The description will have metadata about the port configuration, and which parameters are available to the user. { \"eventType\" : \"describe\" , \"message\" : \"ok\" , \"port_description\" : { \"protocol\" : \"serial\" , \"configuration_parameters\" : { \"baudrate\" : { \"label\" : \"Baudrate\" , \"type\" : \"enum\" , \"value\" : [ \"300\" , \"600\" , \"750\" , \"1200\" , \"2400\" , \"4800\" , \"9600\" , \"19200\" , \"38400\" , \"57600\" , \"115200\" , \"230400\" , \"460800\" , \"500000\" , \"921600\" , \"1000000\" , \"2000000\" ], \"selected\" : \"9600\" }, \"parity\" : { \"label\" : \"Parity\" , \"type\" : \"enum\" , \"value\" : [ \"N\" , \"E\" , \"O\" , \"M\" , \"S\" ], \"selected\" : \"N\" }, \"bits\" : { \"label\" : \"Data bits\" , \"type\" : \"enum\" , \"value\" : [ \"5\" , \"6\" , \"7\" , \"8\" , \"9\" ], \"selected\" : \"8\" }, \"stop_bits\" : { \"label\" : \"Stop bits\" , \"type\" : \"enum\" , \"value\" : [ \"1\" , \"1.5\" , \"2\" ], \"selected\" : \"1\" } } } } The field protocol is the board port protocol identifier, it must match with the corresponding protocol identifier for a pluggable discovery tool. configuration_parameters is a key/value map that enumerates the available port parameters. Each parameter has a unique name ( baudrate , parity , etc...), a type (in this case only enum is allowed but more types may be added in the future if needed), and the selected value for each parameter. The parameter name can not contain spaces, the allowed characters are alphanumerics, underscore _ , dot . , and dash - . The enum types must have a list of possible values in the value list field. The client/IDE may expose these configuration values to the user via a config file or a GUI, in this case the label field may be used for a user readable description of the parameter. CONFIGURE command \u00b6 The CONFIGURE command sets configuration parameters for the communication port. The parameters can be changed one at a time and the syntax is: CONFIGURE <PARAMETER_NAME> <VALUE> The response to the command is: { \"eventType\" : \"configure\" , \"message\" : \"ok\" } or if there is an error: { \"eventType\" : \"configure\" , \"error\" : true , \"message\" : \"invalid value for parameter baudrate: 123456\" } The currently selected parameters or their default value may be obtained using the DESCRIBE command. OPEN command \u00b6 The OPEN command opens a communication port with the board, the data exchanged with the board will be transferred to the Client/IDE via TCP/IP. The Client/IDE must first TCP-Listen to a randomly selected TCP port and send the address to connect it to the monitor tool as part of the OPEN command. The syntax of the OPEN command is: OPEN <CLIENT_TCPIP_ADDRESS> <BOARD_PORT> For example, let's suppose that the Client/IDE wants to communicate with the serial port /dev/ttyACM0 using an hypothetical serial-monitor tool, then the sequence of actions to perform will be the following: the Client/IDE must first listen to a random TCP port (let's suppose it chose 32123 ) the Client/IDE runs the serial-monitor tool and initializes it with the HELLO command the Client/IDE sends the command OPEN 127.0.0.1:32123 /dev/ttyACM0 to the monitor tool the monitor tool opens /dev/ttyACM0 the monitor tool connects via TCP/IP to 127.0.0.1:32123 and starts streaming data back and forth The answer to the OPEN command is: { \"eventType\" : \"open\" , \"message\" : \"ok\" } If the monitor tool cannot communicate with the board, or if the tool can not connect back to the TCP port, or if any other error condition happens: { \"eventType\" : \"open\" , \"error\" : true , \"message\" : \"unknown port /dev/ttyACM23\" } The board port will be opened using the parameters previously set through the CONFIGURE command. Once the port is opened, it may be unexpectedly closed at any time due to hardware failure, or because the Client/IDE closes the TCP/IP connection, etc. In this case an asynchronous port_closed message must be generated by the monitor tool: { \"eventType\" : \"port_closed\" , \"message\" : \"serial port disappeared!\" } or { \"eventType\" : \"port_closed\" , \"message\" : \"lost TCP/IP connection with the client!\" } CLOSE command \u00b6 The CLOSE command will close the currently opened port and close the TCP/IP connection used to communicate with the Client/IDE. The answer to the command is: { \"eventType\" : \"close\" , \"message\" : \"ok\" } or in case of error { \"eventType\" : \"close\" , \"error\" : true , \"message\" : \"port already closed\" } QUIT command \u00b6 The QUIT command terminates the monitor. The response to QUIT is: { \"eventType\" : \"quit\" , \"message\" : \"OK\" } after this output the monitor exits. This command must always succeed. Invalid commands \u00b6 If the client sends an invalid or malformed command, the monitor should answer with: { \"eventType\" : \"command_error\" , \"error\" : true , \"message\" : \"Unknown command XXXX\" }","title":"Pluggable monitor specification"},{"location":"pluggable-monitor-specification/#pluggable-monitor-api-via-stdinstdout","text":"All the commands listed in this specification must be implemented in the monitor tool. After startup, the tool will just stay idle waiting for commands. The available commands are: HELLO , DESCRIBE , CONFIGURE , OPEN , CLOSE and QUIT . After each command the client always expects a response from the monitor. The monitor must not introduce any delay and must respond to all commands as fast as possible.","title":"Pluggable monitor API via stdin/stdout"},{"location":"pluggable-monitor-specification/#hello-command","text":"HELLO must be the first command sent to the monitor to tell the name of the client/IDE and the version of the pluggable monitor protocol that the client/IDE supports. The syntax of the command is: HELLO <PROTOCOL_VERSION> \"<USER_AGENT>\" <PROTOCOL_VERSION> is the maximum protocol version supported by the client/IDE (currently 1 ) <USER_AGENT> is the name and version of the client. It must not contain double-quotes ( \" ). some examples: HELLO 1 \"Arduino IDE 1.8.13\" HELLO 1 \"arduino-cli 1.2.3\" the response to the command is: { \"eventType\" : \"hello\" , \"protocolVersion\" : 1 , \"message\" : \"OK\" } The protocolVersion field represents the protocol version that will be used in the rest of the communication. There are three possible cases: if the client/IDE supports the same or a more recent version of the protocol than the monitor tool, then the client/IDE should go into a compatibility mode and use the protocol level supported by the monitor tool. if the monitor tool supports a more recent version of the protocol than the client/IDE, then the monitor tool should downgrade itself into compatibility mode and report a protocolVersion that is less than or equal to the one supported by the client/IDE. if the monitor tool cannot go into compatibility mode, it must report the protocol version supported (even if greater than the version supported by the client/IDE) and the client/IDE may decide to terminate the monitor tool or produce an error/warning.","title":"HELLO command"},{"location":"pluggable-monitor-specification/#describe-command","text":"The DESCRIBE command returns a description of the communication port. The description will have metadata about the port configuration, and which parameters are available to the user. { \"eventType\" : \"describe\" , \"message\" : \"ok\" , \"port_description\" : { \"protocol\" : \"serial\" , \"configuration_parameters\" : { \"baudrate\" : { \"label\" : \"Baudrate\" , \"type\" : \"enum\" , \"value\" : [ \"300\" , \"600\" , \"750\" , \"1200\" , \"2400\" , \"4800\" , \"9600\" , \"19200\" , \"38400\" , \"57600\" , \"115200\" , \"230400\" , \"460800\" , \"500000\" , \"921600\" , \"1000000\" , \"2000000\" ], \"selected\" : \"9600\" }, \"parity\" : { \"label\" : \"Parity\" , \"type\" : \"enum\" , \"value\" : [ \"N\" , \"E\" , \"O\" , \"M\" , \"S\" ], \"selected\" : \"N\" }, \"bits\" : { \"label\" : \"Data bits\" , \"type\" : \"enum\" , \"value\" : [ \"5\" , \"6\" , \"7\" , \"8\" , \"9\" ], \"selected\" : \"8\" }, \"stop_bits\" : { \"label\" : \"Stop bits\" , \"type\" : \"enum\" , \"value\" : [ \"1\" , \"1.5\" , \"2\" ], \"selected\" : \"1\" } } } } The field protocol is the board port protocol identifier, it must match with the corresponding protocol identifier for a pluggable discovery tool. configuration_parameters is a key/value map that enumerates the available port parameters. Each parameter has a unique name ( baudrate , parity , etc...), a type (in this case only enum is allowed but more types may be added in the future if needed), and the selected value for each parameter. The parameter name can not contain spaces, the allowed characters are alphanumerics, underscore _ , dot . , and dash - . The enum types must have a list of possible values in the value list field. The client/IDE may expose these configuration values to the user via a config file or a GUI, in this case the label field may be used for a user readable description of the parameter.","title":"DESCRIBE command"},{"location":"pluggable-monitor-specification/#configure-command","text":"The CONFIGURE command sets configuration parameters for the communication port. The parameters can be changed one at a time and the syntax is: CONFIGURE <PARAMETER_NAME> <VALUE> The response to the command is: { \"eventType\" : \"configure\" , \"message\" : \"ok\" } or if there is an error: { \"eventType\" : \"configure\" , \"error\" : true , \"message\" : \"invalid value for parameter baudrate: 123456\" } The currently selected parameters or their default value may be obtained using the DESCRIBE command.","title":"CONFIGURE command"},{"location":"pluggable-monitor-specification/#open-command","text":"The OPEN command opens a communication port with the board, the data exchanged with the board will be transferred to the Client/IDE via TCP/IP. The Client/IDE must first TCP-Listen to a randomly selected TCP port and send the address to connect it to the monitor tool as part of the OPEN command. The syntax of the OPEN command is: OPEN <CLIENT_TCPIP_ADDRESS> <BOARD_PORT> For example, let's suppose that the Client/IDE wants to communicate with the serial port /dev/ttyACM0 using an hypothetical serial-monitor tool, then the sequence of actions to perform will be the following: the Client/IDE must first listen to a random TCP port (let's suppose it chose 32123 ) the Client/IDE runs the serial-monitor tool and initializes it with the HELLO command the Client/IDE sends the command OPEN 127.0.0.1:32123 /dev/ttyACM0 to the monitor tool the monitor tool opens /dev/ttyACM0 the monitor tool connects via TCP/IP to 127.0.0.1:32123 and starts streaming data back and forth The answer to the OPEN command is: { \"eventType\" : \"open\" , \"message\" : \"ok\" } If the monitor tool cannot communicate with the board, or if the tool can not connect back to the TCP port, or if any other error condition happens: { \"eventType\" : \"open\" , \"error\" : true , \"message\" : \"unknown port /dev/ttyACM23\" } The board port will be opened using the parameters previously set through the CONFIGURE command. Once the port is opened, it may be unexpectedly closed at any time due to hardware failure, or because the Client/IDE closes the TCP/IP connection, etc. In this case an asynchronous port_closed message must be generated by the monitor tool: { \"eventType\" : \"port_closed\" , \"message\" : \"serial port disappeared!\" } or { \"eventType\" : \"port_closed\" , \"message\" : \"lost TCP/IP connection with the client!\" }","title":"OPEN command"},{"location":"pluggable-monitor-specification/#close-command","text":"The CLOSE command will close the currently opened port and close the TCP/IP connection used to communicate with the Client/IDE. The answer to the command is: { \"eventType\" : \"close\" , \"message\" : \"ok\" } or in case of error { \"eventType\" : \"close\" , \"error\" : true , \"message\" : \"port already closed\" }","title":"CLOSE command"},{"location":"pluggable-monitor-specification/#quit-command","text":"The QUIT command terminates the monitor. The response to QUIT is: { \"eventType\" : \"quit\" , \"message\" : \"OK\" } after this output the monitor exits. This command must always succeed.","title":"QUIT command"},{"location":"pluggable-monitor-specification/#invalid-commands","text":"If the client sends an invalid or malformed command, the monitor should answer with: { \"eventType\" : \"command_error\" , \"error\" : true , \"message\" : \"Unknown command XXXX\" }","title":"Invalid commands"},{"location":"sketch-build-process/","text":"The process the Arduino development software uses to build a sketch. More useful information can be found in the Arduino platform specification . Note that the following refers specifically to the build process for AVR targets. Other architectures follow a similar build process, but may use other tools and compilers. Overview \u00b6 A number of things have to happen for your Arduino code to get onto the Arduino board. First, the Arduino development software performs some minor pre-processing to turn your sketch into a C++ program. Next, dependencies of the sketch are located. It then gets passed to a compiler (e.g, avr-gcc ), which turns the human readable code into machine readable instructions (or object files). Then your code gets combined with (linked against) the standard Arduino libraries that provide basic functions like digitalWrite() or Serial.print() . The result is a single Intel hex file, which contains the specific bytes that need to be written to the program memory of the chip on the Arduino board. This file is then uploaded to the board: transmitted over the USB or serial connection via the bootloader already on the chip or with external programming hardware. Pre-Processing \u00b6 The Arduino development software performs a few transformations to your sketch before passing it to the compiler (e.g., avr-gcc ): All .ino and .pde files in the sketch folder (shown in the Arduino IDE as tabs with no extension) are concatenated together, starting with the file that matches the folder name followed by the others in alphabetical order. The .cpp filename extension is then added to the resulting file. If not already present, #include <Arduino.h> is added to the sketch. This header file (found in the core folder for the currently selected board) includes all the definitions needed for the standard Arduino core. Prototypes are generated for all function definitions in .ino/.pde files that don't already have prototypes. In some rare cases, prototype generation may fail for some functions. To work around this, you can provide your own prototypes for these functions. #line directives are added to make warning or error messages reflect the original sketch layout. No pre-processing is done to files in a sketch with any extension other than .ino or .pde. Additionally, .h files in the sketch are not automatically #included from the main sketch file. Further, if you want to call functions defined in a .c file from a .cpp file (like one generated from your sketch), you'll need to wrap its declarations in an extern \"C\" {} block that is defined only inside of C++ files. Dependency Resolution \u00b6 The sketch is scanned recursively for dependencies. There are predefined include search paths: Core library folder (as defined by {build.core} ) Variant folder (as defined by {build.variant} ) Standard system directories (e.g., {runtime.tools.avr-gcc.path}/avr/include ) Include search paths added to resolve prior dependencies If the dependency is not present in any of those locations, the installed libraries are then searched (see the Location Priority table below for library locations). For information on the allowed library sub-folder structures see the Arduino library specification . -I options are generated for the path to each library dependency and appended to the includes property , to be used in compilation recipes in platform.txt. If multiple libraries contain a file that matches the #include directive, the priority is determined by applying the following rules, one by one in this order, until a rule determines a winner: A library that has been specified using the --library option of arduino-cli compile wins against a library in other locations A library that is architecture compatible wins against a library that is not architecture compatible (see Architecture Matching ) A library with both library name and folder name matching the include wins A library that has better \"library name priority\" or \"folder name priority\" wins (see Library Name Priority and Folder Name Priority ) A library that is architecture optimized wins against a library that is not architecture optimized (see Architecture Matching ) A library that has a better \"location priority\" wins (see Location Priority ) A library that has a folder name with a better score using the \"closest-match\" algorithm wins A library that has a folder name that comes first in alphanumeric order wins Architecture Matching \u00b6 A library is considered compatible with architecture X if the architectures field in library.properties : explicitly contains the architecture X contains the catch-all * is not specified at all. A library is considered optimized for architecture X only if the architectures field in library.properties explicitly contains the architecture X . This means that a library that is optimized for architecture X is also compatible with it. Examples: architectures field in library.properties Compatible with avr Optimized for avr not specified YES NO architectures=* YES NO architectures=avr YES YES architectures=*,avr YES YES architectures=*,esp8266 YES NO architectures=avr,esp8266 YES YES architectures=samd NO NO Library Name Priority \u00b6 A library's name is defined by the library.properties name field. That value is sanitized by replacing spaces with _ before comparing it to the file name of the include. The \"library name priority\" is determined as follows (in order of highest to lowest priority): Rule Example for Arduino_Low_Power.h The library name matches the include 100% Arduino Low Power The library name matches the include 100%, except with a -main suffix Arduino Low Power-main The library name matches the include 100%, except with a -master suffix Arduino Low Power-master The library name has a matching prefix Arduino Low Power Whatever The library name has a matching suffix Awesome Arduino Low Power The library name contains the include The Arduino Low Power Lib Folder Name Priority \u00b6 The \"folder name priority\" is determined as follows (in order of highest to lowest priority): Rule Example for Servo.h The folder name matches the include 100% Servo The folder name matches the include 100%, except with a -main suffix Servo-main The folder name matches the include 100%, except with a -master suffix Servo-master The folder name has a matching prefix ServoWhatever The folder name has a matching suffix AwesomeServo The folder name contains the include AnAwesomeServoForWhatever Location Priority \u00b6 The \"location priority\" is determined as follows (in order of highest to lowest priority): The library is under a custom libraries path specified via the --libraries option of arduino-cli compile (in decreasing order of priority when multiple custom paths are defined) The library is under the libraries subfolder of the IDE's sketchbook or Arduino CLI's user directory The library is bundled with the board platform/core ( {runtime.platform.path}/libraries ) The library is bundled with the referenced board platform/core The library is bundled with the Arduino IDE (this location is determined by the Arduino CLI configuration setting directories.builtin.libraries ) Location priorities in Arduino Web Editor \u00b6 The location priorities system works in the same manner in Arduino Web Editor , but its cloud-based nature may make the locations of libraries less obvious. Custom : the imported libraries, shown under the Libraries > Custom tab. These libraries are under /tmp/\\<some number>/custom Pinned : libraries that were associated with the sketch by choosing a specific version from the library's \"Include\" dropdown menu. These libraries are under /tmp/\\<some number>/pinned Note: clicking the \"Include\" button does not result in the library being pinned to the sketch. Platform bundled : these are listed under the Libraries > Default tab, but with \"for \\<architecture name>\" appended to the library name (e.g., \"SPI for AVR\"). These libraries are under /home/builder/.arduino15/packages 1. Board platform bundled 1. Core platform bundled Built-in : The non-platform bundled libraries listed under the Libraries > Default tab. Libraries listed under Libraries > Library Manager . These libraries are under /home/builder/opt/libraries/latest Compilation \u00b6 Sketches are compiled by architecture-specific versions of gcc and g++ according to the variables in the boards.txt file of the selected board's platform . The sketch is built in a temporary directory in the system-wide temporary directory (e.g. /tmp on Linux). Files taken as source files for the build process are .S, .c and .cpp files (including the .cpp file generated from the sketch's .ino and .pde files during the sketch pre-processing step). Source files of the target are compiled and output with .o extensions to this build directory, as are the main sketch files and any other source files in the sketch and any source files in any libraries which are #include d in the sketch. Before compiling a source file, an attempt is made to reuse the previously compiled .o file, which speeds up the build process. A special .d (dependency) file provides a list of all other files included by the source. The compile step is skipped if the .o and .d files exist and have timestamps newer than the source and all the dependent files. If the source or any dependent file has been modified, or any error occurs verifying the files, the compiler is run normally, writing a new .o & .d file. After a new board is selected from the IDE's Board menu, all source files are rebuilt on the next compile. These .o files are then linked together into a static library and the main sketch file is linked against this library. Only the parts of the library needed for your sketch are included in the final .hex file, reducing the size of most sketches. The .hex file is the final output of the compilation which is then uploaded to the board. If verbose output during compilation is enabled, the complete command line of each external command executed as part of the build process will be printed in the console. Uploading \u00b6 Sketches are uploaded by a platform-specific upload tool (e.g., avrdude). The upload process is also controlled by variables in the boards and main preferences files. See the Arduino platform specification page for details. If verbose output during upload is enabled, debugging information will be output to the console, including the upload tool's command lines and verbose output.","title":"Sketch build process"},{"location":"sketch-build-process/#overview","text":"A number of things have to happen for your Arduino code to get onto the Arduino board. First, the Arduino development software performs some minor pre-processing to turn your sketch into a C++ program. Next, dependencies of the sketch are located. It then gets passed to a compiler (e.g, avr-gcc ), which turns the human readable code into machine readable instructions (or object files). Then your code gets combined with (linked against) the standard Arduino libraries that provide basic functions like digitalWrite() or Serial.print() . The result is a single Intel hex file, which contains the specific bytes that need to be written to the program memory of the chip on the Arduino board. This file is then uploaded to the board: transmitted over the USB or serial connection via the bootloader already on the chip or with external programming hardware.","title":"Overview"},{"location":"sketch-build-process/#pre-processing","text":"The Arduino development software performs a few transformations to your sketch before passing it to the compiler (e.g., avr-gcc ): All .ino and .pde files in the sketch folder (shown in the Arduino IDE as tabs with no extension) are concatenated together, starting with the file that matches the folder name followed by the others in alphabetical order. The .cpp filename extension is then added to the resulting file. If not already present, #include <Arduino.h> is added to the sketch. This header file (found in the core folder for the currently selected board) includes all the definitions needed for the standard Arduino core. Prototypes are generated for all function definitions in .ino/.pde files that don't already have prototypes. In some rare cases, prototype generation may fail for some functions. To work around this, you can provide your own prototypes for these functions. #line directives are added to make warning or error messages reflect the original sketch layout. No pre-processing is done to files in a sketch with any extension other than .ino or .pde. Additionally, .h files in the sketch are not automatically #included from the main sketch file. Further, if you want to call functions defined in a .c file from a .cpp file (like one generated from your sketch), you'll need to wrap its declarations in an extern \"C\" {} block that is defined only inside of C++ files.","title":"Pre-Processing"},{"location":"sketch-build-process/#dependency-resolution","text":"The sketch is scanned recursively for dependencies. There are predefined include search paths: Core library folder (as defined by {build.core} ) Variant folder (as defined by {build.variant} ) Standard system directories (e.g., {runtime.tools.avr-gcc.path}/avr/include ) Include search paths added to resolve prior dependencies If the dependency is not present in any of those locations, the installed libraries are then searched (see the Location Priority table below for library locations). For information on the allowed library sub-folder structures see the Arduino library specification . -I options are generated for the path to each library dependency and appended to the includes property , to be used in compilation recipes in platform.txt. If multiple libraries contain a file that matches the #include directive, the priority is determined by applying the following rules, one by one in this order, until a rule determines a winner: A library that has been specified using the --library option of arduino-cli compile wins against a library in other locations A library that is architecture compatible wins against a library that is not architecture compatible (see Architecture Matching ) A library with both library name and folder name matching the include wins A library that has better \"library name priority\" or \"folder name priority\" wins (see Library Name Priority and Folder Name Priority ) A library that is architecture optimized wins against a library that is not architecture optimized (see Architecture Matching ) A library that has a better \"location priority\" wins (see Location Priority ) A library that has a folder name with a better score using the \"closest-match\" algorithm wins A library that has a folder name that comes first in alphanumeric order wins","title":"Dependency Resolution"},{"location":"sketch-build-process/#architecture-matching","text":"A library is considered compatible with architecture X if the architectures field in library.properties : explicitly contains the architecture X contains the catch-all * is not specified at all. A library is considered optimized for architecture X only if the architectures field in library.properties explicitly contains the architecture X . This means that a library that is optimized for architecture X is also compatible with it. Examples: architectures field in library.properties Compatible with avr Optimized for avr not specified YES NO architectures=* YES NO architectures=avr YES YES architectures=*,avr YES YES architectures=*,esp8266 YES NO architectures=avr,esp8266 YES YES architectures=samd NO NO","title":"Architecture Matching"},{"location":"sketch-build-process/#library-name-priority","text":"A library's name is defined by the library.properties name field. That value is sanitized by replacing spaces with _ before comparing it to the file name of the include. The \"library name priority\" is determined as follows (in order of highest to lowest priority): Rule Example for Arduino_Low_Power.h The library name matches the include 100% Arduino Low Power The library name matches the include 100%, except with a -main suffix Arduino Low Power-main The library name matches the include 100%, except with a -master suffix Arduino Low Power-master The library name has a matching prefix Arduino Low Power Whatever The library name has a matching suffix Awesome Arduino Low Power The library name contains the include The Arduino Low Power Lib","title":"Library Name Priority"},{"location":"sketch-build-process/#folder-name-priority","text":"The \"folder name priority\" is determined as follows (in order of highest to lowest priority): Rule Example for Servo.h The folder name matches the include 100% Servo The folder name matches the include 100%, except with a -main suffix Servo-main The folder name matches the include 100%, except with a -master suffix Servo-master The folder name has a matching prefix ServoWhatever The folder name has a matching suffix AwesomeServo The folder name contains the include AnAwesomeServoForWhatever","title":"Folder Name Priority"},{"location":"sketch-build-process/#location-priority","text":"The \"location priority\" is determined as follows (in order of highest to lowest priority): The library is under a custom libraries path specified via the --libraries option of arduino-cli compile (in decreasing order of priority when multiple custom paths are defined) The library is under the libraries subfolder of the IDE's sketchbook or Arduino CLI's user directory The library is bundled with the board platform/core ( {runtime.platform.path}/libraries ) The library is bundled with the referenced board platform/core The library is bundled with the Arduino IDE (this location is determined by the Arduino CLI configuration setting directories.builtin.libraries )","title":"Location Priority"},{"location":"sketch-build-process/#location-priorities-in-arduino-web-editor","text":"The location priorities system works in the same manner in Arduino Web Editor , but its cloud-based nature may make the locations of libraries less obvious. Custom : the imported libraries, shown under the Libraries > Custom tab. These libraries are under /tmp/\\<some number>/custom Pinned : libraries that were associated with the sketch by choosing a specific version from the library's \"Include\" dropdown menu. These libraries are under /tmp/\\<some number>/pinned Note: clicking the \"Include\" button does not result in the library being pinned to the sketch. Platform bundled : these are listed under the Libraries > Default tab, but with \"for \\<architecture name>\" appended to the library name (e.g., \"SPI for AVR\"). These libraries are under /home/builder/.arduino15/packages 1. Board platform bundled 1. Core platform bundled Built-in : The non-platform bundled libraries listed under the Libraries > Default tab. Libraries listed under Libraries > Library Manager . These libraries are under /home/builder/opt/libraries/latest","title":"Location priorities in Arduino Web Editor"},{"location":"sketch-build-process/#compilation","text":"Sketches are compiled by architecture-specific versions of gcc and g++ according to the variables in the boards.txt file of the selected board's platform . The sketch is built in a temporary directory in the system-wide temporary directory (e.g. /tmp on Linux). Files taken as source files for the build process are .S, .c and .cpp files (including the .cpp file generated from the sketch's .ino and .pde files during the sketch pre-processing step). Source files of the target are compiled and output with .o extensions to this build directory, as are the main sketch files and any other source files in the sketch and any source files in any libraries which are #include d in the sketch. Before compiling a source file, an attempt is made to reuse the previously compiled .o file, which speeds up the build process. A special .d (dependency) file provides a list of all other files included by the source. The compile step is skipped if the .o and .d files exist and have timestamps newer than the source and all the dependent files. If the source or any dependent file has been modified, or any error occurs verifying the files, the compiler is run normally, writing a new .o & .d file. After a new board is selected from the IDE's Board menu, all source files are rebuilt on the next compile. These .o files are then linked together into a static library and the main sketch file is linked against this library. Only the parts of the library needed for your sketch are included in the final .hex file, reducing the size of most sketches. The .hex file is the final output of the compilation which is then uploaded to the board. If verbose output during compilation is enabled, the complete command line of each external command executed as part of the build process will be printed in the console.","title":"Compilation"},{"location":"sketch-build-process/#uploading","text":"Sketches are uploaded by a platform-specific upload tool (e.g., avrdude). The upload process is also controlled by variables in the boards and main preferences files. See the Arduino platform specification page for details. If verbose output during upload is enabled, debugging information will be output to the console, including the upload tool's command lines and verbose output.","title":"Uploading"},{"location":"sketch-project-file/","text":"Sketch metadata is defined in a file named sketch.yaml . This file is in YAML format. Build profiles \u00b6 Arduino CLI provides support for reproducible builds through the use of build profiles. A profile is a complete description of all the resources needed to build a sketch. The sketch project file may contain multiple profiles. Each profile will define: The board FQBN The programmer to use The target core platform name and version (with the 3rd party platform index URL if needed) A possible core platform name and version, that is a dependency of the target core platform (with the 3rd party platform index URL if needed) The libraries used in the sketch (including their version) The format of the file is the following: profiles: <PROFILE_NAME>: notes: <USER_NOTES> fqbn: <FQBN> programmer: <PROGRAMMER> platforms: - platform: <PLATFORM> (<PLATFORM_VERSION>) platform_index_url: <3RD_PARTY_PLATFORM_URL> - platform: <PLATFORM_DEPENDENCY> (<PLATFORM_DEPENDENCY_VERSION>) platform_index_url: <3RD_PARTY_PLATFORM_DEPENDENCY_URL> libraries: - <LIB_NAME> (<LIB_VERSION>) - <LIB_NAME> (<LIB_VERSION>) - <LIB_NAME> (<LIB_VERSION>) ...more profiles here... There is an optional profiles: section containing all the profiles. Each field in a profile is mandatory (unless noted otherwise below). The available fields are: <PROFILE_NAME> is the profile identifier, it\u2019s a user-defined field, and the allowed characters are alphanumerics, underscore _ , dot . , and dash - . <PLATFORM> is the target core platform identifier, for example, arduino:avr or adafruit:samd . <PLATFORM_VERSION> is the target core platform version required. <3RD_PARTY_PLATFORM_URL> is the index URL to download the target core platform (also known as \u201cAdditional Boards Manager URLs\u201d in the Arduino IDE). This field can be omitted for the official arduino:* platforms. <PLATFORM_DEPENDENCY> , <PLATFORM_DEPENDENCY_VERSION> , and <3RD_PARTY_PLATFORM_DEPENDENCY_URL> contains the same information as <PLATFORM> , <PLATFORM_VERSION> , and <3RD_PARTY_PLATFORM_URL> respectively but for the core platform dependency of the main core platform. These fields are optional. libraries: is a section where the required libraries to build the project are defined. This section is optional. <LIB_VERSION> is the version required for the library, for example, 1.0.0 . <USER_NOTES> is a free text string available to the developer to add comments. This field is optional. <PROGRAMMER> is the programmer that will be used. This field is optional. A complete example of a sketch project file may be the following: profiles: nanorp: fqbn: arduino:mbed_nano:nanorp2040connect platforms: - platform: arduino:mbed_nano (2.1.0) libraries: - ArduinoIoTCloud (1.0.2) - Arduino_ConnectionHandler (0.6.4) - TinyDHT sensor library (1.1.0) another_profile_name: notes: testing the limit of the AVR platform, may be unstable fqbn: arduino:avr:uno platforms: - platform: arduino:avr (1.8.4) libraries: - VitconMQTT (1.0.1) - Arduino_ConnectionHandler (0.6.4) - TinyDHT sensor library (1.1.0) tiny: notes: testing the very limit of the AVR platform, it will be very unstable fqbn: attiny:avr:ATtinyX5:cpu=attiny85,clock=internal16 platforms: - platform: attiny:avr@1.0.2 platform_index_url: https://raw.githubusercontent.com/damellis/attiny/ide-1.6.x-boards-manager/package_damellis_attiny_index.json - platform: arduino:avr@1.8.3 libraries: - ArduinoIoTCloud (1.0.2) - Arduino_ConnectionHandler (0.6.4) - TinyDHT sensor library (1.1.0) feather: fqbn: adafruit:samd:adafruit_feather_m0 platforms: - platform: adafruit:samd (1.6.0) platform_index_url: https://adafruit.github.io/arduino-board-index/package_adafruit_index.json libraries: - ArduinoIoTCloud (1.0.2) - Arduino_ConnectionHandler (0.6.4) - TinyDHT sensor library (1.1.0) default_profile: nanorp Building a sketch \u00b6 When a sketch project file is present, it can be leveraged to compile the sketch with the --profile/-m flag in the compile command: arduino-cli compile --profile nanorp In this case, the sketch will be compiled using the core platform and libraries specified in the nanorp profile. If a core platform or a library is missing it will be automatically downloaded and installed on the fly in an isolated directory inside the data folder. The dedicated storage is not accessible to the user and is meant as a \"cache\" of the resources used to build the sketch. When using the profile-based build, the globally installed platforms and libraries are excluded from the compile and can not be used in any way. In other words, the build is isolated from the system and will rely only on the resources specified in the profile: this will ensure that the build is portable and reproducible independently from the platforms and libraries installed in the system. Using a default profile \u00b6 If a default_profile is specified in the sketch.yaml then the \u201cclassic\u201d compile command: arduino-cli compile [sketch] will, instead, trigger a profile-based build using the default profile indicated in the sketch.yaml . Default flags for Arduino CLI usage \u00b6 The sketch project file may be used to set the default value for some command line flags of the Arduino CLI, in particular: The default_fqbn key sets the default value for the --fqbn flag The default_programmer key sets the default value for the --programmer flag The default_port key sets the default value for the --port flag The default_protocol key sets the default value for the --protocol flag The default_profile key sets the default value for the --profile flag For example: default_fqbn: arduino:samd:mkr1000 default_programmer: atmel_ice default_port: /dev/ttyACM0 default_protocol: serial default_profile: myprofile With this configuration set, it is not necessary to specify the --fqbn , --programmer , --port , --protocol or --profile flags to the arduino-cli compile , arduino-cli upload or arduino-cli debug commands when compiling, uploading or debugging the sketch.","title":"Sketch project file"},{"location":"sketch-project-file/#build-profiles","text":"Arduino CLI provides support for reproducible builds through the use of build profiles. A profile is a complete description of all the resources needed to build a sketch. The sketch project file may contain multiple profiles. Each profile will define: The board FQBN The programmer to use The target core platform name and version (with the 3rd party platform index URL if needed) A possible core platform name and version, that is a dependency of the target core platform (with the 3rd party platform index URL if needed) The libraries used in the sketch (including their version) The format of the file is the following: profiles: <PROFILE_NAME>: notes: <USER_NOTES> fqbn: <FQBN> programmer: <PROGRAMMER> platforms: - platform: <PLATFORM> (<PLATFORM_VERSION>) platform_index_url: <3RD_PARTY_PLATFORM_URL> - platform: <PLATFORM_DEPENDENCY> (<PLATFORM_DEPENDENCY_VERSION>) platform_index_url: <3RD_PARTY_PLATFORM_DEPENDENCY_URL> libraries: - <LIB_NAME> (<LIB_VERSION>) - <LIB_NAME> (<LIB_VERSION>) - <LIB_NAME> (<LIB_VERSION>) ...more profiles here... There is an optional profiles: section containing all the profiles. Each field in a profile is mandatory (unless noted otherwise below). The available fields are: <PROFILE_NAME> is the profile identifier, it\u2019s a user-defined field, and the allowed characters are alphanumerics, underscore _ , dot . , and dash - . <PLATFORM> is the target core platform identifier, for example, arduino:avr or adafruit:samd . <PLATFORM_VERSION> is the target core platform version required. <3RD_PARTY_PLATFORM_URL> is the index URL to download the target core platform (also known as \u201cAdditional Boards Manager URLs\u201d in the Arduino IDE). This field can be omitted for the official arduino:* platforms. <PLATFORM_DEPENDENCY> , <PLATFORM_DEPENDENCY_VERSION> , and <3RD_PARTY_PLATFORM_DEPENDENCY_URL> contains the same information as <PLATFORM> , <PLATFORM_VERSION> , and <3RD_PARTY_PLATFORM_URL> respectively but for the core platform dependency of the main core platform. These fields are optional. libraries: is a section where the required libraries to build the project are defined. This section is optional. <LIB_VERSION> is the version required for the library, for example, 1.0.0 . <USER_NOTES> is a free text string available to the developer to add comments. This field is optional. <PROGRAMMER> is the programmer that will be used. This field is optional. A complete example of a sketch project file may be the following: profiles: nanorp: fqbn: arduino:mbed_nano:nanorp2040connect platforms: - platform: arduino:mbed_nano (2.1.0) libraries: - ArduinoIoTCloud (1.0.2) - Arduino_ConnectionHandler (0.6.4) - TinyDHT sensor library (1.1.0) another_profile_name: notes: testing the limit of the AVR platform, may be unstable fqbn: arduino:avr:uno platforms: - platform: arduino:avr (1.8.4) libraries: - VitconMQTT (1.0.1) - Arduino_ConnectionHandler (0.6.4) - TinyDHT sensor library (1.1.0) tiny: notes: testing the very limit of the AVR platform, it will be very unstable fqbn: attiny:avr:ATtinyX5:cpu=attiny85,clock=internal16 platforms: - platform: attiny:avr@1.0.2 platform_index_url: https://raw.githubusercontent.com/damellis/attiny/ide-1.6.x-boards-manager/package_damellis_attiny_index.json - platform: arduino:avr@1.8.3 libraries: - ArduinoIoTCloud (1.0.2) - Arduino_ConnectionHandler (0.6.4) - TinyDHT sensor library (1.1.0) feather: fqbn: adafruit:samd:adafruit_feather_m0 platforms: - platform: adafruit:samd (1.6.0) platform_index_url: https://adafruit.github.io/arduino-board-index/package_adafruit_index.json libraries: - ArduinoIoTCloud (1.0.2) - Arduino_ConnectionHandler (0.6.4) - TinyDHT sensor library (1.1.0) default_profile: nanorp","title":"Build profiles"},{"location":"sketch-project-file/#building-a-sketch","text":"When a sketch project file is present, it can be leveraged to compile the sketch with the --profile/-m flag in the compile command: arduino-cli compile --profile nanorp In this case, the sketch will be compiled using the core platform and libraries specified in the nanorp profile. If a core platform or a library is missing it will be automatically downloaded and installed on the fly in an isolated directory inside the data folder. The dedicated storage is not accessible to the user and is meant as a \"cache\" of the resources used to build the sketch. When using the profile-based build, the globally installed platforms and libraries are excluded from the compile and can not be used in any way. In other words, the build is isolated from the system and will rely only on the resources specified in the profile: this will ensure that the build is portable and reproducible independently from the platforms and libraries installed in the system.","title":"Building a sketch"},{"location":"sketch-project-file/#using-a-default-profile","text":"If a default_profile is specified in the sketch.yaml then the \u201cclassic\u201d compile command: arduino-cli compile [sketch] will, instead, trigger a profile-based build using the default profile indicated in the sketch.yaml .","title":"Using a default profile"},{"location":"sketch-project-file/#default-flags-for-arduino-cli-usage","text":"The sketch project file may be used to set the default value for some command line flags of the Arduino CLI, in particular: The default_fqbn key sets the default value for the --fqbn flag The default_programmer key sets the default value for the --programmer flag The default_port key sets the default value for the --port flag The default_protocol key sets the default value for the --protocol flag The default_profile key sets the default value for the --profile flag For example: default_fqbn: arduino:samd:mkr1000 default_programmer: atmel_ice default_port: /dev/ttyACM0 default_protocol: serial default_profile: myprofile With this configuration set, it is not necessary to specify the --fqbn , --programmer , --port , --protocol or --profile flags to the arduino-cli compile , arduino-cli upload or arduino-cli debug commands when compiling, uploading or debugging the sketch.","title":"Default flags for Arduino CLI usage"},{"location":"sketch-specification/","text":"This is the specification for Arduino sketches. The programs that run on Arduino boards are called \"sketches\". This term was inherited from Processing , upon which the Arduino IDE and the core API were based. Sketch folders and files \u00b6 The sketch root folder name and code file names must start with a basic letter ( A - Z or a - z ), number ( 0 - 9 ) 1 , or underscore ( _ ) 2 followed by basic letters, numbers, underscores, dots ( . ) and dashes ( - ). The maximum length is 63 characters. The sketch name cannot end with a dot ( . ) and cannot be a reserved name . 1 Supported from Arduino IDE 1.8.4. 2 Supported in all versions except Arduino IDE 2.0.4/Arduino CLI 0.30.0 - 0.30.1. Sketch root folder \u00b6 Because many Arduino sketches only contain a single .ino file, it's easy to think of that file as the sketch. However, it is the folder that is the sketch. The reason is that sketches may consist of multiple code files and the folder is what groups those files into a single program. Primary sketch file \u00b6 Every sketch must contain a .ino file with a file name matching the sketch root folder name. .pde is also supported but deprecated and will be removed in the future, using the .ino extension is strongly recommended. Additional code files \u00b6 Sketches may consist of multiple code files. The following extensions are supported: .ino - Arduino language files. .pde - Alternate extension for Arduino language files. This file extension is also used by Processing sketches. .ino is recommended to avoid confusion. .pde extension is deprecated and will be removed in the future. .cpp - C++ files. .c - C Files. .S - Assembly language files. .h, .hpp, .hh 1 - Header files. .tpp, .ipp 2 - Header files. 1 .hpp and .hh supported from Arduino IDE 1.8.0/arduino-builder 1.3.22. 2 Supported from Arduino CLI 0.19.0. For information about how each of these files and other parts of the sketch are used during compilation, see the Sketch build process documentation . src subfolder \u00b6 The contents of the src subfolder are compiled recursively. Unlike the code files in the sketch root folder, these files are not shown as tabs in the IDEs. This is useful for files you don't want to expose to the sketch user via the IDE's interface. It can be used to bundle libraries with the sketch in order to make it a self-contained project. Arduino language files under the src folder are not supported. In Arduino IDE 1.6.5-r5 and older, no recursive compilation was done. In Arduino IDE 1.6.6 - 1.6.9, recursive compilation was done of all subfolders of the sketch folder. In Arduino IDE 1.6.10 and newer, recursive compilation is limited to the src subfolder of the sketch folder. data subfolder \u00b6 The data folder is used to add additional files to the sketch, which will not be compiled. Files added to the sketch via the Arduino IDE's Sketch > Add File... are placed in the data folder. The Arduino IDE's File > Save As... only copies the code files in the sketch root folder and the full contents of the data folder, so any non-code files outside the data folder are stripped. Metadata \u00b6 sketch.json \u00b6 Arduino Web Editor uses a file named sketch.json , located in the sketch root folder, to store sketch metadata. This file is not used by Arduino CLI or Arduino IDE, if you're not an Arduino Web Editor user you can safely ignore the file. The cpu key contains the board configuration information. This can be set by selecting a board in the Arduino Web Editor while the sketch is open. The included_libs key defines the library versions the Arduino Web Editor uses when the sketch is compiled. This is Arduino Web Editor specific because all versions of all the Library Manager libraries are pre-installed in Arduino Web Editor, while only one version of each library may be installed when using the other Arduino development software. Sketch project file \u00b6 This is an optional file named sketch.yaml , located in the root folder of the sketch. Inside the sketch project file the user can define one or more \"profiles\": each profile is a description of all the resources needed to build the sketch (platform and libraries each pinned to a specific version). The sketch project file is also used in the arduino-cli board attach command to store the currently selected board and port. For more information see the sketch project file documentation. Secrets \u00b6 Arduino Web Editor has a \"Secret tab\" feature that makes it easy to share sketches without accidentally exposing sensitive data (e.g., passwords or tokens). The Arduino Web Editor automatically generates macros for any identifier in the sketch which starts with SECRET_ and contains all uppercase characters. When you download a sketch from Arduino Web Editor that contains a Secret tab, the empty #define directives for the secrets are in a file named arduino_secrets.h, with an #include directive to that file at the top of the primary sketch file. This is hidden when viewing the sketch in Arduino Web Editor. Documentation \u00b6 Image and text files in common formats which are present in the sketch root folder are displayed in tabs in the Arduino Web Editor. Sketch file structure example \u00b6 Foo |_ arduino_secrets.h |_ Abc.ino |_ Def.cpp |_ Def.h |_ Foo.ino |_ Ghi.c |_ Ghi.h |_ Jkl.h |_ Jkl.S |_ sketch.yaml |_ data | |_ Schematic.pdf |_ src |_ SomeLib |_ library.properties |_ src |_ SomeLib.h |_ SomeLib.cpp Sketchbook \u00b6 The Arduino IDE provides a \"sketchbook\" folder (analogous to Arduino CLI's \"user directory\"). In addition to being the place where user libraries and manually installed platforms are installed, the sketchbook is a convenient place to store sketches. Sketches in the sketchbook folder appear under the Arduino IDE's File > Sketchbook menu. However, there is no requirement to store sketches in the sketchbook folder. Library/Boards Manager links \u00b6 (available in Arduino IDE >=1.6.9 <2.x || >=2.0.1) A URI in a comment in the form: http://librarymanager[/TYPE_FILTER[/TOPIC_FILTER]][#SEARCH_KEYWORDS] will open a search in Library Manager when clicked in the Arduino IDE. A URI in a comment in the form: http://boardsmanager[/TYPE_FILTER][#SEARCH_KEYWORDS] will open a search in Boards Manager when clicked in the Arduino IDE. These links can be used to offer the user an easy way to install dependencies of the sketch. The search field will be populated with the SEARCH_KEYWORDS fragment component of the URI. Any characters other than A - Z , a - z , 0 - 9 , and : are treated as spaces by the search algorithm, which allows multiple keywords to be specified via the URI. (available in Arduino IDE >=2.0.1) The \" Type \" filter will be set to the optional TYPE_FILTER path component of the URI. The Library Manager \" Topic \" filter will be set to the optional TOPIC_FILTER path component of the URI. Unlike the SEARCH_KEYWORDS fragment, spaces and reserved characters in these components must be percent-encoded (e.g., Signal%20Input%2FOutput ). Although the filter setting is not supported by previous IDE versions, URIs containing these path components still function in all other respects. This feature is only available when using the Arduino IDE, so be sure to provide supplementary documentation to help the users of other development software install the sketch dependencies. Example \u00b6 // install the Arduino SAMD Boards platform to add support for your MKR WiFi 1010 board // if using the Arduino IDE, click here: http://boardsmanager/Arduino#SAMD // install the WiFiNINA library via Library Manager // if using the Arduino IDE, click here: http://librarymanager/Arduino/Communication#WiFiNINA #include <WiFiNINA.h> See also \u00b6 Sketch build process documentation Style guide for example sketches","title":"Sketch specification"},{"location":"sketch-specification/#sketch-folders-and-files","text":"The sketch root folder name and code file names must start with a basic letter ( A - Z or a - z ), number ( 0 - 9 ) 1 , or underscore ( _ ) 2 followed by basic letters, numbers, underscores, dots ( . ) and dashes ( - ). The maximum length is 63 characters. The sketch name cannot end with a dot ( . ) and cannot be a reserved name . 1 Supported from Arduino IDE 1.8.4. 2 Supported in all versions except Arduino IDE 2.0.4/Arduino CLI 0.30.0 - 0.30.1.","title":"Sketch folders and files"},{"location":"sketch-specification/#sketch-root-folder","text":"Because many Arduino sketches only contain a single .ino file, it's easy to think of that file as the sketch. However, it is the folder that is the sketch. The reason is that sketches may consist of multiple code files and the folder is what groups those files into a single program.","title":"Sketch root folder"},{"location":"sketch-specification/#primary-sketch-file","text":"Every sketch must contain a .ino file with a file name matching the sketch root folder name. .pde is also supported but deprecated and will be removed in the future, using the .ino extension is strongly recommended.","title":"Primary sketch file"},{"location":"sketch-specification/#additional-code-files","text":"Sketches may consist of multiple code files. The following extensions are supported: .ino - Arduino language files. .pde - Alternate extension for Arduino language files. This file extension is also used by Processing sketches. .ino is recommended to avoid confusion. .pde extension is deprecated and will be removed in the future. .cpp - C++ files. .c - C Files. .S - Assembly language files. .h, .hpp, .hh 1 - Header files. .tpp, .ipp 2 - Header files. 1 .hpp and .hh supported from Arduino IDE 1.8.0/arduino-builder 1.3.22. 2 Supported from Arduino CLI 0.19.0. For information about how each of these files and other parts of the sketch are used during compilation, see the Sketch build process documentation .","title":"Additional code files"},{"location":"sketch-specification/#src-subfolder","text":"The contents of the src subfolder are compiled recursively. Unlike the code files in the sketch root folder, these files are not shown as tabs in the IDEs. This is useful for files you don't want to expose to the sketch user via the IDE's interface. It can be used to bundle libraries with the sketch in order to make it a self-contained project. Arduino language files under the src folder are not supported. In Arduino IDE 1.6.5-r5 and older, no recursive compilation was done. In Arduino IDE 1.6.6 - 1.6.9, recursive compilation was done of all subfolders of the sketch folder. In Arduino IDE 1.6.10 and newer, recursive compilation is limited to the src subfolder of the sketch folder.","title":"src subfolder"},{"location":"sketch-specification/#data-subfolder","text":"The data folder is used to add additional files to the sketch, which will not be compiled. Files added to the sketch via the Arduino IDE's Sketch > Add File... are placed in the data folder. The Arduino IDE's File > Save As... only copies the code files in the sketch root folder and the full contents of the data folder, so any non-code files outside the data folder are stripped.","title":"data subfolder"},{"location":"sketch-specification/#metadata","text":"","title":"Metadata"},{"location":"sketch-specification/#sketchjson","text":"Arduino Web Editor uses a file named sketch.json , located in the sketch root folder, to store sketch metadata. This file is not used by Arduino CLI or Arduino IDE, if you're not an Arduino Web Editor user you can safely ignore the file. The cpu key contains the board configuration information. This can be set by selecting a board in the Arduino Web Editor while the sketch is open. The included_libs key defines the library versions the Arduino Web Editor uses when the sketch is compiled. This is Arduino Web Editor specific because all versions of all the Library Manager libraries are pre-installed in Arduino Web Editor, while only one version of each library may be installed when using the other Arduino development software.","title":"sketch.json"},{"location":"sketch-specification/#sketch-project-file","text":"This is an optional file named sketch.yaml , located in the root folder of the sketch. Inside the sketch project file the user can define one or more \"profiles\": each profile is a description of all the resources needed to build the sketch (platform and libraries each pinned to a specific version). The sketch project file is also used in the arduino-cli board attach command to store the currently selected board and port. For more information see the sketch project file documentation.","title":"Sketch project file"},{"location":"sketch-specification/#secrets","text":"Arduino Web Editor has a \"Secret tab\" feature that makes it easy to share sketches without accidentally exposing sensitive data (e.g., passwords or tokens). The Arduino Web Editor automatically generates macros for any identifier in the sketch which starts with SECRET_ and contains all uppercase characters. When you download a sketch from Arduino Web Editor that contains a Secret tab, the empty #define directives for the secrets are in a file named arduino_secrets.h, with an #include directive to that file at the top of the primary sketch file. This is hidden when viewing the sketch in Arduino Web Editor.","title":"Secrets"},{"location":"sketch-specification/#documentation","text":"Image and text files in common formats which are present in the sketch root folder are displayed in tabs in the Arduino Web Editor.","title":"Documentation"},{"location":"sketch-specification/#sketch-file-structure-example","text":"Foo |_ arduino_secrets.h |_ Abc.ino |_ Def.cpp |_ Def.h |_ Foo.ino |_ Ghi.c |_ Ghi.h |_ Jkl.h |_ Jkl.S |_ sketch.yaml |_ data | |_ Schematic.pdf |_ src |_ SomeLib |_ library.properties |_ src |_ SomeLib.h |_ SomeLib.cpp","title":"Sketch file structure example"},{"location":"sketch-specification/#sketchbook","text":"The Arduino IDE provides a \"sketchbook\" folder (analogous to Arduino CLI's \"user directory\"). In addition to being the place where user libraries and manually installed platforms are installed, the sketchbook is a convenient place to store sketches. Sketches in the sketchbook folder appear under the Arduino IDE's File > Sketchbook menu. However, there is no requirement to store sketches in the sketchbook folder.","title":"Sketchbook"},{"location":"sketch-specification/#libraryboards-manager-links","text":"(available in Arduino IDE >=1.6.9 <2.x || >=2.0.1) A URI in a comment in the form: http://librarymanager[/TYPE_FILTER[/TOPIC_FILTER]][#SEARCH_KEYWORDS] will open a search in Library Manager when clicked in the Arduino IDE. A URI in a comment in the form: http://boardsmanager[/TYPE_FILTER][#SEARCH_KEYWORDS] will open a search in Boards Manager when clicked in the Arduino IDE. These links can be used to offer the user an easy way to install dependencies of the sketch. The search field will be populated with the SEARCH_KEYWORDS fragment component of the URI. Any characters other than A - Z , a - z , 0 - 9 , and : are treated as spaces by the search algorithm, which allows multiple keywords to be specified via the URI. (available in Arduino IDE >=2.0.1) The \" Type \" filter will be set to the optional TYPE_FILTER path component of the URI. The Library Manager \" Topic \" filter will be set to the optional TOPIC_FILTER path component of the URI. Unlike the SEARCH_KEYWORDS fragment, spaces and reserved characters in these components must be percent-encoded (e.g., Signal%20Input%2FOutput ). Although the filter setting is not supported by previous IDE versions, URIs containing these path components still function in all other respects. This feature is only available when using the Arduino IDE, so be sure to provide supplementary documentation to help the users of other development software install the sketch dependencies.","title":"Library/Boards Manager links"},{"location":"sketch-specification/#example","text":"// install the Arduino SAMD Boards platform to add support for your MKR WiFi 1010 board // if using the Arduino IDE, click here: http://boardsmanager/Arduino#SAMD // install the WiFiNINA library via Library Manager // if using the Arduino IDE, click here: http://librarymanager/Arduino/Communication#WiFiNINA #include <WiFiNINA.h>","title":"Example"},{"location":"sketch-specification/#see-also","text":"Sketch build process documentation Style guide for example sketches","title":"See also"},{"location":"versioning/","text":"Backward compatibility policy for arduino-cli. \u00b6 The arduino-cli project follows a strict semantic versioning policy. We are committing not to make breaking changes in minor releases after the release of version 1.0.0. The project is currently in the last period of the Beta phase. The release rules are the following: Alpha phase 0.0.X : In this phase, the software is going through a quick iteration of the API, each release (with increments of X) may contain massive and breaking changes. Beta phase 0.Y.X : The software is usable, but the API is still not settled and is under continuous testing and review. Breaking changes are expected. Bug fixes and new features are made as patch releases (with increments of X). Breaking changes due to API refinements are made as minor releases (with increments of Y). Production release-candidate 1.0.0-rc.X : in this phase, the software is considered ready for release and distributed to the users for final testing. Release candidates (with increments of X) are possible for bug fixes only. Production release 1.Y.X : For the production releases backward compatibility is guaranteed, and all the breaking changes are cumulated for the next major release (2.0.0). Bug fixes are made as patch releases (with increments of X); New features are released as minor releases (with increments of Y). Next major release development 2.0.0 and up: see below. Backward compatibility guarantees and definition of \"breaking change\" \u00b6 There are three main user facing API in the arduino-cli project: the standalone command-line API the gRPC API the golang API Let's examine the backward compatibility rules for each one of these categories. Breaking changes in the command-line app \u00b6 Changes in the command-line interface are considered breaking if: a command, a positional argument, or a flag is removed or renamed a command, a positional argument, or a flag behavior is changed an optional positional argument or a flag is made mandatory a positional argument or a flag format is changed The following changes to the command-line syntax are NOT considered breaking: a new command is added a new optional positional argument is added a new optional flag is added Any change in the human-readable text output is NOT considered a breaking change. In general, the human-readable text is subject to translation and small adjustments in natural language syntax and presentation. We will consider breaking changes only in the machine-readable output of the commands using the --json flag. In particular, we have a breaking change in the JSON command output if: a key in a JSON object is renamed or removed. a value in a JSON object or array changes meaning or changes format. We do NOT have a breaking change if: a new key is added to an existing JSON object Breaking changes in the gRPC API \u00b6 To ensure gRPC API backward compatibility the only allowed changes are: adding a new service adding a new method to a service adding a field to an existing message adding a value to an enum In general, adding to the gRPC API is allowed, ANY OTHER change will be considered a breaking change, some examples are: renaming a service renaming a method changing a method signature renaming a field in a message changing a field type in a message deleting a field in a message etc. The gRPC API is defined as a gRPC service running in the endpoint cc.arduino.cli.commands.v1 . When a breaking change happens a new gRPC endpoint is created from the existing API. The first breaking change will be implemented in the new service cc.arduino.cli.commands.v2 . Breaking changes in the golang API \u00b6 The public golang API from the import path github.com/arduino/arduino-cli is guaranteed to be stable. Breaking changes in the API will follow the go-lang guidelines and will be implemented by changing the import path by adding the /v2 suffix: github.com/arduino/arduino-cli/v2 . Development process for the next major releases. \u00b6 The development of the 2.0.0 release will proceed in a separate git branch 2.x.x , in parallel with the 1.0.0 releases that will continue on the master git branch. New features and bug fixes should be made on the master branch and ported to the 2.x.x once completed (unless it's a 2.0 specific change, in that case, it's fine to develop directly on the 2.x.x branch). Future releases and pre-releases of the 2.x.x will follow the following versioning policy: Beta 2.0.0-beta.X.Y : The v2 API is still under testing and review. Bug fixes and new features are released with increments of Y. Breaking changes are still possible and released with increments of X. Release Candidate 2.0.0-rc.X : The v2 API is ready for release. Release candidates are distributed for user testing. Bug-fix releases only are allowed (with increments of X). 2.0.0 and up: The same rules for the 1.0.0 applies. After the 2.0.0 release, the master branch will be moved to 2.x.x , and the 1.0 branch will be tracked by a new 1.x.x branch. The command-line interface for CLI 2.0 will be incompatible with CLI 1.0. Some commands may still be compatible though depending on the amount of changes. The gRPC daemon is flexible enough to run both services v1 and v2 at the same time. This capability allows a deprecation period to allow a soft transition from v1 API to v2 API. We will deprecate the v1 API in the CLI 2.0 series but we will continue to support it until the next major release CLI 3.0. At that point, we may decide to drop the support for the v1 API entirely but, depending on the balance between user demand and maintenance effort, we may decide to continue to support it. The go-lang API import path will be updated, following the go modules guidelines, by adding the /v2 suffix: github.com/arduino/arduino-cli/v2 . Unlike the gRPC counterpart, we will not guarantee a deprecation policy and a soft transition period for the go-lang API (but again depending on the balance between user demand and maintenance effort we may decide to deprecate some API).","title":"Backward compatibility policy"},{"location":"versioning/#backward-compatibility-policy-for-arduino-cli","text":"The arduino-cli project follows a strict semantic versioning policy. We are committing not to make breaking changes in minor releases after the release of version 1.0.0. The project is currently in the last period of the Beta phase. The release rules are the following: Alpha phase 0.0.X : In this phase, the software is going through a quick iteration of the API, each release (with increments of X) may contain massive and breaking changes. Beta phase 0.Y.X : The software is usable, but the API is still not settled and is under continuous testing and review. Breaking changes are expected. Bug fixes and new features are made as patch releases (with increments of X). Breaking changes due to API refinements are made as minor releases (with increments of Y). Production release-candidate 1.0.0-rc.X : in this phase, the software is considered ready for release and distributed to the users for final testing. Release candidates (with increments of X) are possible for bug fixes only. Production release 1.Y.X : For the production releases backward compatibility is guaranteed, and all the breaking changes are cumulated for the next major release (2.0.0). Bug fixes are made as patch releases (with increments of X); New features are released as minor releases (with increments of Y). Next major release development 2.0.0 and up: see below.","title":"Backward compatibility policy for arduino-cli."},{"location":"versioning/#backward-compatibility-guarantees-and-definition-of-breaking-change","text":"There are three main user facing API in the arduino-cli project: the standalone command-line API the gRPC API the golang API Let's examine the backward compatibility rules for each one of these categories.","title":"Backward compatibility guarantees and definition of \"breaking change\""},{"location":"versioning/#breaking-changes-in-the-command-line-app","text":"Changes in the command-line interface are considered breaking if: a command, a positional argument, or a flag is removed or renamed a command, a positional argument, or a flag behavior is changed an optional positional argument or a flag is made mandatory a positional argument or a flag format is changed The following changes to the command-line syntax are NOT considered breaking: a new command is added a new optional positional argument is added a new optional flag is added Any change in the human-readable text output is NOT considered a breaking change. In general, the human-readable text is subject to translation and small adjustments in natural language syntax and presentation. We will consider breaking changes only in the machine-readable output of the commands using the --json flag. In particular, we have a breaking change in the JSON command output if: a key in a JSON object is renamed or removed. a value in a JSON object or array changes meaning or changes format. We do NOT have a breaking change if: a new key is added to an existing JSON object","title":"Breaking changes in the command-line app"},{"location":"versioning/#breaking-changes-in-the-grpc-api","text":"To ensure gRPC API backward compatibility the only allowed changes are: adding a new service adding a new method to a service adding a field to an existing message adding a value to an enum In general, adding to the gRPC API is allowed, ANY OTHER change will be considered a breaking change, some examples are: renaming a service renaming a method changing a method signature renaming a field in a message changing a field type in a message deleting a field in a message etc. The gRPC API is defined as a gRPC service running in the endpoint cc.arduino.cli.commands.v1 . When a breaking change happens a new gRPC endpoint is created from the existing API. The first breaking change will be implemented in the new service cc.arduino.cli.commands.v2 .","title":"Breaking changes in the gRPC API"},{"location":"versioning/#breaking-changes-in-the-golang-api","text":"The public golang API from the import path github.com/arduino/arduino-cli is guaranteed to be stable. Breaking changes in the API will follow the go-lang guidelines and will be implemented by changing the import path by adding the /v2 suffix: github.com/arduino/arduino-cli/v2 .","title":"Breaking changes in the golang API"},{"location":"versioning/#development-process-for-the-next-major-releases","text":"The development of the 2.0.0 release will proceed in a separate git branch 2.x.x , in parallel with the 1.0.0 releases that will continue on the master git branch. New features and bug fixes should be made on the master branch and ported to the 2.x.x once completed (unless it's a 2.0 specific change, in that case, it's fine to develop directly on the 2.x.x branch). Future releases and pre-releases of the 2.x.x will follow the following versioning policy: Beta 2.0.0-beta.X.Y : The v2 API is still under testing and review. Bug fixes and new features are released with increments of Y. Breaking changes are still possible and released with increments of X. Release Candidate 2.0.0-rc.X : The v2 API is ready for release. Release candidates are distributed for user testing. Bug-fix releases only are allowed (with increments of X). 2.0.0 and up: The same rules for the 1.0.0 applies. After the 2.0.0 release, the master branch will be moved to 2.x.x , and the 1.0 branch will be tracked by a new 1.x.x branch. The command-line interface for CLI 2.0 will be incompatible with CLI 1.0. Some commands may still be compatible though depending on the amount of changes. The gRPC daemon is flexible enough to run both services v1 and v2 at the same time. This capability allows a deprecation period to allow a soft transition from v1 API to v2 API. We will deprecate the v1 API in the CLI 2.0 series but we will continue to support it until the next major release CLI 3.0. At that point, we may decide to drop the support for the v1 API entirely but, depending on the balance between user demand and maintenance effort, we may decide to continue to support it. The go-lang API import path will be updated, following the go modules guidelines, by adding the /v2 suffix: github.com/arduino/arduino-cli/v2 . Unlike the gRPC counterpart, we will not guarantee a deprecation policy and a soft transition period for the go-lang API (but again depending on the balance between user demand and maintenance effort we may decide to deprecate some API).","title":"Development process for the next major releases."},{"location":"commands/arduino-cli/","text":"arduino-cli \u00b6 Arduino CLI. Synopsis \u00b6 Arduino Command Line Interface (arduino-cli). Examples \u00b6 arduino-cli <command> [flags...] Options \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). -h, --help help for arduino-cli --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli board - Arduino board commands. arduino-cli burn-bootloader - Upload the bootloader. arduino-cli cache - Arduino cache commands. arduino-cli compile - Compiles Arduino sketches. arduino-cli completion - Generates completion scripts arduino-cli config - Arduino configuration commands. arduino-cli core - Arduino core operations. arduino-cli daemon - Run as a daemon on port: 50051 arduino-cli debug - Debug Arduino sketches. arduino-cli lib - Arduino commands about libraries. arduino-cli monitor - Open a communication port with a board. arduino-cli outdated - Lists cores and libraries that can be upgraded arduino-cli sketch - Arduino CLI sketch commands. arduino-cli update - Updates the index of cores and libraries arduino-cli upgrade - Upgrades installed cores and libraries. arduino-cli upload - Upload Arduino sketches. arduino-cli version - Shows version number of Arduino CLI.","title":"arduino-cli"},{"location":"commands/arduino-cli/#arduino-cli","text":"Arduino CLI.","title":"arduino-cli"},{"location":"commands/arduino-cli/#synopsis","text":"Arduino Command Line Interface (arduino-cli).","title":"Synopsis"},{"location":"commands/arduino-cli/#examples","text":"arduino-cli <command> [flags...]","title":"Examples"},{"location":"commands/arduino-cli/#options","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). -h, --help help for arduino-cli --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options"},{"location":"commands/arduino-cli/#see-also","text":"arduino-cli board - Arduino board commands. arduino-cli burn-bootloader - Upload the bootloader. arduino-cli cache - Arduino cache commands. arduino-cli compile - Compiles Arduino sketches. arduino-cli completion - Generates completion scripts arduino-cli config - Arduino configuration commands. arduino-cli core - Arduino core operations. arduino-cli daemon - Run as a daemon on port: 50051 arduino-cli debug - Debug Arduino sketches. arduino-cli lib - Arduino commands about libraries. arduino-cli monitor - Open a communication port with a board. arduino-cli outdated - Lists cores and libraries that can be upgraded arduino-cli sketch - Arduino CLI sketch commands. arduino-cli update - Updates the index of cores and libraries arduino-cli upgrade - Upgrades installed cores and libraries. arduino-cli upload - Upload Arduino sketches. arduino-cli version - Shows version number of Arduino CLI.","title":"SEE ALSO"},{"location":"commands/arduino-cli_board/","text":"arduino-cli board \u00b6 Arduino board commands. Synopsis \u00b6 Arduino board commands. Examples \u00b6 # Lists all connected boards. arduino-cli board list Options \u00b6 -h, --help help for board Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli - Arduino CLI. arduino-cli board attach - Attaches a sketch to a board. arduino-cli board details - Print details about a board. arduino-cli board list - List connected boards. arduino-cli board listall - List all known boards and their corresponding FQBN. arduino-cli board search - Search for a board in the Boards Manager.","title":"board"},{"location":"commands/arduino-cli_board/#arduino-cli-board","text":"Arduino board commands.","title":"arduino-cli board"},{"location":"commands/arduino-cli_board/#synopsis","text":"Arduino board commands.","title":"Synopsis"},{"location":"commands/arduino-cli_board/#examples","text":"# Lists all connected boards. arduino-cli board list","title":"Examples"},{"location":"commands/arduino-cli_board/#options","text":"-h, --help help for board","title":"Options"},{"location":"commands/arduino-cli_board/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_board/#see-also","text":"arduino-cli - Arduino CLI. arduino-cli board attach - Attaches a sketch to a board. arduino-cli board details - Print details about a board. arduino-cli board list - List connected boards. arduino-cli board listall - List all known boards and their corresponding FQBN. arduino-cli board search - Search for a board in the Boards Manager.","title":"SEE ALSO"},{"location":"commands/arduino-cli_board_attach/","text":"arduino-cli board attach \u00b6 Attaches a sketch to a board. Synopsis \u00b6 Sets the default values for port and FQBN. If no port, FQBN or programmer are specified, the current default port, FQBN and programmer are displayed. arduino-cli board attach [-p <port>] [-b <FQBN>] [-P <programmer>] [sketchPath] [flags] Examples \u00b6 arduino-cli board attach -p /dev/ttyACM0 arduino-cli board attach -p /dev/ttyACM0 HelloWorld arduino-cli board attach -b arduino:samd:mkr1000 arduino-cli board attach -P atmel_ice Options \u00b6 --board-options strings List of board options separated by commas. Or can be used multiple times for multiple options. --discovery-timeout duration Max time to wait for port discovery, e.g.: 30s, 1m (default 1s) -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for attach -p, --port string Upload port address, e.g.: COM3 or /dev/ttyACM2 -P, --programmer string Programmer to use, e.g: atmel_ice -l, --protocol string Upload port protocol, e.g: serial Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli board - Arduino board commands.","title":"board attach"},{"location":"commands/arduino-cli_board_attach/#arduino-cli-board-attach","text":"Attaches a sketch to a board.","title":"arduino-cli board attach"},{"location":"commands/arduino-cli_board_attach/#synopsis","text":"Sets the default values for port and FQBN. If no port, FQBN or programmer are specified, the current default port, FQBN and programmer are displayed. arduino-cli board attach [-p <port>] [-b <FQBN>] [-P <programmer>] [sketchPath] [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_board_attach/#examples","text":"arduino-cli board attach -p /dev/ttyACM0 arduino-cli board attach -p /dev/ttyACM0 HelloWorld arduino-cli board attach -b arduino:samd:mkr1000 arduino-cli board attach -P atmel_ice","title":"Examples"},{"location":"commands/arduino-cli_board_attach/#options","text":"--board-options strings List of board options separated by commas. Or can be used multiple times for multiple options. --discovery-timeout duration Max time to wait for port discovery, e.g.: 30s, 1m (default 1s) -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for attach -p, --port string Upload port address, e.g.: COM3 or /dev/ttyACM2 -P, --programmer string Programmer to use, e.g: atmel_ice -l, --protocol string Upload port protocol, e.g: serial","title":"Options"},{"location":"commands/arduino-cli_board_attach/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_board_attach/#see-also","text":"arduino-cli board - Arduino board commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_board_details/","text":"arduino-cli board details \u00b6 Print details about a board. Synopsis \u00b6 Show information about a board, in particular if the board has options to be specified in the FQBN. arduino-cli board details -b <FQBN> [flags] Examples \u00b6 arduino-cli board details -b arduino:avr:nano Options \u00b6 --board-options strings List of board options separated by commas. Or can be used multiple times for multiple options. -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -f, --full Show full board details -h, --help help for details --list-programmers Show list of available programmers --show-properties string[=\"expanded\"] Show build properties. The properties are expanded, use \"--show-properties=unexpanded\" if you want them exactly as they are defined. (default \"disabled\") Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli board - Arduino board commands.","title":"board details"},{"location":"commands/arduino-cli_board_details/#arduino-cli-board-details","text":"Print details about a board.","title":"arduino-cli board details"},{"location":"commands/arduino-cli_board_details/#synopsis","text":"Show information about a board, in particular if the board has options to be specified in the FQBN. arduino-cli board details -b <FQBN> [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_board_details/#examples","text":"arduino-cli board details -b arduino:avr:nano","title":"Examples"},{"location":"commands/arduino-cli_board_details/#options","text":"--board-options strings List of board options separated by commas. Or can be used multiple times for multiple options. -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -f, --full Show full board details -h, --help help for details --list-programmers Show list of available programmers --show-properties string[=\"expanded\"] Show build properties. The properties are expanded, use \"--show-properties=unexpanded\" if you want them exactly as they are defined. (default \"disabled\")","title":"Options"},{"location":"commands/arduino-cli_board_details/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_board_details/#see-also","text":"arduino-cli board - Arduino board commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_board_list/","text":"arduino-cli board list \u00b6 List connected boards. Synopsis \u00b6 Detects and displays a list of boards connected to the current computer. arduino-cli board list [flags] Examples \u00b6 arduino-cli board list --discovery-timeout 10s Options \u00b6 --board-options strings List of board options separated by commas. Or can be used multiple times for multiple options. --discovery-timeout duration Max time to wait for port discovery, e.g.: 30s, 1m (default 1s) -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for list -w, --watch Command keeps running and prints list of connected boards whenever there is a change. Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli board - Arduino board commands.","title":"board list"},{"location":"commands/arduino-cli_board_list/#arduino-cli-board-list","text":"List connected boards.","title":"arduino-cli board list"},{"location":"commands/arduino-cli_board_list/#synopsis","text":"Detects and displays a list of boards connected to the current computer. arduino-cli board list [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_board_list/#examples","text":"arduino-cli board list --discovery-timeout 10s","title":"Examples"},{"location":"commands/arduino-cli_board_list/#options","text":"--board-options strings List of board options separated by commas. Or can be used multiple times for multiple options. --discovery-timeout duration Max time to wait for port discovery, e.g.: 30s, 1m (default 1s) -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for list -w, --watch Command keeps running and prints list of connected boards whenever there is a change.","title":"Options"},{"location":"commands/arduino-cli_board_list/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_board_list/#see-also","text":"arduino-cli board - Arduino board commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_board_listall/","text":"arduino-cli board listall \u00b6 List all known boards and their corresponding FQBN. Synopsis \u00b6 List all boards that have the support platform installed. You can search for a specific board if you specify the board name arduino-cli board listall [boardname] [flags] Examples \u00b6 arduino-cli board listall arduino-cli board listall zero Options \u00b6 -h, --help help for listall -a, --show-hidden Show also boards marked as 'hidden' in the platform Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli board - Arduino board commands.","title":"board listall"},{"location":"commands/arduino-cli_board_listall/#arduino-cli-board-listall","text":"List all known boards and their corresponding FQBN.","title":"arduino-cli board listall"},{"location":"commands/arduino-cli_board_listall/#synopsis","text":"List all boards that have the support platform installed. You can search for a specific board if you specify the board name arduino-cli board listall [boardname] [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_board_listall/#examples","text":"arduino-cli board listall arduino-cli board listall zero","title":"Examples"},{"location":"commands/arduino-cli_board_listall/#options","text":"-h, --help help for listall -a, --show-hidden Show also boards marked as 'hidden' in the platform","title":"Options"},{"location":"commands/arduino-cli_board_listall/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_board_listall/#see-also","text":"arduino-cli board - Arduino board commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_board_search/","text":"arduino-cli board search \u00b6 Search for a board in the Boards Manager. Synopsis \u00b6 Search for a board in the Boards Manager using the specified keywords. arduino-cli board search [boardname] [flags] Examples \u00b6 arduino-cli board search arduino-cli board search zero Options \u00b6 -h, --help help for search -a, --show-hidden Show also boards marked as 'hidden' in the platform Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli board - Arduino board commands.","title":"board search"},{"location":"commands/arduino-cli_board_search/#arduino-cli-board-search","text":"Search for a board in the Boards Manager.","title":"arduino-cli board search"},{"location":"commands/arduino-cli_board_search/#synopsis","text":"Search for a board in the Boards Manager using the specified keywords. arduino-cli board search [boardname] [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_board_search/#examples","text":"arduino-cli board search arduino-cli board search zero","title":"Examples"},{"location":"commands/arduino-cli_board_search/#options","text":"-h, --help help for search -a, --show-hidden Show also boards marked as 'hidden' in the platform","title":"Options"},{"location":"commands/arduino-cli_board_search/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_board_search/#see-also","text":"arduino-cli board - Arduino board commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_burn-bootloader/","text":"arduino-cli burn-bootloader \u00b6 Upload the bootloader. Synopsis \u00b6 Upload the bootloader on the board using an external programmer. arduino-cli burn-bootloader [flags] Examples \u00b6 arduino-cli burn-bootloader -b arduino:avr:uno -P atmel_ice Options \u00b6 --board-options strings List of board options separated by commas. Or can be used multiple times for multiple options. --discovery-timeout duration Max time to wait for port discovery, e.g.: 30s, 1m (default 1s) -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for burn-bootloader -p, --port string Upload port address, e.g.: COM3 or /dev/ttyACM2 -P, --programmer string Programmer to use, e.g: atmel_ice -l, --protocol string Upload port protocol, e.g: serial -v, --verbose Turns on verbose mode. -t, --verify Verify uploaded binary after the upload. Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli - Arduino CLI.","title":"burn-bootloader"},{"location":"commands/arduino-cli_burn-bootloader/#arduino-cli-burn-bootloader","text":"Upload the bootloader.","title":"arduino-cli burn-bootloader"},{"location":"commands/arduino-cli_burn-bootloader/#synopsis","text":"Upload the bootloader on the board using an external programmer. arduino-cli burn-bootloader [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_burn-bootloader/#examples","text":"arduino-cli burn-bootloader -b arduino:avr:uno -P atmel_ice","title":"Examples"},{"location":"commands/arduino-cli_burn-bootloader/#options","text":"--board-options strings List of board options separated by commas. Or can be used multiple times for multiple options. --discovery-timeout duration Max time to wait for port discovery, e.g.: 30s, 1m (default 1s) -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for burn-bootloader -p, --port string Upload port address, e.g.: COM3 or /dev/ttyACM2 -P, --programmer string Programmer to use, e.g: atmel_ice -l, --protocol string Upload port protocol, e.g: serial -v, --verbose Turns on verbose mode. -t, --verify Verify uploaded binary after the upload.","title":"Options"},{"location":"commands/arduino-cli_burn-bootloader/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_burn-bootloader/#see-also","text":"arduino-cli - Arduino CLI.","title":"SEE ALSO"},{"location":"commands/arduino-cli_cache/","text":"arduino-cli cache \u00b6 Arduino cache commands. Synopsis \u00b6 Arduino cache commands. Examples \u00b6 # Clean caches. arduino-cli cache clean Options \u00b6 -h, --help help for cache Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli - Arduino CLI. arduino-cli cache clean - Delete Boards/Library Manager download cache.","title":"cache"},{"location":"commands/arduino-cli_cache/#arduino-cli-cache","text":"Arduino cache commands.","title":"arduino-cli cache"},{"location":"commands/arduino-cli_cache/#synopsis","text":"Arduino cache commands.","title":"Synopsis"},{"location":"commands/arduino-cli_cache/#examples","text":"# Clean caches. arduino-cli cache clean","title":"Examples"},{"location":"commands/arduino-cli_cache/#options","text":"-h, --help help for cache","title":"Options"},{"location":"commands/arduino-cli_cache/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_cache/#see-also","text":"arduino-cli - Arduino CLI. arduino-cli cache clean - Delete Boards/Library Manager download cache.","title":"SEE ALSO"},{"location":"commands/arduino-cli_cache_clean/","text":"arduino-cli cache clean \u00b6 Delete Boards/Library Manager download cache. Synopsis \u00b6 Delete contents of the directories.downloads folder, where archive files are staged during installation of libraries and boards platforms. arduino-cli cache clean [flags] Examples \u00b6 arduino-cli cache clean Options \u00b6 -h, --help help for clean Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli cache - Arduino cache commands.","title":"cache clean"},{"location":"commands/arduino-cli_cache_clean/#arduino-cli-cache-clean","text":"Delete Boards/Library Manager download cache.","title":"arduino-cli cache clean"},{"location":"commands/arduino-cli_cache_clean/#synopsis","text":"Delete contents of the directories.downloads folder, where archive files are staged during installation of libraries and boards platforms. arduino-cli cache clean [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_cache_clean/#examples","text":"arduino-cli cache clean","title":"Examples"},{"location":"commands/arduino-cli_cache_clean/#options","text":"-h, --help help for clean","title":"Options"},{"location":"commands/arduino-cli_cache_clean/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_cache_clean/#see-also","text":"arduino-cli cache - Arduino cache commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_compile/","text":"arduino-cli compile \u00b6 Compiles Arduino sketches. Synopsis \u00b6 Compiles Arduino sketches. arduino-cli compile [flags] Examples \u00b6 arduino-cli compile -b arduino:avr:uno /home/user/Arduino/MySketch arduino-cli compile -b arduino:avr:uno --build-property \"build.extra_flags=\\\"-DMY_DEFINE=\\\"hello world\\\"\\\"\" /home/user/Arduino/MySketch arduino-cli compile -b arduino:avr:uno --build-property \"build.extra_flags=-DPIN=2 \\\"-DMY_DEFINE=\\\"hello world\\\"\\\"\" /home/user/Arduino/MySketch arduino-cli compile -b arduino:avr:uno --build-property build.extra_flags=-DPIN=2 --build-property \"compiler.cpp.extra_flags=\\\"-DSSID=\\\"hello world\\\"\\\"\" /home/user/Arduino/MySketch Options \u00b6 --board-options strings List of board options separated by commas. Or can be used multiple times for multiple options. --build-cache-path string Builds of 'core.a' are saved into this path to be cached and reused. --build-path string Path where to save compiled files. If omitted, a directory will be created in the default temporary path of your OS. --build-property stringArray Override a build property with a custom value. Can be used multiple times for multiple properties. --clean Optional, cleanup the build folder and do not use any cached build. --discovery-timeout duration Max time to wait for port discovery, e.g.: 30s, 1m (default 1s) --dump-profile Create and print a profile configuration from the build. --encrypt-key string The name of the custom encryption key to use to encrypt a binary during the compile process. Used only by the platforms that support it. -e, --export-binaries If set built binaries will be exported to the sketch folder. -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for compile -j, --jobs int32 Max number of parallel compiles. If set to 0 the number of available CPUs cores will be used. --keys-keychain string The path of the dir to search for the custom keys to sign and encrypt a binary. Used only by the platforms that support it. --libraries strings Path to a collection of libraries. Can be used multiple times or entries can be comma separated. --library strings Path to a single library\u2019s root folder. Can be used multiple times or entries can be comma separated. --only-compilation-database Just produce the compilation database, without actually compiling. All build commands are skipped except pre* hooks. --optimize-for-debug Optional, optimize compile output for debugging, rather than for release. --output-dir string Save build artifacts in this directory. -p, --port string Upload port address, e.g.: COM3 or /dev/ttyACM2 --preprocess Print preprocessed code to stdout instead of compiling. -m, --profile string Sketch profile to use -P, --programmer string Programmer to use, e.g: atmel_ice -l, --protocol string Upload port protocol, e.g: serial --quiet Optional, suppresses almost every output. --show-properties string[=\"expanded\"] Show build properties. The properties are expanded, use \"--show-properties=unexpanded\" if you want them exactly as they are defined. (default \"disabled\") --sign-key string The name of the custom signing key to use to sign a binary during the compile process. Used only by the platforms that support it. -u, --upload Upload the binary after the compilation. -v, --verbose Optional, turns on verbose mode. -t, --verify Verify uploaded binary after the upload. --warnings string Optional, can be: none, default, more, all. Used to tell gcc which warning level to use (-W flag). (default \"none\") Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli - Arduino CLI.","title":"compile"},{"location":"commands/arduino-cli_compile/#arduino-cli-compile","text":"Compiles Arduino sketches.","title":"arduino-cli compile"},{"location":"commands/arduino-cli_compile/#synopsis","text":"Compiles Arduino sketches. arduino-cli compile [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_compile/#examples","text":"arduino-cli compile -b arduino:avr:uno /home/user/Arduino/MySketch arduino-cli compile -b arduino:avr:uno --build-property \"build.extra_flags=\\\"-DMY_DEFINE=\\\"hello world\\\"\\\"\" /home/user/Arduino/MySketch arduino-cli compile -b arduino:avr:uno --build-property \"build.extra_flags=-DPIN=2 \\\"-DMY_DEFINE=\\\"hello world\\\"\\\"\" /home/user/Arduino/MySketch arduino-cli compile -b arduino:avr:uno --build-property build.extra_flags=-DPIN=2 --build-property \"compiler.cpp.extra_flags=\\\"-DSSID=\\\"hello world\\\"\\\"\" /home/user/Arduino/MySketch","title":"Examples"},{"location":"commands/arduino-cli_compile/#options","text":"--board-options strings List of board options separated by commas. Or can be used multiple times for multiple options. --build-cache-path string Builds of 'core.a' are saved into this path to be cached and reused. --build-path string Path where to save compiled files. If omitted, a directory will be created in the default temporary path of your OS. --build-property stringArray Override a build property with a custom value. Can be used multiple times for multiple properties. --clean Optional, cleanup the build folder and do not use any cached build. --discovery-timeout duration Max time to wait for port discovery, e.g.: 30s, 1m (default 1s) --dump-profile Create and print a profile configuration from the build. --encrypt-key string The name of the custom encryption key to use to encrypt a binary during the compile process. Used only by the platforms that support it. -e, --export-binaries If set built binaries will be exported to the sketch folder. -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for compile -j, --jobs int32 Max number of parallel compiles. If set to 0 the number of available CPUs cores will be used. --keys-keychain string The path of the dir to search for the custom keys to sign and encrypt a binary. Used only by the platforms that support it. --libraries strings Path to a collection of libraries. Can be used multiple times or entries can be comma separated. --library strings Path to a single library\u2019s root folder. Can be used multiple times or entries can be comma separated. --only-compilation-database Just produce the compilation database, without actually compiling. All build commands are skipped except pre* hooks. --optimize-for-debug Optional, optimize compile output for debugging, rather than for release. --output-dir string Save build artifacts in this directory. -p, --port string Upload port address, e.g.: COM3 or /dev/ttyACM2 --preprocess Print preprocessed code to stdout instead of compiling. -m, --profile string Sketch profile to use -P, --programmer string Programmer to use, e.g: atmel_ice -l, --protocol string Upload port protocol, e.g: serial --quiet Optional, suppresses almost every output. --show-properties string[=\"expanded\"] Show build properties. The properties are expanded, use \"--show-properties=unexpanded\" if you want them exactly as they are defined. (default \"disabled\") --sign-key string The name of the custom signing key to use to sign a binary during the compile process. Used only by the platforms that support it. -u, --upload Upload the binary after the compilation. -v, --verbose Optional, turns on verbose mode. -t, --verify Verify uploaded binary after the upload. --warnings string Optional, can be: none, default, more, all. Used to tell gcc which warning level to use (-W flag). (default \"none\")","title":"Options"},{"location":"commands/arduino-cli_compile/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_compile/#see-also","text":"arduino-cli - Arduino CLI.","title":"SEE ALSO"},{"location":"commands/arduino-cli_completion/","text":"arduino-cli completion \u00b6 Generates completion scripts Synopsis \u00b6 Generates completion scripts for various shells arduino-cli completion [bash|zsh|fish|powershell] [--no-descriptions] [flags] Examples \u00b6 arduino-cli completion bash > completion.sh source completion.sh Options \u00b6 -h, --help help for completion --no-descriptions Disable completion description for shells that support it Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli - Arduino CLI.","title":"completion"},{"location":"commands/arduino-cli_completion/#arduino-cli-completion","text":"Generates completion scripts","title":"arduino-cli completion"},{"location":"commands/arduino-cli_completion/#synopsis","text":"Generates completion scripts for various shells arduino-cli completion [bash|zsh|fish|powershell] [--no-descriptions] [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_completion/#examples","text":"arduino-cli completion bash > completion.sh source completion.sh","title":"Examples"},{"location":"commands/arduino-cli_completion/#options","text":"-h, --help help for completion --no-descriptions Disable completion description for shells that support it","title":"Options"},{"location":"commands/arduino-cli_completion/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_completion/#see-also","text":"arduino-cli - Arduino CLI.","title":"SEE ALSO"},{"location":"commands/arduino-cli_config/","text":"arduino-cli config \u00b6 Arduino configuration commands. Examples \u00b6 arduino-cli config init Options \u00b6 -h, --help help for config Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli - Arduino CLI. arduino-cli config add - Adds one or more values to a setting. arduino-cli config delete - Deletes a settings key and all its sub keys. arduino-cli config dump - Prints the current configuration arduino-cli config get - Gets a settings key value. arduino-cli config init - Writes current configuration to a configuration file. arduino-cli config remove - Removes one or more values from a setting. arduino-cli config set - Sets a setting value.","title":"config"},{"location":"commands/arduino-cli_config/#arduino-cli-config","text":"Arduino configuration commands.","title":"arduino-cli config"},{"location":"commands/arduino-cli_config/#examples","text":"arduino-cli config init","title":"Examples"},{"location":"commands/arduino-cli_config/#options","text":"-h, --help help for config","title":"Options"},{"location":"commands/arduino-cli_config/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_config/#see-also","text":"arduino-cli - Arduino CLI. arduino-cli config add - Adds one or more values to a setting. arduino-cli config delete - Deletes a settings key and all its sub keys. arduino-cli config dump - Prints the current configuration arduino-cli config get - Gets a settings key value. arduino-cli config init - Writes current configuration to a configuration file. arduino-cli config remove - Removes one or more values from a setting. arduino-cli config set - Sets a setting value.","title":"SEE ALSO"},{"location":"commands/arduino-cli_config_add/","text":"arduino-cli config add \u00b6 Adds one or more values to a setting. Synopsis \u00b6 Adds one or more values to a setting. arduino-cli config add [flags] Examples \u00b6 arduino-cli config add board_manager.additional_urls https://example.com/package_example_index.json arduino-cli config add board_manager.additional_urls https://example.com/package_example_index.json https://another-url.com/package_another_index.json Options \u00b6 -h, --help help for add Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli config - Arduino configuration commands.","title":"config add"},{"location":"commands/arduino-cli_config_add/#arduino-cli-config-add","text":"Adds one or more values to a setting.","title":"arduino-cli config add"},{"location":"commands/arduino-cli_config_add/#synopsis","text":"Adds one or more values to a setting. arduino-cli config add [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_config_add/#examples","text":"arduino-cli config add board_manager.additional_urls https://example.com/package_example_index.json arduino-cli config add board_manager.additional_urls https://example.com/package_example_index.json https://another-url.com/package_another_index.json","title":"Examples"},{"location":"commands/arduino-cli_config_add/#options","text":"-h, --help help for add","title":"Options"},{"location":"commands/arduino-cli_config_add/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_config_add/#see-also","text":"arduino-cli config - Arduino configuration commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_config_delete/","text":"arduino-cli config delete \u00b6 Deletes a settings key and all its sub keys. Synopsis \u00b6 Deletes a settings key and all its sub keys. arduino-cli config delete [flags] Examples \u00b6 arduino-cli config delete board_manager arduino-cli config delete board_manager.additional_urls Options \u00b6 -h, --help help for delete Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli config - Arduino configuration commands.","title":"config delete"},{"location":"commands/arduino-cli_config_delete/#arduino-cli-config-delete","text":"Deletes a settings key and all its sub keys.","title":"arduino-cli config delete"},{"location":"commands/arduino-cli_config_delete/#synopsis","text":"Deletes a settings key and all its sub keys. arduino-cli config delete [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_config_delete/#examples","text":"arduino-cli config delete board_manager arduino-cli config delete board_manager.additional_urls","title":"Examples"},{"location":"commands/arduino-cli_config_delete/#options","text":"-h, --help help for delete","title":"Options"},{"location":"commands/arduino-cli_config_delete/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_config_delete/#see-also","text":"arduino-cli config - Arduino configuration commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_config_dump/","text":"arduino-cli config dump \u00b6 Prints the current configuration Synopsis \u00b6 Prints the current configuration. arduino-cli config dump [flags] Examples \u00b6 arduino-cli config dump Options \u00b6 -h, --help help for dump Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli config - Arduino configuration commands.","title":"config dump"},{"location":"commands/arduino-cli_config_dump/#arduino-cli-config-dump","text":"Prints the current configuration","title":"arduino-cli config dump"},{"location":"commands/arduino-cli_config_dump/#synopsis","text":"Prints the current configuration. arduino-cli config dump [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_config_dump/#examples","text":"arduino-cli config dump","title":"Examples"},{"location":"commands/arduino-cli_config_dump/#options","text":"-h, --help help for dump","title":"Options"},{"location":"commands/arduino-cli_config_dump/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_config_dump/#see-also","text":"arduino-cli config - Arduino configuration commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_config_get/","text":"arduino-cli config get \u00b6 Gets a settings key value. Synopsis \u00b6 Gets a settings key value. arduino-cli config get [flags] Examples \u00b6 arduino-cli config get logging arduino-cli config get daemon.port arduino-cli config get board_manager.additional_urls Options \u00b6 -h, --help help for get Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli config - Arduino configuration commands.","title":"Arduino cli config get"},{"location":"commands/arduino-cli_config_get/#arduino-cli-config-get","text":"Gets a settings key value.","title":"arduino-cli config get"},{"location":"commands/arduino-cli_config_get/#synopsis","text":"Gets a settings key value. arduino-cli config get [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_config_get/#examples","text":"arduino-cli config get logging arduino-cli config get daemon.port arduino-cli config get board_manager.additional_urls","title":"Examples"},{"location":"commands/arduino-cli_config_get/#options","text":"-h, --help help for get","title":"Options"},{"location":"commands/arduino-cli_config_get/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_config_get/#see-also","text":"arduino-cli config - Arduino configuration commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_config_init/","text":"arduino-cli config init \u00b6 Writes current configuration to a configuration file. Synopsis \u00b6 Creates or updates the configuration file in the data directory or custom directory with the current configuration settings. arduino-cli config init [flags] Examples \u00b6 # Writes current configuration to the configuration file in the data directory. arduino-cli config init arduino-cli config init --dest-dir /home/user/MyDirectory arduino-cli config init --dest-file /home/user/MyDirectory/my_settings.yaml Options \u00b6 --dest-dir string Sets where to save the configuration file. --dest-file string Sets where to save the configuration file. -h, --help help for init --overwrite Overwrite existing config file. Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli config - Arduino configuration commands.","title":"config init"},{"location":"commands/arduino-cli_config_init/#arduino-cli-config-init","text":"Writes current configuration to a configuration file.","title":"arduino-cli config init"},{"location":"commands/arduino-cli_config_init/#synopsis","text":"Creates or updates the configuration file in the data directory or custom directory with the current configuration settings. arduino-cli config init [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_config_init/#examples","text":"# Writes current configuration to the configuration file in the data directory. arduino-cli config init arduino-cli config init --dest-dir /home/user/MyDirectory arduino-cli config init --dest-file /home/user/MyDirectory/my_settings.yaml","title":"Examples"},{"location":"commands/arduino-cli_config_init/#options","text":"--dest-dir string Sets where to save the configuration file. --dest-file string Sets where to save the configuration file. -h, --help help for init --overwrite Overwrite existing config file.","title":"Options"},{"location":"commands/arduino-cli_config_init/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_config_init/#see-also","text":"arduino-cli config - Arduino configuration commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_config_remove/","text":"arduino-cli config remove \u00b6 Removes one or more values from a setting. Synopsis \u00b6 Removes one or more values from a setting. arduino-cli config remove [flags] Examples \u00b6 arduino-cli config remove board_manager.additional_urls https://example.com/package_example_index.json arduino-cli config remove board_manager.additional_urls https://example.com/package_example_index.json https://another-url.com/package_another_index.json Options \u00b6 -h, --help help for remove Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli config - Arduino configuration commands.","title":"config remove"},{"location":"commands/arduino-cli_config_remove/#arduino-cli-config-remove","text":"Removes one or more values from a setting.","title":"arduino-cli config remove"},{"location":"commands/arduino-cli_config_remove/#synopsis","text":"Removes one or more values from a setting. arduino-cli config remove [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_config_remove/#examples","text":"arduino-cli config remove board_manager.additional_urls https://example.com/package_example_index.json arduino-cli config remove board_manager.additional_urls https://example.com/package_example_index.json https://another-url.com/package_another_index.json","title":"Examples"},{"location":"commands/arduino-cli_config_remove/#options","text":"-h, --help help for remove","title":"Options"},{"location":"commands/arduino-cli_config_remove/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_config_remove/#see-also","text":"arduino-cli config - Arduino configuration commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_config_set/","text":"arduino-cli config set \u00b6 Sets a setting value. Synopsis \u00b6 Sets a setting value. arduino-cli config set [flags] Examples \u00b6 arduino-cli config set logging.level trace arduino-cli config set logging.file my-log.txt arduino-cli config set sketch.always_export_binaries true arduino-cli config set board_manager.additional_urls https://example.com/package_example_index.json https://another-url.com/package_another_index.json Options \u00b6 -h, --help help for set Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli config - Arduino configuration commands.","title":"config set"},{"location":"commands/arduino-cli_config_set/#arduino-cli-config-set","text":"Sets a setting value.","title":"arduino-cli config set"},{"location":"commands/arduino-cli_config_set/#synopsis","text":"Sets a setting value. arduino-cli config set [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_config_set/#examples","text":"arduino-cli config set logging.level trace arduino-cli config set logging.file my-log.txt arduino-cli config set sketch.always_export_binaries true arduino-cli config set board_manager.additional_urls https://example.com/package_example_index.json https://another-url.com/package_another_index.json","title":"Examples"},{"location":"commands/arduino-cli_config_set/#options","text":"-h, --help help for set","title":"Options"},{"location":"commands/arduino-cli_config_set/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_config_set/#see-also","text":"arduino-cli config - Arduino configuration commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_core/","text":"arduino-cli core \u00b6 Arduino core operations. Synopsis \u00b6 Arduino core operations. Examples \u00b6 arduino-cli core update-index Options \u00b6 -h, --help help for core Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli - Arduino CLI. arduino-cli core download - Downloads one or more cores and corresponding tool dependencies. arduino-cli core install - Installs one or more cores and corresponding tool dependencies. arduino-cli core list - Shows the list of installed platforms. arduino-cli core search - Search for a core in Boards Manager. arduino-cli core uninstall - Uninstalls one or more cores and corresponding tool dependencies if no longer used. arduino-cli core update-index - Updates the index of cores. arduino-cli core upgrade - Upgrades one or all installed platforms to the latest version.","title":"core"},{"location":"commands/arduino-cli_core/#arduino-cli-core","text":"Arduino core operations.","title":"arduino-cli core"},{"location":"commands/arduino-cli_core/#synopsis","text":"Arduino core operations.","title":"Synopsis"},{"location":"commands/arduino-cli_core/#examples","text":"arduino-cli core update-index","title":"Examples"},{"location":"commands/arduino-cli_core/#options","text":"-h, --help help for core","title":"Options"},{"location":"commands/arduino-cli_core/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_core/#see-also","text":"arduino-cli - Arduino CLI. arduino-cli core download - Downloads one or more cores and corresponding tool dependencies. arduino-cli core install - Installs one or more cores and corresponding tool dependencies. arduino-cli core list - Shows the list of installed platforms. arduino-cli core search - Search for a core in Boards Manager. arduino-cli core uninstall - Uninstalls one or more cores and corresponding tool dependencies if no longer used. arduino-cli core update-index - Updates the index of cores. arduino-cli core upgrade - Upgrades one or all installed platforms to the latest version.","title":"SEE ALSO"},{"location":"commands/arduino-cli_core_download/","text":"arduino-cli core download \u00b6 Downloads one or more cores and corresponding tool dependencies. Synopsis \u00b6 Downloads one or more cores and corresponding tool dependencies. arduino-cli core download [PACKAGER:ARCH[@VERSION]]... [flags] Examples \u00b6 arduino-cli core download arduino:samd # download the latest version of Arduino SAMD core. arduino-cli core download arduino:samd@1.6.9 # download a specific version (in this case 1.6.9). Options \u00b6 -h, --help help for download Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli core - Arduino core operations.","title":"core download"},{"location":"commands/arduino-cli_core_download/#arduino-cli-core-download","text":"Downloads one or more cores and corresponding tool dependencies.","title":"arduino-cli core download"},{"location":"commands/arduino-cli_core_download/#synopsis","text":"Downloads one or more cores and corresponding tool dependencies. arduino-cli core download [PACKAGER:ARCH[@VERSION]]... [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_core_download/#examples","text":"arduino-cli core download arduino:samd # download the latest version of Arduino SAMD core. arduino-cli core download arduino:samd@1.6.9 # download a specific version (in this case 1.6.9).","title":"Examples"},{"location":"commands/arduino-cli_core_download/#options","text":"-h, --help help for download","title":"Options"},{"location":"commands/arduino-cli_core_download/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_core_download/#see-also","text":"arduino-cli core - Arduino core operations.","title":"SEE ALSO"},{"location":"commands/arduino-cli_core_install/","text":"arduino-cli core install \u00b6 Installs one or more cores and corresponding tool dependencies. Synopsis \u00b6 Installs one or more cores and corresponding tool dependencies. arduino-cli core install PACKAGER:ARCH[@VERSION]... [flags] Examples \u00b6 # download the latest version of Arduino SAMD core. arduino-cli core install arduino:samd # download a specific version (in this case 1.6.9). arduino-cli core install arduino:samd@1.6.9 Options \u00b6 -h, --help help for install --no-overwrite Do not overwrite already installed platforms. --run-post-install Force run of post-install scripts (if the CLI is not running interactively). --run-pre-uninstall Force run of pre-uninstall scripts (if the CLI is not running interactively). --skip-post-install Force skip of post-install scripts (if the CLI is running interactively). --skip-pre-uninstall Force skip of pre-uninstall scripts (if the CLI is running interactively). Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli core - Arduino core operations.","title":"core install"},{"location":"commands/arduino-cli_core_install/#arduino-cli-core-install","text":"Installs one or more cores and corresponding tool dependencies.","title":"arduino-cli core install"},{"location":"commands/arduino-cli_core_install/#synopsis","text":"Installs one or more cores and corresponding tool dependencies. arduino-cli core install PACKAGER:ARCH[@VERSION]... [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_core_install/#examples","text":"# download the latest version of Arduino SAMD core. arduino-cli core install arduino:samd # download a specific version (in this case 1.6.9). arduino-cli core install arduino:samd@1.6.9","title":"Examples"},{"location":"commands/arduino-cli_core_install/#options","text":"-h, --help help for install --no-overwrite Do not overwrite already installed platforms. --run-post-install Force run of post-install scripts (if the CLI is not running interactively). --run-pre-uninstall Force run of pre-uninstall scripts (if the CLI is not running interactively). --skip-post-install Force skip of post-install scripts (if the CLI is running interactively). --skip-pre-uninstall Force skip of pre-uninstall scripts (if the CLI is running interactively).","title":"Options"},{"location":"commands/arduino-cli_core_install/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_core_install/#see-also","text":"arduino-cli core - Arduino core operations.","title":"SEE ALSO"},{"location":"commands/arduino-cli_core_list/","text":"arduino-cli core list \u00b6 Shows the list of installed platforms. Synopsis \u00b6 Shows the list of installed platforms. arduino-cli core list [flags] Examples \u00b6 arduino-cli core list Options \u00b6 --all If set return all installable and installed cores, including manually installed. -h, --help help for list --updatable List updatable platforms. Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli core - Arduino core operations.","title":"core list"},{"location":"commands/arduino-cli_core_list/#arduino-cli-core-list","text":"Shows the list of installed platforms.","title":"arduino-cli core list"},{"location":"commands/arduino-cli_core_list/#synopsis","text":"Shows the list of installed platforms. arduino-cli core list [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_core_list/#examples","text":"arduino-cli core list","title":"Examples"},{"location":"commands/arduino-cli_core_list/#options","text":"--all If set return all installable and installed cores, including manually installed. -h, --help help for list --updatable List updatable platforms.","title":"Options"},{"location":"commands/arduino-cli_core_list/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_core_list/#see-also","text":"arduino-cli core - Arduino core operations.","title":"SEE ALSO"},{"location":"commands/arduino-cli_core_search/","text":"arduino-cli core search \u00b6 Search for a core in Boards Manager. Synopsis \u00b6 Search for a core in Boards Manager using the specified keywords. arduino-cli core search <keywords...> [flags] Examples \u00b6 arduino-cli core search MKRZero -a -v Options \u00b6 -a, --all Show all available core versions. -h, --help help for search Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli core - Arduino core operations.","title":"core search"},{"location":"commands/arduino-cli_core_search/#arduino-cli-core-search","text":"Search for a core in Boards Manager.","title":"arduino-cli core search"},{"location":"commands/arduino-cli_core_search/#synopsis","text":"Search for a core in Boards Manager using the specified keywords. arduino-cli core search <keywords...> [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_core_search/#examples","text":"arduino-cli core search MKRZero -a -v","title":"Examples"},{"location":"commands/arduino-cli_core_search/#options","text":"-a, --all Show all available core versions. -h, --help help for search","title":"Options"},{"location":"commands/arduino-cli_core_search/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_core_search/#see-also","text":"arduino-cli core - Arduino core operations.","title":"SEE ALSO"},{"location":"commands/arduino-cli_core_uninstall/","text":"arduino-cli core uninstall \u00b6 Uninstalls one or more cores and corresponding tool dependencies if no longer used. Synopsis \u00b6 Uninstalls one or more cores and corresponding tool dependencies if no longer used. arduino-cli core uninstall PACKAGER:ARCH ... [flags] Examples \u00b6 arduino-cli core uninstall arduino:samd Options \u00b6 -h, --help help for uninstall --run-post-install Force run of post-install scripts (if the CLI is not running interactively). --run-pre-uninstall Force run of pre-uninstall scripts (if the CLI is not running interactively). --skip-post-install Force skip of post-install scripts (if the CLI is running interactively). --skip-pre-uninstall Force skip of pre-uninstall scripts (if the CLI is running interactively). Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli core - Arduino core operations.","title":"core uninstall"},{"location":"commands/arduino-cli_core_uninstall/#arduino-cli-core-uninstall","text":"Uninstalls one or more cores and corresponding tool dependencies if no longer used.","title":"arduino-cli core uninstall"},{"location":"commands/arduino-cli_core_uninstall/#synopsis","text":"Uninstalls one or more cores and corresponding tool dependencies if no longer used. arduino-cli core uninstall PACKAGER:ARCH ... [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_core_uninstall/#examples","text":"arduino-cli core uninstall arduino:samd","title":"Examples"},{"location":"commands/arduino-cli_core_uninstall/#options","text":"-h, --help help for uninstall --run-post-install Force run of post-install scripts (if the CLI is not running interactively). --run-pre-uninstall Force run of pre-uninstall scripts (if the CLI is not running interactively). --skip-post-install Force skip of post-install scripts (if the CLI is running interactively). --skip-pre-uninstall Force skip of pre-uninstall scripts (if the CLI is running interactively).","title":"Options"},{"location":"commands/arduino-cli_core_uninstall/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_core_uninstall/#see-also","text":"arduino-cli core - Arduino core operations.","title":"SEE ALSO"},{"location":"commands/arduino-cli_core_update-index/","text":"arduino-cli core update-index \u00b6 Updates the index of cores. Synopsis \u00b6 Updates the index of cores to the latest version. arduino-cli core update-index [flags] Examples \u00b6 arduino-cli core update-index Options \u00b6 -h, --help help for update-index Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli core - Arduino core operations.","title":"core update-index"},{"location":"commands/arduino-cli_core_update-index/#arduino-cli-core-update-index","text":"Updates the index of cores.","title":"arduino-cli core update-index"},{"location":"commands/arduino-cli_core_update-index/#synopsis","text":"Updates the index of cores to the latest version. arduino-cli core update-index [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_core_update-index/#examples","text":"arduino-cli core update-index","title":"Examples"},{"location":"commands/arduino-cli_core_update-index/#options","text":"-h, --help help for update-index","title":"Options"},{"location":"commands/arduino-cli_core_update-index/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_core_update-index/#see-also","text":"arduino-cli core - Arduino core operations.","title":"SEE ALSO"},{"location":"commands/arduino-cli_core_upgrade/","text":"arduino-cli core upgrade \u00b6 Upgrades one or all installed platforms to the latest version. Synopsis \u00b6 Upgrades one or all installed platforms to the latest version. arduino-cli core upgrade [PACKAGER:ARCH] ... [flags] Examples \u00b6 # upgrade everything to the latest version arduino-cli core upgrade # upgrade arduino:samd to the latest version arduino-cli core upgrade arduino:samd Options \u00b6 -h, --help help for upgrade --run-post-install Force run of post-install scripts (if the CLI is not running interactively). --run-pre-uninstall Force run of pre-uninstall scripts (if the CLI is not running interactively). --skip-post-install Force skip of post-install scripts (if the CLI is running interactively). --skip-pre-uninstall Force skip of pre-uninstall scripts (if the CLI is running interactively). Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli core - Arduino core operations.","title":"core upgrade"},{"location":"commands/arduino-cli_core_upgrade/#arduino-cli-core-upgrade","text":"Upgrades one or all installed platforms to the latest version.","title":"arduino-cli core upgrade"},{"location":"commands/arduino-cli_core_upgrade/#synopsis","text":"Upgrades one or all installed platforms to the latest version. arduino-cli core upgrade [PACKAGER:ARCH] ... [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_core_upgrade/#examples","text":"# upgrade everything to the latest version arduino-cli core upgrade # upgrade arduino:samd to the latest version arduino-cli core upgrade arduino:samd","title":"Examples"},{"location":"commands/arduino-cli_core_upgrade/#options","text":"-h, --help help for upgrade --run-post-install Force run of post-install scripts (if the CLI is not running interactively). --run-pre-uninstall Force run of pre-uninstall scripts (if the CLI is not running interactively). --skip-post-install Force skip of post-install scripts (if the CLI is running interactively). --skip-pre-uninstall Force skip of pre-uninstall scripts (if the CLI is running interactively).","title":"Options"},{"location":"commands/arduino-cli_core_upgrade/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_core_upgrade/#see-also","text":"arduino-cli core - Arduino core operations.","title":"SEE ALSO"},{"location":"commands/arduino-cli_daemon/","text":"arduino-cli daemon \u00b6 Run as a daemon on port: 50051 Synopsis \u00b6 Running as a daemon the initialization of cores and libraries is done only once. arduino-cli daemon [flags] Examples \u00b6 arduino-cli daemon Options \u00b6 --daemonize Do not terminate daemon process if the parent process dies --debug Enable debug logging of gRPC calls --debug-file string Append debug logging to the specified file --debug-filter strings Display only the provided gRPC calls -h, --help help for daemon --port string The TCP port the daemon will listen to Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli - Arduino CLI.","title":"daemon"},{"location":"commands/arduino-cli_daemon/#arduino-cli-daemon","text":"Run as a daemon on port: 50051","title":"arduino-cli daemon"},{"location":"commands/arduino-cli_daemon/#synopsis","text":"Running as a daemon the initialization of cores and libraries is done only once. arduino-cli daemon [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_daemon/#examples","text":"arduino-cli daemon","title":"Examples"},{"location":"commands/arduino-cli_daemon/#options","text":"--daemonize Do not terminate daemon process if the parent process dies --debug Enable debug logging of gRPC calls --debug-file string Append debug logging to the specified file --debug-filter strings Display only the provided gRPC calls -h, --help help for daemon --port string The TCP port the daemon will listen to","title":"Options"},{"location":"commands/arduino-cli_daemon/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_daemon/#see-also","text":"arduino-cli - Arduino CLI.","title":"SEE ALSO"},{"location":"commands/arduino-cli_debug/","text":"arduino-cli debug \u00b6 Debug Arduino sketches. Synopsis \u00b6 Debug Arduino sketches. (this command opens an interactive gdb session) arduino-cli debug [flags] Examples \u00b6 arduino-cli debug -b arduino:samd:mkr1000 -P atmel_ice /home/user/Arduino/MySketch Options \u00b6 --board-options strings List of board options separated by commas. Or can be used multiple times for multiple options. --discovery-timeout duration Max time to wait for port discovery, e.g.: 30s, 1m (default 1s) -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for debug -I, --info Show metadata about the debug session instead of starting the debugger. --input-dir string Directory containing binaries for debug. --interpreter string Debug interpreter e.g.: console, mi, mi1, mi2, mi3 (default \"console\") -p, --port string Upload port address, e.g.: COM3 or /dev/ttyACM2 -m, --profile string Sketch profile to use -P, --programmer string Programmer to use, e.g: atmel_ice -l, --protocol string Upload port protocol, e.g: serial Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli - Arduino CLI. arduino-cli debug check - Check if the given board/programmer combination supports debugging.","title":"debug"},{"location":"commands/arduino-cli_debug/#arduino-cli-debug","text":"Debug Arduino sketches.","title":"arduino-cli debug"},{"location":"commands/arduino-cli_debug/#synopsis","text":"Debug Arduino sketches. (this command opens an interactive gdb session) arduino-cli debug [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_debug/#examples","text":"arduino-cli debug -b arduino:samd:mkr1000 -P atmel_ice /home/user/Arduino/MySketch","title":"Examples"},{"location":"commands/arduino-cli_debug/#options","text":"--board-options strings List of board options separated by commas. Or can be used multiple times for multiple options. --discovery-timeout duration Max time to wait for port discovery, e.g.: 30s, 1m (default 1s) -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for debug -I, --info Show metadata about the debug session instead of starting the debugger. --input-dir string Directory containing binaries for debug. --interpreter string Debug interpreter e.g.: console, mi, mi1, mi2, mi3 (default \"console\") -p, --port string Upload port address, e.g.: COM3 or /dev/ttyACM2 -m, --profile string Sketch profile to use -P, --programmer string Programmer to use, e.g: atmel_ice -l, --protocol string Upload port protocol, e.g: serial","title":"Options"},{"location":"commands/arduino-cli_debug/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_debug/#see-also","text":"arduino-cli - Arduino CLI. arduino-cli debug check - Check if the given board/programmer combination supports debugging.","title":"SEE ALSO"},{"location":"commands/arduino-cli_debug_check/","text":"arduino-cli debug check \u00b6 Check if the given board/programmer combination supports debugging. arduino-cli debug check [flags] Examples \u00b6 arduino-cli debug check -b arduino:samd:mkr1000 -P atmel_ice Options \u00b6 --board-options strings List of board options separated by commas. Or can be used multiple times for multiple options. --discovery-timeout duration Max time to wait for port discovery, e.g.: 30s, 1m (default 1s) -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for check --interpreter string Debug interpreter e.g.: console, mi, mi1, mi2, mi3 (default \"console\") -p, --port string Upload port address, e.g.: COM3 or /dev/ttyACM2 -P, --programmer string Programmer to use, e.g: atmel_ice -l, --protocol string Upload port protocol, e.g: serial Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli debug - Debug Arduino sketches.","title":"Arduino cli debug check"},{"location":"commands/arduino-cli_debug_check/#arduino-cli-debug-check","text":"Check if the given board/programmer combination supports debugging. arduino-cli debug check [flags]","title":"arduino-cli debug check"},{"location":"commands/arduino-cli_debug_check/#examples","text":"arduino-cli debug check -b arduino:samd:mkr1000 -P atmel_ice","title":"Examples"},{"location":"commands/arduino-cli_debug_check/#options","text":"--board-options strings List of board options separated by commas. Or can be used multiple times for multiple options. --discovery-timeout duration Max time to wait for port discovery, e.g.: 30s, 1m (default 1s) -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for check --interpreter string Debug interpreter e.g.: console, mi, mi1, mi2, mi3 (default \"console\") -p, --port string Upload port address, e.g.: COM3 or /dev/ttyACM2 -P, --programmer string Programmer to use, e.g: atmel_ice -l, --protocol string Upload port protocol, e.g: serial","title":"Options"},{"location":"commands/arduino-cli_debug_check/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_debug_check/#see-also","text":"arduino-cli debug - Debug Arduino sketches.","title":"SEE ALSO"},{"location":"commands/arduino-cli_lib/","text":"arduino-cli lib \u00b6 Arduino commands about libraries. Synopsis \u00b6 Arduino commands about libraries. Examples \u00b6 arduino-cli lib install AudioZero arduino-cli lib update-index Options \u00b6 -h, --help help for lib Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli - Arduino CLI. arduino-cli lib deps - Check dependencies status for the specified library. arduino-cli lib download - Downloads one or more libraries without installing them. arduino-cli lib examples - Shows the list of the examples for libraries. arduino-cli lib install - Installs one or more specified libraries into the system. arduino-cli lib list - Shows a list of installed libraries. arduino-cli lib search - Searches for one or more libraries matching a query. arduino-cli lib uninstall - Uninstalls one or more libraries. arduino-cli lib update-index - Updates the libraries index. arduino-cli lib upgrade - Upgrades installed libraries.","title":"lib"},{"location":"commands/arduino-cli_lib/#arduino-cli-lib","text":"Arduino commands about libraries.","title":"arduino-cli lib"},{"location":"commands/arduino-cli_lib/#synopsis","text":"Arduino commands about libraries.","title":"Synopsis"},{"location":"commands/arduino-cli_lib/#examples","text":"arduino-cli lib install AudioZero arduino-cli lib update-index","title":"Examples"},{"location":"commands/arduino-cli_lib/#options","text":"-h, --help help for lib","title":"Options"},{"location":"commands/arduino-cli_lib/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_lib/#see-also","text":"arduino-cli - Arduino CLI. arduino-cli lib deps - Check dependencies status for the specified library. arduino-cli lib download - Downloads one or more libraries without installing them. arduino-cli lib examples - Shows the list of the examples for libraries. arduino-cli lib install - Installs one or more specified libraries into the system. arduino-cli lib list - Shows a list of installed libraries. arduino-cli lib search - Searches for one or more libraries matching a query. arduino-cli lib uninstall - Uninstalls one or more libraries. arduino-cli lib update-index - Updates the libraries index. arduino-cli lib upgrade - Upgrades installed libraries.","title":"SEE ALSO"},{"location":"commands/arduino-cli_lib_deps/","text":"arduino-cli lib deps \u00b6 Check dependencies status for the specified library. Synopsis \u00b6 Check dependencies status for the specified library. arduino-cli lib deps LIBRARY[@VERSION_NUMBER]... [flags] Examples \u00b6 arduino-cli lib deps AudioZero # for the latest version. arduino-cli lib deps AudioZero@1.0.0 # for the specific version. Options \u00b6 -h, --help help for deps --no-overwrite Do not try to update library dependencies if already installed. Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli lib - Arduino commands about libraries.","title":"lib deps"},{"location":"commands/arduino-cli_lib_deps/#arduino-cli-lib-deps","text":"Check dependencies status for the specified library.","title":"arduino-cli lib deps"},{"location":"commands/arduino-cli_lib_deps/#synopsis","text":"Check dependencies status for the specified library. arduino-cli lib deps LIBRARY[@VERSION_NUMBER]... [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_lib_deps/#examples","text":"arduino-cli lib deps AudioZero # for the latest version. arduino-cli lib deps AudioZero@1.0.0 # for the specific version.","title":"Examples"},{"location":"commands/arduino-cli_lib_deps/#options","text":"-h, --help help for deps --no-overwrite Do not try to update library dependencies if already installed.","title":"Options"},{"location":"commands/arduino-cli_lib_deps/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_lib_deps/#see-also","text":"arduino-cli lib - Arduino commands about libraries.","title":"SEE ALSO"},{"location":"commands/arduino-cli_lib_download/","text":"arduino-cli lib download \u00b6 Downloads one or more libraries without installing them. Synopsis \u00b6 Downloads one or more libraries without installing them. arduino-cli lib download [LIBRARY_NAME]... [flags] Examples \u00b6 arduino-cli lib download AudioZero # for the latest version. arduino-cli lib download AudioZero@1.0.0 # for a specific version. Options \u00b6 -h, --help help for download Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli lib - Arduino commands about libraries.","title":"lib download"},{"location":"commands/arduino-cli_lib_download/#arduino-cli-lib-download","text":"Downloads one or more libraries without installing them.","title":"arduino-cli lib download"},{"location":"commands/arduino-cli_lib_download/#synopsis","text":"Downloads one or more libraries without installing them. arduino-cli lib download [LIBRARY_NAME]... [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_lib_download/#examples","text":"arduino-cli lib download AudioZero # for the latest version. arduino-cli lib download AudioZero@1.0.0 # for a specific version.","title":"Examples"},{"location":"commands/arduino-cli_lib_download/#options","text":"-h, --help help for download","title":"Options"},{"location":"commands/arduino-cli_lib_download/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_lib_download/#see-also","text":"arduino-cli lib - Arduino commands about libraries.","title":"SEE ALSO"},{"location":"commands/arduino-cli_lib_examples/","text":"arduino-cli lib examples \u00b6 Shows the list of the examples for libraries. Synopsis \u00b6 Shows the list of the examples for libraries. A name may be given as argument to search a specific library. arduino-cli lib examples [LIBRARY_NAME] [flags] Examples \u00b6 arduino-cli lib examples Wire Options \u00b6 --board-options strings List of board options separated by commas. Or can be used multiple times for multiple options. -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for examples Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli lib - Arduino commands about libraries.","title":"lib examples"},{"location":"commands/arduino-cli_lib_examples/#arduino-cli-lib-examples","text":"Shows the list of the examples for libraries.","title":"arduino-cli lib examples"},{"location":"commands/arduino-cli_lib_examples/#synopsis","text":"Shows the list of the examples for libraries. A name may be given as argument to search a specific library. arduino-cli lib examples [LIBRARY_NAME] [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_lib_examples/#examples","text":"arduino-cli lib examples Wire","title":"Examples"},{"location":"commands/arduino-cli_lib_examples/#options","text":"--board-options strings List of board options separated by commas. Or can be used multiple times for multiple options. -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for examples","title":"Options"},{"location":"commands/arduino-cli_lib_examples/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_lib_examples/#see-also","text":"arduino-cli lib - Arduino commands about libraries.","title":"SEE ALSO"},{"location":"commands/arduino-cli_lib_install/","text":"arduino-cli lib install \u00b6 Installs one or more specified libraries into the system. Synopsis \u00b6 Installs one or more specified libraries into the system. arduino-cli lib install LIBRARY[@VERSION_NUMBER]... [flags] Examples \u00b6 arduino-cli lib install AudioZero # for the latest version. arduino-cli lib install AudioZero@1.0.0 # for the specific version. arduino-cli lib install --git-url https://github.com/arduino-libraries/WiFi101.git https://github.com/arduino-libraries/ArduinoBLE.git arduino-cli lib install --git-url https://github.com/arduino-libraries/WiFi101.git#0.16.0 # for the specific version. arduino-cli lib install --zip-path /path/to/WiFi101.zip /path/to/ArduinoBLE.zip Options \u00b6 --git-url Enter git url for libraries hosted on repositories -h, --help help for install --install-in-builtin-dir Install libraries in the IDE-Builtin directory --no-deps Do not install dependencies. --no-overwrite Do not overwrite already installed libraries. --zip-path Enter a path to zip file Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli lib - Arduino commands about libraries.","title":"lib install"},{"location":"commands/arduino-cli_lib_install/#arduino-cli-lib-install","text":"Installs one or more specified libraries into the system.","title":"arduino-cli lib install"},{"location":"commands/arduino-cli_lib_install/#synopsis","text":"Installs one or more specified libraries into the system. arduino-cli lib install LIBRARY[@VERSION_NUMBER]... [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_lib_install/#examples","text":"arduino-cli lib install AudioZero # for the latest version. arduino-cli lib install AudioZero@1.0.0 # for the specific version. arduino-cli lib install --git-url https://github.com/arduino-libraries/WiFi101.git https://github.com/arduino-libraries/ArduinoBLE.git arduino-cli lib install --git-url https://github.com/arduino-libraries/WiFi101.git#0.16.0 # for the specific version. arduino-cli lib install --zip-path /path/to/WiFi101.zip /path/to/ArduinoBLE.zip","title":"Examples"},{"location":"commands/arduino-cli_lib_install/#options","text":"--git-url Enter git url for libraries hosted on repositories -h, --help help for install --install-in-builtin-dir Install libraries in the IDE-Builtin directory --no-deps Do not install dependencies. --no-overwrite Do not overwrite already installed libraries. --zip-path Enter a path to zip file","title":"Options"},{"location":"commands/arduino-cli_lib_install/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_lib_install/#see-also","text":"arduino-cli lib - Arduino commands about libraries.","title":"SEE ALSO"},{"location":"commands/arduino-cli_lib_list/","text":"arduino-cli lib list \u00b6 Shows a list of installed libraries. Synopsis \u00b6 Shows a list of installed libraries. If the LIBNAME parameter is specified the listing is limited to that specific library. By default the libraries provided as built-in by platforms/core are not listed, they can be listed by adding the --all flag. arduino-cli lib list [LIBNAME] [flags] Examples \u00b6 arduino-cli lib list Options \u00b6 --all Include built-in libraries (from platforms and IDE) in listing. --board-options strings List of board options separated by commas. Or can be used multiple times for multiple options. -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for list --updatable List updatable libraries. Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli lib - Arduino commands about libraries.","title":"lib list"},{"location":"commands/arduino-cli_lib_list/#arduino-cli-lib-list","text":"Shows a list of installed libraries.","title":"arduino-cli lib list"},{"location":"commands/arduino-cli_lib_list/#synopsis","text":"Shows a list of installed libraries. If the LIBNAME parameter is specified the listing is limited to that specific library. By default the libraries provided as built-in by platforms/core are not listed, they can be listed by adding the --all flag. arduino-cli lib list [LIBNAME] [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_lib_list/#examples","text":"arduino-cli lib list","title":"Examples"},{"location":"commands/arduino-cli_lib_list/#options","text":"--all Include built-in libraries (from platforms and IDE) in listing. --board-options strings List of board options separated by commas. Or can be used multiple times for multiple options. -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for list --updatable List updatable libraries.","title":"Options"},{"location":"commands/arduino-cli_lib_list/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_lib_list/#see-also","text":"arduino-cli lib - Arduino commands about libraries.","title":"SEE ALSO"},{"location":"commands/arduino-cli_lib_search/","text":"arduino-cli lib search \u00b6 Searches for one or more libraries matching a query. Synopsis \u00b6 Search for libraries matching zero or more search terms. All searches are performed in a case-insensitive fashion. Queries containing multiple search terms will return only libraries that match all of the terms. Search terms that do not match the QV syntax described below are basic search terms, and will match libraries that include the term anywhere in any of the following fields: - Author - Name - Paragraph - Provides - Sentence A special syntax, called qualifier-value (QV), indicates that a search term should be compared against only one field of each library index entry. This syntax uses the name of an index field (case-insensitive), an equals sign (=) or a colon (:), and a value, e.g. 'name=ArduinoJson' or 'provides:tinyusb.h'. QV search terms that use a colon separator will match all libraries with the value anywhere in the named field, and QV search terms that use an equals separator will match only libraries with exactly the provided value in the named field. QV search terms can include embedded spaces using double-quote (\") characters around the value or the entire term, e.g. 'category=\"Data Processing\"' and '\"category=Data Processing\"' are equivalent. A QV term can include a literal double-quote character by preceding it with a backslash () character. NOTE: QV search terms using double-quote or backslash characters that are passed as command-line arguments may require quoting or escaping to prevent the shell from interpreting those characters. In addition to the fields listed above, QV terms can use these qualifiers: - Architectures - Category - Dependencies - License - Maintainer - Types - Version - Website arduino-cli lib search [SEARCH_TERM ...] [flags] Examples \u00b6 arduino-cli lib search audio # basic search for \"audio\" arduino-cli lib search name:buzzer # libraries with \"buzzer\" in the Name field arduino-cli lib search name=pcf8523 # libraries with a Name exactly matching \"pcf8523\" arduino-cli lib search \"author:\\\"Daniel Garcia\\\"\" # libraries authored by Daniel Garcia arduino-cli lib search author=Adafruit name:gfx # libraries authored only by Adafruit with \"gfx\" in their Name arduino-cli lib search esp32 display maintainer=espressif # basic search for \"esp32\" and \"display\" limited to official Maintainer arduino-cli lib search dependencies:IRremote # libraries that depend on at least \"IRremote\" arduino-cli lib search dependencies=IRremote # libraries that depend only on \"IRremote\" Options \u00b6 -h, --help help for search --names Show library names only. --omit-releases-details Omit library details far all versions except the latest (produce a more compact JSON output). Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli lib - Arduino commands about libraries.","title":"lib search"},{"location":"commands/arduino-cli_lib_search/#arduino-cli-lib-search","text":"Searches for one or more libraries matching a query.","title":"arduino-cli lib search"},{"location":"commands/arduino-cli_lib_search/#synopsis","text":"Search for libraries matching zero or more search terms. All searches are performed in a case-insensitive fashion. Queries containing multiple search terms will return only libraries that match all of the terms. Search terms that do not match the QV syntax described below are basic search terms, and will match libraries that include the term anywhere in any of the following fields: - Author - Name - Paragraph - Provides - Sentence A special syntax, called qualifier-value (QV), indicates that a search term should be compared against only one field of each library index entry. This syntax uses the name of an index field (case-insensitive), an equals sign (=) or a colon (:), and a value, e.g. 'name=ArduinoJson' or 'provides:tinyusb.h'. QV search terms that use a colon separator will match all libraries with the value anywhere in the named field, and QV search terms that use an equals separator will match only libraries with exactly the provided value in the named field. QV search terms can include embedded spaces using double-quote (\") characters around the value or the entire term, e.g. 'category=\"Data Processing\"' and '\"category=Data Processing\"' are equivalent. A QV term can include a literal double-quote character by preceding it with a backslash () character. NOTE: QV search terms using double-quote or backslash characters that are passed as command-line arguments may require quoting or escaping to prevent the shell from interpreting those characters. In addition to the fields listed above, QV terms can use these qualifiers: - Architectures - Category - Dependencies - License - Maintainer - Types - Version - Website arduino-cli lib search [SEARCH_TERM ...] [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_lib_search/#examples","text":"arduino-cli lib search audio # basic search for \"audio\" arduino-cli lib search name:buzzer # libraries with \"buzzer\" in the Name field arduino-cli lib search name=pcf8523 # libraries with a Name exactly matching \"pcf8523\" arduino-cli lib search \"author:\\\"Daniel Garcia\\\"\" # libraries authored by Daniel Garcia arduino-cli lib search author=Adafruit name:gfx # libraries authored only by Adafruit with \"gfx\" in their Name arduino-cli lib search esp32 display maintainer=espressif # basic search for \"esp32\" and \"display\" limited to official Maintainer arduino-cli lib search dependencies:IRremote # libraries that depend on at least \"IRremote\" arduino-cli lib search dependencies=IRremote # libraries that depend only on \"IRremote\"","title":"Examples"},{"location":"commands/arduino-cli_lib_search/#options","text":"-h, --help help for search --names Show library names only. --omit-releases-details Omit library details far all versions except the latest (produce a more compact JSON output).","title":"Options"},{"location":"commands/arduino-cli_lib_search/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_lib_search/#see-also","text":"arduino-cli lib - Arduino commands about libraries.","title":"SEE ALSO"},{"location":"commands/arduino-cli_lib_uninstall/","text":"arduino-cli lib uninstall \u00b6 Uninstalls one or more libraries. Synopsis \u00b6 Uninstalls one or more libraries. arduino-cli lib uninstall LIBRARY_NAME... [flags] Examples \u00b6 arduino-cli lib uninstall AudioZero Options \u00b6 -h, --help help for uninstall Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli lib - Arduino commands about libraries.","title":"lib uninstall"},{"location":"commands/arduino-cli_lib_uninstall/#arduino-cli-lib-uninstall","text":"Uninstalls one or more libraries.","title":"arduino-cli lib uninstall"},{"location":"commands/arduino-cli_lib_uninstall/#synopsis","text":"Uninstalls one or more libraries. arduino-cli lib uninstall LIBRARY_NAME... [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_lib_uninstall/#examples","text":"arduino-cli lib uninstall AudioZero","title":"Examples"},{"location":"commands/arduino-cli_lib_uninstall/#options","text":"-h, --help help for uninstall","title":"Options"},{"location":"commands/arduino-cli_lib_uninstall/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_lib_uninstall/#see-also","text":"arduino-cli lib - Arduino commands about libraries.","title":"SEE ALSO"},{"location":"commands/arduino-cli_lib_update-index/","text":"arduino-cli lib update-index \u00b6 Updates the libraries index. Synopsis \u00b6 Updates the libraries index to the latest version. arduino-cli lib update-index [flags] Examples \u00b6 arduino-cli lib update-index Options \u00b6 -h, --help help for update-index Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli lib - Arduino commands about libraries.","title":"lib update-index"},{"location":"commands/arduino-cli_lib_update-index/#arduino-cli-lib-update-index","text":"Updates the libraries index.","title":"arduino-cli lib update-index"},{"location":"commands/arduino-cli_lib_update-index/#synopsis","text":"Updates the libraries index to the latest version. arduino-cli lib update-index [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_lib_update-index/#examples","text":"arduino-cli lib update-index","title":"Examples"},{"location":"commands/arduino-cli_lib_update-index/#options","text":"-h, --help help for update-index","title":"Options"},{"location":"commands/arduino-cli_lib_update-index/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_lib_update-index/#see-also","text":"arduino-cli lib - Arduino commands about libraries.","title":"SEE ALSO"},{"location":"commands/arduino-cli_lib_upgrade/","text":"arduino-cli lib upgrade \u00b6 Upgrades installed libraries. Synopsis \u00b6 This command upgrades an installed library to the latest available version. Multiple libraries can be passed separated by a space. If no arguments are provided, the command will upgrade all the installed libraries where an update is available. arduino-cli lib upgrade [flags] Examples \u00b6 arduino-cli lib upgrade arduino-cli lib upgrade Audio arduino-cli lib upgrade Audio ArduinoJson Options \u00b6 -h, --help help for upgrade Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli lib - Arduino commands about libraries.","title":"lib upgrade"},{"location":"commands/arduino-cli_lib_upgrade/#arduino-cli-lib-upgrade","text":"Upgrades installed libraries.","title":"arduino-cli lib upgrade"},{"location":"commands/arduino-cli_lib_upgrade/#synopsis","text":"This command upgrades an installed library to the latest available version. Multiple libraries can be passed separated by a space. If no arguments are provided, the command will upgrade all the installed libraries where an update is available. arduino-cli lib upgrade [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_lib_upgrade/#examples","text":"arduino-cli lib upgrade arduino-cli lib upgrade Audio arduino-cli lib upgrade Audio ArduinoJson","title":"Examples"},{"location":"commands/arduino-cli_lib_upgrade/#options","text":"-h, --help help for upgrade","title":"Options"},{"location":"commands/arduino-cli_lib_upgrade/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_lib_upgrade/#see-also","text":"arduino-cli lib - Arduino commands about libraries.","title":"SEE ALSO"},{"location":"commands/arduino-cli_monitor/","text":"arduino-cli monitor \u00b6 Open a communication port with a board. Synopsis \u00b6 Open a communication port with a board. arduino-cli monitor [flags] Examples \u00b6 arduino-cli monitor -p /dev/ttyACM0 arduino-cli monitor -p /dev/ttyACM0 --describe Options \u00b6 --board-options strings List of board options separated by commas. Or can be used multiple times for multiple options. -c, --config strings Configure communication port settings. The format is <ID>=<value>[,<ID>=<value>]... --describe Show all the settings of the communication port. --discovery-timeout duration Max time to wait for port discovery, e.g.: 30s, 1m (default 1s) -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for monitor -p, --port string Upload port address, e.g.: COM3 or /dev/ttyACM2 -m, --profile string Sketch profile to use -l, --protocol string Upload port protocol, e.g: serial -q, --quiet Run in silent mode, show only monitor input and output. --raw Set terminal in raw mode (unbuffered). --timestamp Timestamp each incoming line. Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli - Arduino CLI.","title":"monitor"},{"location":"commands/arduino-cli_monitor/#arduino-cli-monitor","text":"Open a communication port with a board.","title":"arduino-cli monitor"},{"location":"commands/arduino-cli_monitor/#synopsis","text":"Open a communication port with a board. arduino-cli monitor [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_monitor/#examples","text":"arduino-cli monitor -p /dev/ttyACM0 arduino-cli monitor -p /dev/ttyACM0 --describe","title":"Examples"},{"location":"commands/arduino-cli_monitor/#options","text":"--board-options strings List of board options separated by commas. Or can be used multiple times for multiple options. -c, --config strings Configure communication port settings. The format is <ID>=<value>[,<ID>=<value>]... --describe Show all the settings of the communication port. --discovery-timeout duration Max time to wait for port discovery, e.g.: 30s, 1m (default 1s) -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for monitor -p, --port string Upload port address, e.g.: COM3 or /dev/ttyACM2 -m, --profile string Sketch profile to use -l, --protocol string Upload port protocol, e.g: serial -q, --quiet Run in silent mode, show only monitor input and output. --raw Set terminal in raw mode (unbuffered). --timestamp Timestamp each incoming line.","title":"Options"},{"location":"commands/arduino-cli_monitor/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_monitor/#see-also","text":"arduino-cli - Arduino CLI.","title":"SEE ALSO"},{"location":"commands/arduino-cli_outdated/","text":"arduino-cli outdated \u00b6 Lists cores and libraries that can be upgraded Synopsis \u00b6 This commands shows a list of installed cores and/or libraries that can be upgraded. If nothing needs to be updated the output is empty. arduino-cli outdated [flags] Examples \u00b6 arduino-cli outdated Options \u00b6 -h, --help help for outdated Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli - Arduino CLI.","title":"outdated"},{"location":"commands/arduino-cli_outdated/#arduino-cli-outdated","text":"Lists cores and libraries that can be upgraded","title":"arduino-cli outdated"},{"location":"commands/arduino-cli_outdated/#synopsis","text":"This commands shows a list of installed cores and/or libraries that can be upgraded. If nothing needs to be updated the output is empty. arduino-cli outdated [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_outdated/#examples","text":"arduino-cli outdated","title":"Examples"},{"location":"commands/arduino-cli_outdated/#options","text":"-h, --help help for outdated","title":"Options"},{"location":"commands/arduino-cli_outdated/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_outdated/#see-also","text":"arduino-cli - Arduino CLI.","title":"SEE ALSO"},{"location":"commands/arduino-cli_sketch/","text":"arduino-cli sketch \u00b6 Arduino CLI sketch commands. Synopsis \u00b6 Arduino CLI sketch commands. Examples \u00b6 arduino-cli sketch new MySketch Options \u00b6 -h, --help help for sketch Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli - Arduino CLI. arduino-cli sketch archive - Creates a zip file containing all sketch files. arduino-cli sketch new - Create a new Sketch","title":"sketch"},{"location":"commands/arduino-cli_sketch/#arduino-cli-sketch","text":"Arduino CLI sketch commands.","title":"arduino-cli sketch"},{"location":"commands/arduino-cli_sketch/#synopsis","text":"Arduino CLI sketch commands.","title":"Synopsis"},{"location":"commands/arduino-cli_sketch/#examples","text":"arduino-cli sketch new MySketch","title":"Examples"},{"location":"commands/arduino-cli_sketch/#options","text":"-h, --help help for sketch","title":"Options"},{"location":"commands/arduino-cli_sketch/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_sketch/#see-also","text":"arduino-cli - Arduino CLI. arduino-cli sketch archive - Creates a zip file containing all sketch files. arduino-cli sketch new - Create a new Sketch","title":"SEE ALSO"},{"location":"commands/arduino-cli_sketch_archive/","text":"arduino-cli sketch archive \u00b6 Creates a zip file containing all sketch files. Synopsis \u00b6 Creates a zip file containing all sketch files. arduino-cli sketch archive <sketchPath> <archivePath> [flags] Examples \u00b6 arduino-cli archive arduino-cli archive . arduino-cli archive . MySketchArchive.zip arduino-cli archive /home/user/Arduino/MySketch arduino-cli archive /home/user/Arduino/MySketch /home/user/MySketchArchive.zip Options \u00b6 -h, --help help for archive --include-build-dir Includes build directory in the archive. -f, --overwrite Overwrites an already existing archive Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli sketch - Arduino CLI sketch commands.","title":"sketch archive"},{"location":"commands/arduino-cli_sketch_archive/#arduino-cli-sketch-archive","text":"Creates a zip file containing all sketch files.","title":"arduino-cli sketch archive"},{"location":"commands/arduino-cli_sketch_archive/#synopsis","text":"Creates a zip file containing all sketch files. arduino-cli sketch archive <sketchPath> <archivePath> [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_sketch_archive/#examples","text":"arduino-cli archive arduino-cli archive . arduino-cli archive . MySketchArchive.zip arduino-cli archive /home/user/Arduino/MySketch arduino-cli archive /home/user/Arduino/MySketch /home/user/MySketchArchive.zip","title":"Examples"},{"location":"commands/arduino-cli_sketch_archive/#options","text":"-h, --help help for archive --include-build-dir Includes build directory in the archive. -f, --overwrite Overwrites an already existing archive","title":"Options"},{"location":"commands/arduino-cli_sketch_archive/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_sketch_archive/#see-also","text":"arduino-cli sketch - Arduino CLI sketch commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_sketch_new/","text":"arduino-cli sketch new \u00b6 Create a new Sketch Synopsis \u00b6 Create a new Sketch arduino-cli sketch new [flags] Examples \u00b6 arduino-cli sketch new MultiBlinker Options \u00b6 -h, --help help for new -f, --overwrite Overwrites an existing .ino sketch. Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli sketch - Arduino CLI sketch commands.","title":"sketch new"},{"location":"commands/arduino-cli_sketch_new/#arduino-cli-sketch-new","text":"Create a new Sketch","title":"arduino-cli sketch new"},{"location":"commands/arduino-cli_sketch_new/#synopsis","text":"Create a new Sketch arduino-cli sketch new [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_sketch_new/#examples","text":"arduino-cli sketch new MultiBlinker","title":"Examples"},{"location":"commands/arduino-cli_sketch_new/#options","text":"-h, --help help for new -f, --overwrite Overwrites an existing .ino sketch.","title":"Options"},{"location":"commands/arduino-cli_sketch_new/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_sketch_new/#see-also","text":"arduino-cli sketch - Arduino CLI sketch commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_update/","text":"arduino-cli update \u00b6 Updates the index of cores and libraries Synopsis \u00b6 Updates the index of cores and libraries to the latest versions. arduino-cli update [flags] Examples \u00b6 arduino-cli update Options \u00b6 -h, --help help for update --show-outdated Show outdated cores and libraries after index update Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli - Arduino CLI.","title":"update"},{"location":"commands/arduino-cli_update/#arduino-cli-update","text":"Updates the index of cores and libraries","title":"arduino-cli update"},{"location":"commands/arduino-cli_update/#synopsis","text":"Updates the index of cores and libraries to the latest versions. arduino-cli update [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_update/#examples","text":"arduino-cli update","title":"Examples"},{"location":"commands/arduino-cli_update/#options","text":"-h, --help help for update --show-outdated Show outdated cores and libraries after index update","title":"Options"},{"location":"commands/arduino-cli_update/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_update/#see-also","text":"arduino-cli - Arduino CLI.","title":"SEE ALSO"},{"location":"commands/arduino-cli_upgrade/","text":"arduino-cli upgrade \u00b6 Upgrades installed cores and libraries. Synopsis \u00b6 Upgrades installed cores and libraries to latest version. arduino-cli upgrade [flags] Examples \u00b6 arduino-cli upgrade Options \u00b6 -h, --help help for upgrade --run-post-install Force run of post-install scripts (if the CLI is not running interactively). --run-pre-uninstall Force run of pre-uninstall scripts (if the CLI is not running interactively). --skip-post-install Force skip of post-install scripts (if the CLI is running interactively). --skip-pre-uninstall Force skip of pre-uninstall scripts (if the CLI is running interactively). Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli - Arduino CLI.","title":"upgrade"},{"location":"commands/arduino-cli_upgrade/#arduino-cli-upgrade","text":"Upgrades installed cores and libraries.","title":"arduino-cli upgrade"},{"location":"commands/arduino-cli_upgrade/#synopsis","text":"Upgrades installed cores and libraries to latest version. arduino-cli upgrade [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_upgrade/#examples","text":"arduino-cli upgrade","title":"Examples"},{"location":"commands/arduino-cli_upgrade/#options","text":"-h, --help help for upgrade --run-post-install Force run of post-install scripts (if the CLI is not running interactively). --run-pre-uninstall Force run of pre-uninstall scripts (if the CLI is not running interactively). --skip-post-install Force skip of post-install scripts (if the CLI is running interactively). --skip-pre-uninstall Force skip of pre-uninstall scripts (if the CLI is running interactively).","title":"Options"},{"location":"commands/arduino-cli_upgrade/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_upgrade/#see-also","text":"arduino-cli - Arduino CLI.","title":"SEE ALSO"},{"location":"commands/arduino-cli_upload/","text":"arduino-cli upload \u00b6 Upload Arduino sketches. Synopsis \u00b6 Upload Arduino sketches. This does NOT compile the sketch prior to upload. arduino-cli upload [flags] Examples \u00b6 arduino-cli upload /home/user/Arduino/MySketch -p /dev/ttyACM0 -b arduino:avr:uno arduino-cli upload -p 192.168.10.1 -b arduino:avr:uno --upload-field password=abc Options \u00b6 --board-options strings List of board options separated by commas. Or can be used multiple times for multiple options. --discovery-timeout duration Max time to wait for port discovery, e.g.: 30s, 1m (default 1s) -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for upload --input-dir string Directory containing binaries to upload. -i, --input-file string Binary file to upload. -p, --port string Upload port address, e.g.: COM3 or /dev/ttyACM2 -m, --profile string Sketch profile to use -P, --programmer string Programmer to use, e.g: atmel_ice -l, --protocol string Upload port protocol, e.g: serial -F, --upload-field key=value Set a value for a field required to upload. -v, --verbose Optional, turns on verbose mode. -t, --verify Verify uploaded binary after the upload. Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli - Arduino CLI.","title":"upload"},{"location":"commands/arduino-cli_upload/#arduino-cli-upload","text":"Upload Arduino sketches.","title":"arduino-cli upload"},{"location":"commands/arduino-cli_upload/#synopsis","text":"Upload Arduino sketches. This does NOT compile the sketch prior to upload. arduino-cli upload [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_upload/#examples","text":"arduino-cli upload /home/user/Arduino/MySketch -p /dev/ttyACM0 -b arduino:avr:uno arduino-cli upload -p 192.168.10.1 -b arduino:avr:uno --upload-field password=abc","title":"Examples"},{"location":"commands/arduino-cli_upload/#options","text":"--board-options strings List of board options separated by commas. Or can be used multiple times for multiple options. --discovery-timeout duration Max time to wait for port discovery, e.g.: 30s, 1m (default 1s) -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for upload --input-dir string Directory containing binaries to upload. -i, --input-file string Binary file to upload. -p, --port string Upload port address, e.g.: COM3 or /dev/ttyACM2 -m, --profile string Sketch profile to use -P, --programmer string Programmer to use, e.g: atmel_ice -l, --protocol string Upload port protocol, e.g: serial -F, --upload-field key=value Set a value for a field required to upload. -v, --verbose Optional, turns on verbose mode. -t, --verify Verify uploaded binary after the upload.","title":"Options"},{"location":"commands/arduino-cli_upload/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_upload/#see-also","text":"arduino-cli - Arduino CLI.","title":"SEE ALSO"},{"location":"commands/arduino-cli_version/","text":"arduino-cli version \u00b6 Shows version number of Arduino CLI. Synopsis \u00b6 Shows the version number of Arduino CLI which is installed on your system. arduino-cli version [flags] Examples \u00b6 arduino-cli version Options \u00b6 -h, --help help for version Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output. SEE ALSO \u00b6 arduino-cli - Arduino CLI.","title":"version"},{"location":"commands/arduino-cli_version/#arduino-cli-version","text":"Shows version number of Arduino CLI.","title":"arduino-cli version"},{"location":"commands/arduino-cli_version/#synopsis","text":"Shows the version number of Arduino CLI which is installed on your system. arduino-cli version [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_version/#examples","text":"arduino-cli version","title":"Examples"},{"location":"commands/arduino-cli_version/#options","text":"-h, --help help for version","title":"Options"},{"location":"commands/arduino-cli_version/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --json Print the output in JSON format. --log Print the logs on the standard output. --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be: text, json --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic --no-color Disable colored output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_version/#see-also","text":"arduino-cli - Arduino CLI.","title":"SEE ALSO"},{"location":"guides/secure-boot/","text":"Secure Boot \u00b6 A \"secure boot\" capability may be offered by Arduino boards platforms. The compiled sketch is signed and encrypted by a tool before being flashed to the target board. The bootloader of the board is then responsible for starting the compiled sketch only if the matching keys are used. To be able to correctly carry out all the operations at the end of the build we can leverage the post build hooks to sign and encrypt a binary by using recipe.hooks.objcopy.postobjcopy.NUMBER.pattern key in platform.txt . The security keys used are defined in the boards.txt file, this way there could be different keys for different boards. [...] ## Create secure image (bin file) recipe.hooks.objcopy.postobjcopy.1.pattern={build.postbuild.cmd} # # IMGTOOL # tools.imgtool.cmd=imgtool tools.imgtool.flags=sign --key \"{build.keys.keychain}/{build.keys.sign_key}\" --encrypt \"{build.keys.keychain}/{build.keys.encrypt_key}\" \"{build.path}/{build.project_name}.bin\" \"{build.path}/{build.project_name}.bin\" --align {build.alignment} --max-align {build.alignment} --version {build.version} --header-size {build.header_size} --pad-header --slot-size {build.slot_size} [...] By having only tools.TOOL_NAME.cmd and tools.TOOL_NAME.flags , we can customize the behavior with a custom board option . Then in the boards.txt we can define the new option to use a different build.postbuild.cmd : [...] menu.security=Security setting envie_m7.menu.security.none=None envie_m7.menu.security.sien=Signature + Encryption envie_m7.menu.security.sien.build.postbuild.cmd=\"{tools.imgtool.path}/{tools.imgtool.cmd}\" {tools.imgtool.flags} envie_m7.menu.security.none.build.postbuild.cmd=\"{tools.imgtool.path}/{tools.imgtool.cmd}\" exit envie_m7.menu.security.sien.build.keys.keychain={runtime.platform.path}/libraries/MCUboot/default_keys envie_m7.menu.security.sien.build.keys.sign_key=default-signing-priv-key.pem envie_m7.menu.security.sien.build.keys.encrypt_key=default-encrypt-pub-key.pem [...] The security keys can be added with: build.keys.keychain indicates the path of the dir where to search for the custom keys to sign and encrypt a binary. build.keys.sign_key indicates the name of the custom signing key to use to sign a binary during the compile process. build.keys.encrypt_key indicates the name of the custom encryption key to use to encrypt a binary during the compile process. It's suggested to use the property names mentioned before, because they can be overridden respectively with --keys-keychain , --sign-key and --encrypt-key Arduino CLI compile flags . For example, by using the following command, the sketch is compiled and the resulting binary is signed and encrypted with the specified keys located in /home/user/Arduino/keys directory: arduino-cli compile -b arduino:mbed_portenta:envie_m7:security=sien --keys-keychain /home/user/Arduino/keys --sign-key ecdsa-p256-signing-priv-key.pem --encrypt-key ecdsa-p256-encrypt-pub-key.pem /home/user/Arduino/MySketch","title":"Secure boot"},{"location":"guides/secure-boot/#secure-boot","text":"A \"secure boot\" capability may be offered by Arduino boards platforms. The compiled sketch is signed and encrypted by a tool before being flashed to the target board. The bootloader of the board is then responsible for starting the compiled sketch only if the matching keys are used. To be able to correctly carry out all the operations at the end of the build we can leverage the post build hooks to sign and encrypt a binary by using recipe.hooks.objcopy.postobjcopy.NUMBER.pattern key in platform.txt . The security keys used are defined in the boards.txt file, this way there could be different keys for different boards. [...] ## Create secure image (bin file) recipe.hooks.objcopy.postobjcopy.1.pattern={build.postbuild.cmd} # # IMGTOOL # tools.imgtool.cmd=imgtool tools.imgtool.flags=sign --key \"{build.keys.keychain}/{build.keys.sign_key}\" --encrypt \"{build.keys.keychain}/{build.keys.encrypt_key}\" \"{build.path}/{build.project_name}.bin\" \"{build.path}/{build.project_name}.bin\" --align {build.alignment} --max-align {build.alignment} --version {build.version} --header-size {build.header_size} --pad-header --slot-size {build.slot_size} [...] By having only tools.TOOL_NAME.cmd and tools.TOOL_NAME.flags , we can customize the behavior with a custom board option . Then in the boards.txt we can define the new option to use a different build.postbuild.cmd : [...] menu.security=Security setting envie_m7.menu.security.none=None envie_m7.menu.security.sien=Signature + Encryption envie_m7.menu.security.sien.build.postbuild.cmd=\"{tools.imgtool.path}/{tools.imgtool.cmd}\" {tools.imgtool.flags} envie_m7.menu.security.none.build.postbuild.cmd=\"{tools.imgtool.path}/{tools.imgtool.cmd}\" exit envie_m7.menu.security.sien.build.keys.keychain={runtime.platform.path}/libraries/MCUboot/default_keys envie_m7.menu.security.sien.build.keys.sign_key=default-signing-priv-key.pem envie_m7.menu.security.sien.build.keys.encrypt_key=default-encrypt-pub-key.pem [...] The security keys can be added with: build.keys.keychain indicates the path of the dir where to search for the custom keys to sign and encrypt a binary. build.keys.sign_key indicates the name of the custom signing key to use to sign a binary during the compile process. build.keys.encrypt_key indicates the name of the custom encryption key to use to encrypt a binary during the compile process. It's suggested to use the property names mentioned before, because they can be overridden respectively with --keys-keychain , --sign-key and --encrypt-key Arduino CLI compile flags . For example, by using the following command, the sketch is compiled and the resulting binary is signed and encrypted with the specified keys located in /home/user/Arduino/keys directory: arduino-cli compile -b arduino:mbed_portenta:envie_m7:security=sien --keys-keychain /home/user/Arduino/keys --sign-key ecdsa-p256-signing-priv-key.pem --encrypt-key ecdsa-p256-encrypt-pub-key.pem /home/user/Arduino/MySketch","title":"Secure Boot"},{"location":"rpc/commands/","text":"Protocol Documentation \u00b6 Table of Contents \u00b6 cc/arduino/cli/commands/v1/board.proto - BoardDetailsRequest - BoardDetailsResponse - BoardIdentificationProperties - BoardIdentificationProperties.PropertiesEntry - BoardListAllRequest - BoardListAllResponse - BoardListItem - BoardListRequest - BoardListResponse - BoardListWatchRequest - BoardListWatchResponse - BoardPlatform - BoardSearchRequest - BoardSearchResponse - ConfigOption - ConfigValue - DetectedPort - Help - Package - Systems - ToolsDependencies cc/arduino/cli/commands/v1/commands.proto - ArchiveSketchRequest - ArchiveSketchResponse - CheckForArduinoCLIUpdatesRequest - CheckForArduinoCLIUpdatesResponse - CleanDownloadCacheDirectoryRequest - CleanDownloadCacheDirectoryResponse - CreateRequest - CreateResponse - DestroyRequest - DestroyResponse - FailedInstanceInitError - IndexUpdateReport - InitRequest - InitResponse - InitResponse.Progress - LoadSketchRequest - LoadSketchResponse - NewSketchRequest - NewSketchResponse - SetSketchDefaultsRequest - SetSketchDefaultsResponse - UpdateIndexRequest - UpdateIndexResponse - UpdateIndexResponse.Result - UpdateLibrariesIndexRequest - UpdateLibrariesIndexResponse - UpdateLibrariesIndexResponse.Result - VersionRequest - VersionResponse - FailedInstanceInitReason - IndexUpdateReport.Status - ArduinoCoreService cc/arduino/cli/commands/v1/common.proto - Board - DownloadProgress - DownloadProgressEnd - DownloadProgressStart - DownloadProgressUpdate - HelpResources - InstalledPlatformReference - Instance - MissingProgrammerError - Platform - PlatformMetadata - PlatformRelease - PlatformSummary - PlatformSummary.ReleasesEntry - Programmer - Sketch - SketchProfile - TaskProgress cc/arduino/cli/commands/v1/compile.proto - BuilderResult - CompileDiagnostic - CompileDiagnosticContext - CompileDiagnosticNote - CompileRequest - CompileRequest.SourceOverrideEntry - CompileResponse - ExecutableSectionSize - InstanceNeedsReinitializationError cc/arduino/cli/commands/v1/core.proto - AlreadyAtLatestVersionError - PlatformDownloadRequest - PlatformDownloadResponse - PlatformInstallRequest - PlatformInstallResponse - PlatformLoadingError - PlatformSearchRequest - PlatformSearchResponse - PlatformUninstallRequest - PlatformUninstallResponse - PlatformUpgradeRequest - PlatformUpgradeResponse cc/arduino/cli/commands/v1/debug.proto - DebugGCCToolchainConfiguration - DebugOpenOCDServerConfiguration - DebugRequest - DebugResponse - GetDebugConfigRequest - GetDebugConfigResponse - GetDebugConfigResponse.CustomConfigsEntry - IsDebugSupportedRequest - IsDebugSupportedResponse cc/arduino/cli/commands/v1/lib.proto - DownloadResource - GitLibraryInstallRequest - GitLibraryInstallResponse - InstalledLibrary - Library - Library.CompatibleWithEntry - Library.PropertiesEntry - LibraryDependency - LibraryDependencyStatus - LibraryDownloadRequest - LibraryDownloadResponse - LibraryInstallRequest - LibraryInstallResponse - LibraryListRequest - LibraryListResponse - LibraryRelease - LibraryResolveDependenciesRequest - LibraryResolveDependenciesResponse - LibrarySearchRequest - LibrarySearchResponse - LibraryUninstallRequest - LibraryUninstallResponse - LibraryUpgradeAllRequest - LibraryUpgradeAllResponse - LibraryUpgradeRequest - LibraryUpgradeResponse - SearchedLibrary - SearchedLibrary.ReleasesEntry - ZipLibraryInstallRequest - ZipLibraryInstallResponse - LibraryInstallLocation - LibraryLayout - LibraryLocation - LibrarySearchStatus cc/arduino/cli/commands/v1/monitor.proto - EnumerateMonitorPortSettingsRequest - EnumerateMonitorPortSettingsResponse - MonitorPortConfiguration - MonitorPortOpenRequest - MonitorPortSetting - MonitorPortSettingDescriptor - MonitorRequest - MonitorResponse cc/arduino/cli/commands/v1/port.proto - Port - Port.PropertiesEntry cc/arduino/cli/commands/v1/settings.proto - SettingsDeleteRequest - SettingsDeleteResponse - SettingsGetAllRequest - SettingsGetAllResponse - SettingsGetValueRequest - SettingsGetValueResponse - SettingsMergeRequest - SettingsMergeResponse - SettingsSetValueRequest - SettingsSetValueResponse - SettingsWriteRequest - SettingsWriteResponse cc/arduino/cli/commands/v1/upload.proto - BurnBootloaderRequest - BurnBootloaderRequest.UserFieldsEntry - BurnBootloaderResponse - ListProgrammersAvailableForUploadRequest - ListProgrammersAvailableForUploadResponse - ProgrammerIsRequiredForUploadError - SupportedUserFieldsRequest - SupportedUserFieldsResponse - UploadRequest - UploadRequest.UserFieldsEntry - UploadResponse - UploadResult - UploadUsingProgrammerRequest - UploadUsingProgrammerRequest.UserFieldsEntry - UploadUsingProgrammerResponse - UserField Scalar Value Types Top cc/arduino/cli/commands/v1/board.proto \u00b6 BoardDetailsRequest \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. fqbn string The fully qualified board name of the board you want information about (e.g., arduino:avr:uno ). do_not_expand_build_properties bool If set to true the returned build properties will be left unexpanded, with the variables placeholders exactly as defined in the platform. BoardDetailsResponse \u00b6 Field Type Label Description fqbn string The fully qualified board name of the board. name string Name used to identify the board to humans (e.g., Arduino Uno). version string Installed version of the board's platform. properties_id string The board ID component of the FQBN (e.g., uno ). alias string Board alias that can be used as a more user friendly alternative to the FQBN. official bool Whether this is an official or 3rd party board. pinout string URL of the board's pinout documentation. package Package Data about the package that contains the board's platform. platform BoardPlatform Data about the board's platform. tools_dependencies ToolsDependencies repeated Tool dependencies of the board. config_options ConfigOption repeated The board's custom configuration options. programmers Programmer repeated List of programmers supported by the board identification_properties BoardIdentificationProperties repeated Identifying information for the board (e.g., USB VID/PID). build_properties string repeated Board build properties used for compiling default_programmer_id string Default programmer for the board BoardIdentificationProperties \u00b6 Field Type Label Description properties BoardIdentificationProperties.PropertiesEntry repeated A set of properties that must all be matched to identify the board BoardIdentificationProperties.PropertiesEntry \u00b6 Field Type Label Description key string value string BoardListAllRequest \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. search_args string repeated The search query to filter the board list by. include_hidden_boards bool Set to true to get also the boards marked as \"hidden\" in the platform BoardListAllResponse \u00b6 Field Type Label Description boards BoardListItem repeated List of installed boards. BoardListItem \u00b6 Field Type Label Description name string The name for use when identifying the board to a human. fqbn string The fully qualified board name. Used to identify the board to a machine. is_hidden bool If the board is marked as \"hidden\" in the platform platform Platform Platform this board belongs to BoardListRequest \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. timeout int64 Search for boards for the given time (in milliseconds) fqbn string The fully qualified board name of the board you want information about (e.g., arduino:avr:uno ). BoardListResponse \u00b6 Field Type Label Description ports DetectedPort repeated List of ports and the boards detected on those ports. BoardListWatchRequest \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. BoardListWatchResponse \u00b6 Field Type Label Description event_type string Event type as received from the serial discovery tool port DetectedPort Information about the port error string Eventual errors when detecting connected boards BoardPlatform \u00b6 Field Type Label Description architecture string Architecture of the platform (e.g., avr ). category string Category of the platform. Set to Contributed for 3rd party platforms. url string Download URL of the platform archive file. archive_filename string File name of the platform archive. checksum string Checksum of the platform archive. size int64 File size of the platform archive. name string Name used to identify the platform to humans. BoardSearchRequest \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. search_args string The search query to filter the board list by. include_hidden_boards bool Set to true to get also the boards marked as \"hidden\" in installed platforms BoardSearchResponse \u00b6 Field Type Label Description boards BoardListItem repeated List of installed and installable boards. ConfigOption \u00b6 Field Type Label Description option string ID of the configuration option. For identifying the option to machines. option_label string Name of the configuration option for identifying the option to humans. values ConfigValue repeated Possible values of the configuration option. ConfigValue \u00b6 Field Type Label Description value string The configuration option value. value_label string Label to identify the configuration option to humans. selected bool Whether the configuration option is selected. DetectedPort \u00b6 Field Type Label Description matching_boards BoardListItem repeated The possible boards attached to the port. port Port The port details Help \u00b6 Field Type Label Description online string URL for getting online help. Package \u00b6 Field Type Label Description maintainer string Maintainer of the package. url string The URL of the platforms index file (e.g., https://downloads.arduino.cc/packages/package_index.json ). website_url string A URL provided by the package author, intended to point to their website. email string Email address of the package maintainer. name string Package vendor name. help Help Resources for getting help about using the package. Systems \u00b6 Field Type Label Description checksum string Checksum of the tool archive. host string Operating system identifier. archive_filename string File name of the tool archive. url string Download URL of the tool archive. size int64 File size of the tool archive. ToolsDependencies \u00b6 Field Type Label Description packager string Vendor name of the package containing the tool definition. name string Tool name. version string Tool version. systems Systems repeated Data for the operating system-specific builds of the tool. Top cc/arduino/cli/commands/v1/commands.proto \u00b6 ArchiveSketchRequest \u00b6 Field Type Label Description sketch_path string Absolute path to Sketch file or folder containing Sketch file archive_path string Absolute path to archive that will be created or folder that will contain it include_build_dir bool Specifies if build directory should be included in the archive overwrite bool Allows to override an already existing archive ArchiveSketchResponse \u00b6 CheckForArduinoCLIUpdatesRequest \u00b6 Field Type Label Description force_check bool Force the check, even if the configuration says not to check for updates. CheckForArduinoCLIUpdatesResponse \u00b6 Field Type Label Description newest_version string The latest version of Arduino CLI available, if bigger than the current version. CleanDownloadCacheDirectoryRequest \u00b6 Field Type Label Description instance Instance The Arduino Core Service instance. CleanDownloadCacheDirectoryResponse \u00b6 CreateRequest \u00b6 CreateResponse \u00b6 Field Type Label Description instance Instance An Arduino Core instance. DestroyRequest \u00b6 Field Type Label Description instance Instance The Arduino Core Service instance to destroy. DestroyResponse \u00b6 FailedInstanceInitError \u00b6 Field Type Label Description reason FailedInstanceInitReason specific cause of the error message string explanation of the error IndexUpdateReport \u00b6 Field Type Label Description index_url string The URL of the index that was updated. status IndexUpdateReport.Status The result of the index update. InitRequest \u00b6 Field Type Label Description instance Instance An Arduino Core instance. profile string Profile to use sketch_path string The path where the sketch is stored InitResponse \u00b6 Field Type Label Description init_progress InitResponse.Progress error google.rpc.Status profile SketchProfile Selected profile information InitResponse.Progress \u00b6 Field Type Label Description download_progress DownloadProgress Progress of the downloads of platforms and libraries index files. task_progress TaskProgress Describes the current stage of the initialization. LoadSketchRequest \u00b6 Field Type Label Description sketch_path string Absolute path to single sketch file or a sketch folder LoadSketchResponse \u00b6 Field Type Label Description sketch Sketch The loaded sketch NewSketchRequest \u00b6 Field Type Label Description sketch_name string New sketch name sketch_dir string Optional: create a Sketch in this directory (used as \"Sketchbook\" directory). Default Sketchbook directory \"directories.User\" is used if sketch_dir is empty. overwrite bool Specificies if an existing .ino sketch should be overwritten NewSketchResponse \u00b6 Field Type Label Description main_file string Absolute path to a main sketch file SetSketchDefaultsRequest \u00b6 Field Type Label Description sketch_path string Absolute path to Sketch file or folder containing Sketch file default_fqbn string The desired value for default_fqbn in project file (sketch.yaml) default_port_address string The desired value for default_port in project file (sketch.yaml) default_port_protocol string The desired value for default_protocol in project file (sketch.yaml) default_programmer string The desired value for default_programmer in project file (sketch.yaml) SetSketchDefaultsResponse \u00b6 Field Type Label Description default_fqbn string The value of default_fqnn that has been written in project file (sketch.yaml) default_port_address string The value of default_port that has been written in project file (sketch.yaml) default_port_protocol string The value of default_protocol that has been written in project file (sketch.yaml) default_programmer string The value of default_programmer that has been written in project file (sketch.yaml) UpdateIndexRequest \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. ignore_custom_package_indexes bool If set to true user defined package indexes will not be updated. update_if_older_than_secs int64 Only perform index update if the index file is older than this value in seconds. UpdateIndexResponse \u00b6 Field Type Label Description download_progress DownloadProgress Progress of the package index download. result UpdateIndexResponse.Result The result of the index update. UpdateIndexResponse.Result \u00b6 Field Type Label Description updated_indexes IndexUpdateReport repeated The result of the packages index update. UpdateLibrariesIndexRequest \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. update_if_older_than_secs int64 Only perform index update if the index file is older than this value in seconds. UpdateLibrariesIndexResponse \u00b6 Field Type Label Description download_progress DownloadProgress Progress of the libraries index download. result UpdateLibrariesIndexResponse.Result The result of the index update. UpdateLibrariesIndexResponse.Result \u00b6 Field Type Label Description libraries_index IndexUpdateReport The result of the libraries index update. VersionRequest \u00b6 VersionResponse \u00b6 Field Type Label Description version string The version of Arduino CLI in use. FailedInstanceInitReason \u00b6 Name Number Description FAILED_INSTANCE_INIT_REASON_UNSPECIFIED 0 FAILED_INSTANCE_INIT_REASON_UNSPECIFIED the error reason is not specialized FAILED_INSTANCE_INIT_REASON_INVALID_INDEX_URL 1 INVALID_INDEX_URL a package index url is malformed FAILED_INSTANCE_INIT_REASON_INDEX_LOAD_ERROR 2 FAILED_INSTANCE_INIT_REASON_INDEX_LOAD_ERROR failure encountered while loading an index FAILED_INSTANCE_INIT_REASON_TOOL_LOAD_ERROR 3 FAILED_INSTANCE_INIT_REASON_TOOL_LOAD_ERROR failure encountered while loading a tool FAILED_INSTANCE_INIT_REASON_INDEX_DOWNLOAD_ERROR 4 FAILED_INSTANCE_INIT_REASON_INDEX_DOWNLOAD_ERROR failure encountered while downloading an index IndexUpdateReport.Status \u00b6 Name Number Description STATUS_UNSPECIFIED 0 The status of the index update is unspecified. STATUS_UPDATED 1 The index has been successfully updated. STATUS_ALREADY_UP_TO_DATE 2 The index was already up to date. STATUS_FAILED 3 The index update failed. STATUS_SKIPPED 4 The index update was skipped. ArduinoCoreService \u00b6 The main Arduino Platform service API Method Name Request Type Response Type Description Create CreateRequest CreateResponse Create a new Arduino Core instance Init InitRequest InitResponse stream Initializes an existing Arduino Core instance by loading platforms and libraries Destroy DestroyRequest DestroyResponse Destroy an instance of the Arduino Core Service UpdateIndex UpdateIndexRequest UpdateIndexResponse stream Update package index of the Arduino Core Service UpdateLibrariesIndex UpdateLibrariesIndexRequest UpdateLibrariesIndexResponse stream Update libraries index Version VersionRequest VersionResponse Get the version of Arduino CLI in use. NewSketch NewSketchRequest NewSketchResponse Create a new Sketch LoadSketch LoadSketchRequest LoadSketchResponse Returns all files composing a Sketch ArchiveSketch ArchiveSketchRequest ArchiveSketchResponse Creates a zip file containing all files of specified Sketch SetSketchDefaults SetSketchDefaultsRequest SetSketchDefaultsResponse Sets the sketch default FQBN and Port Address/Protocol in the sketch project file (sketch.yaml). These metadata can be retrieved using LoadSketch. BoardDetails BoardDetailsRequest BoardDetailsResponse Requests details about a board BoardList BoardListRequest BoardListResponse List the boards currently connected to the computer. BoardListAll BoardListAllRequest BoardListAllResponse List all the boards provided by installed platforms. BoardSearch BoardSearchRequest BoardSearchResponse Search boards in installed and not installed Platforms. BoardListWatch BoardListWatchRequest BoardListWatchResponse stream List boards connection and disconnected events. Compile CompileRequest CompileResponse stream Compile an Arduino sketch. PlatformInstall PlatformInstallRequest PlatformInstallResponse stream Download and install a platform and its tool dependencies. PlatformDownload PlatformDownloadRequest PlatformDownloadResponse stream Download a platform and its tool dependencies to the staging/packages subdirectory of the data directory. PlatformUninstall PlatformUninstallRequest PlatformUninstallResponse stream Uninstall a platform as well as its tool dependencies that are not used by other installed platforms. PlatformUpgrade PlatformUpgradeRequest PlatformUpgradeResponse stream Upgrade an installed platform to the latest version. Upload UploadRequest UploadResponse stream Upload a compiled sketch to a board. UploadUsingProgrammer UploadUsingProgrammerRequest UploadUsingProgrammerResponse stream Upload a compiled sketch to a board using a programmer. SupportedUserFields SupportedUserFieldsRequest SupportedUserFieldsResponse Returns the list of users fields necessary to upload to that board using the specified protocol. ListProgrammersAvailableForUpload ListProgrammersAvailableForUploadRequest ListProgrammersAvailableForUploadResponse List programmers available for a board. BurnBootloader BurnBootloaderRequest BurnBootloaderResponse stream Burn bootloader to a board. PlatformSearch PlatformSearchRequest PlatformSearchResponse Search for a platform in the platforms indexes. LibraryDownload LibraryDownloadRequest LibraryDownloadResponse stream Download the archive file of an Arduino library in the libraries index to the staging directory. LibraryInstall LibraryInstallRequest LibraryInstallResponse stream Download and install an Arduino library from the libraries index. LibraryUpgrade LibraryUpgradeRequest LibraryUpgradeResponse stream Upgrade a library to the newest version available. ZipLibraryInstall ZipLibraryInstallRequest ZipLibraryInstallResponse stream Install a library from a Zip File GitLibraryInstall GitLibraryInstallRequest GitLibraryInstallResponse stream Download and install a library from a git url LibraryUninstall LibraryUninstallRequest LibraryUninstallResponse stream Uninstall an Arduino library. LibraryUpgradeAll LibraryUpgradeAllRequest LibraryUpgradeAllResponse stream Upgrade all installed Arduino libraries to the newest version available. LibraryResolveDependencies LibraryResolveDependenciesRequest LibraryResolveDependenciesResponse List the recursive dependencies of a library, as defined by the depends field of the library.properties files. LibrarySearch LibrarySearchRequest LibrarySearchResponse Search the Arduino libraries index for libraries. LibraryList LibraryListRequest LibraryListResponse List the installed libraries. Monitor MonitorRequest stream MonitorResponse stream Open a monitor connection to a board port EnumerateMonitorPortSettings EnumerateMonitorPortSettingsRequest EnumerateMonitorPortSettingsResponse Returns the parameters that can be set in the MonitorRequest calls Debug DebugRequest stream DebugResponse stream Start a debug session and communicate with the debugger tool. IsDebugSupported IsDebugSupportedRequest IsDebugSupportedResponse Determine if debugging is suported given a specific configuration. GetDebugConfig GetDebugConfigRequest GetDebugConfigResponse Query the debugger information given a specific configuration. CheckForArduinoCLIUpdates CheckForArduinoCLIUpdatesRequest CheckForArduinoCLIUpdatesResponse Check for updates to the Arduino CLI. CleanDownloadCacheDirectory CleanDownloadCacheDirectoryRequest CleanDownloadCacheDirectoryResponse Clean the download cache directory (where archives are downloaded). SettingsGetAll SettingsGetAllRequest SettingsGetAllResponse List all the settings. SettingsMerge SettingsMergeRequest SettingsMergeResponse Set multiple settings values at once. SettingsGetValue SettingsGetValueRequest SettingsGetValueResponse Get the value of a specific setting. SettingsSetValue SettingsSetValueRequest SettingsSetValueResponse Set the value of a specific setting. SettingsWrite SettingsWriteRequest SettingsWriteResponse Writes to file settings currently stored in memory SettingsDelete SettingsDeleteRequest SettingsDeleteResponse Deletes an entry and rewrites the file settings Top cc/arduino/cli/commands/v1/common.proto \u00b6 Board \u00b6 Field Type Label Description name string Name used to identify the board to humans. fqbn string Fully qualified board name used to identify the board to machines. The FQBN is only available for installed boards. DownloadProgress \u00b6 Field Type Label Description start DownloadProgressStart update DownloadProgressUpdate end DownloadProgressEnd DownloadProgressEnd \u00b6 Field Type Label Description success bool True if the download is successful message string Info or error message, depending on the value of 'success'. Some examples: \"File xxx already downloaded\" or \"Connection timeout\" DownloadProgressStart \u00b6 Field Type Label Description url string URL of the download. label string The label to display on the progress bar. DownloadProgressUpdate \u00b6 Field Type Label Description downloaded int64 Size of the downloaded portion of the file. total_size int64 Total size of the file being downloaded. HelpResources \u00b6 Field Type Label Description online string A URL provided by the author of the platform's package, intended to point to their online help service. InstalledPlatformReference \u00b6 Field Type Label Description id string Platform ID (e.g., arduino:avr ). version string Version of the platform. install_dir string Installation directory of the platform package_url string 3rd party platform URL Instance \u00b6 Field Type Label Description id int32 The ID of the instance. MissingProgrammerError \u00b6 MissingProgrammerError is a status error detail that is returned when the operation can not be completed due to a missing programmer argument. Platform \u00b6 Platform is a structure containing all the information about a single platform release. Field Type Label Description metadata PlatformMetadata Generic information about a platform release PlatformRelease Information about a specific release of a platform PlatformMetadata \u00b6 PlatformMetadata contains generic information about a platform (not correlated to a specific release). Field Type Label Description id string Platform ID (e.g., arduino:avr ). maintainer string Maintainer of the platform's package. website string A URL provided by the author of the platform's package, intended to point to their website. email string Email of the maintainer of the platform's package. manually_installed bool If true this Platform has been installed manually in the user' sketchbook hardware folder deprecated bool True if the latest release of this Platform has been deprecated indexed bool If true the platform is indexed PlatformRelease \u00b6 PlatformRelease contains information about a specific release of a platform. Field Type Label Description name string Name used to identify the platform to humans (e.g., \"Arduino AVR Boards\"). version string Version of the platform release type string repeated Type of the platform. installed bool True if the platform is installed boards Board repeated List of boards provided by the platform. If the platform is installed, this is the boards listed in the platform's boards.txt. If the platform is not installed, this is an arbitrary list of board names provided by the platform author for display and may not match boards.txt. help HelpResources A URL provided by the author of the platform's package, intended to point to their online help service. missing_metadata bool This field is true if the platform is missing installation metadata (this happens if the platform has been installed with the legacy Arduino IDE <=1.8.x). If the platform miss metadata and it's not indexed through a package index, it may fail to work correctly in some circumstances, and it may need to be reinstalled. This should be evaluated only when the PlatformRelease is Installed otherwise is an undefined behaviour. deprecated bool True this release is deprecated compatible bool True if the platform dependencies are available for the current OS/ARCH. This also means that the platform is installable. PlatformSummary \u00b6 PlatformSummary is a structure containing all the information about a platform and all its available releases. Field Type Label Description metadata PlatformMetadata Generic information about a platform releases PlatformSummary.ReleasesEntry repeated Maps version to the corresponding PlatformRelease installed_version string The installed version of the platform, or empty string if none installed latest_version string The latest available version of the platform that can be installable, or empty if none available. PlatformSummary.ReleasesEntry \u00b6 Field Type Label Description key string value PlatformRelease Programmer \u00b6 Field Type Label Description platform string Platform name id string Programmer ID name string Programmer name Sketch \u00b6 Field Type Label Description main_file string Absolute path to a main sketch files location_path string Absolute path to folder that contains main_file other_sketch_files string repeated List of absolute paths to other sketch files additional_files string repeated List of absolute paths to additional sketch files root_folder_files string repeated List of absolute paths to supported files in the sketch root folder, main file excluded default_fqbn string Default FQBN set in project file (sketch.yaml) default_port string Default Port set in project file (sketch.yaml) default_protocol string Default Protocol set in project file (sketch.yaml) profiles SketchProfile repeated List of profiles present in the project file (sketch.yaml) default_profile SketchProfile Default profile set in the project file (sketch.yaml) default_programmer string Default Programmer set in project file (sketch.yaml) SketchProfile \u00b6 Field Type Label Description name string Name of the profile fqbn string FQBN used by the profile programmer string Programmer used by the profile TaskProgress \u00b6 Field Type Label Description name string Description of the task. message string Additional information about the task. completed bool Whether the task is complete. percent float Amount in percent of the task completion (optional) Top cc/arduino/cli/commands/v1/compile.proto \u00b6 BuilderResult \u00b6 Field Type Label Description build_path string The compiler build path used_libraries Library repeated The libraries used in the build executable_sections_size ExecutableSectionSize repeated The size of the executable split by sections board_platform InstalledPlatformReference The platform where the board is defined build_platform InstalledPlatformReference The platform used for the build (if referenced from the board platform) build_properties string repeated Build properties used for compiling diagnostics CompileDiagnostic repeated Compiler errors and warnings CompileDiagnostic \u00b6 Field Type Label Description severity string Severity of the diagnostic message string The explanation of the diagnostic (it may be multiple preformatted lines) file string The file containing the diagnostic line int64 The line of the diagnostic if available (starts from 1) column int64 The column of the diagnostic if available (starts from 1) context CompileDiagnosticContext repeated The context where this diagnostic is found (it may be multiple files that represents a chain of includes, or a text describing where the diagnostic is found) notes CompileDiagnosticNote repeated Annotations or suggestions to the diagnostic made by the compiler CompileDiagnosticContext \u00b6 Field Type Label Description message string The message describing the context reference file string The file of the context reference line int64 The line of the context reference column int64 The column of the context reference CompileDiagnosticNote \u00b6 Field Type Label Description message string The message describing the compiler note file string The file of the compiler note line int64 The line of the compiler note column int64 The column of the compiler note CompileRequest \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno . If this field is not defined, the FQBN of the board attached to the sketch via the BoardAttach method is used. sketch_path string The path where the sketch is stored. show_properties bool Just get the build properties and do not run the full compile. preprocess bool Print preprocessed code to stdout instead of compiling. build_cache_path string Builds of 'core.a' are saved into this path to be cached and reused. build_path string Path to use to store the files used for the compilation. If omitted, a directory will be created in the operating system's default temporary path. build_properties string repeated List of custom build properties separated by commas. warnings string Used to tell gcc which warning level to use. The level names are: \"none\", \"default\", \"more\" and \"all\". verbose bool Turns on verbose mode. quiet bool Suppresses almost every output. jobs int32 The max number of concurrent compiler instances to run (as make -jx ). If jobs is set to 0, it will use the number of available CPUs as the maximum. libraries string repeated A list of paths to directories containing a collection of libraries. optimize_for_debug bool Optimize compile output for debug, not for release. export_dir string Optional: save the build artifacts in this directory, the directory must exist. clean bool Optional: cleanup the build folder and do not use any previously cached build create_compilation_database_only bool When set to true only the compilation database will be produced and no actual build will be performed. source_override CompileRequest.SourceOverrideEntry repeated This map (source file -> new content) let the builder use the provided content instead of reading the corresponding file on disk. This is useful for IDE that have unsaved changes in memory. The path must be relative to the sketch directory. Only files from the sketch are allowed. export_binaries bool optional When set to true the compiled binary will be copied to the export directory. library string repeated A list of paths to single libraries root directory. keys_keychain string The path where to search for the custom signing key name and the encrypt key name sign_key string The name of the custom key to use for signing during the compile process encrypt_key string The name of the custom key to use for encrypting during the compile process skip_libraries_discovery bool If set to true the build will skip the library discovery process and will use the same libraries of latest build. Enabling this flag may produce a wrong output and should not be used in regular compiles unless there is a very specific reason to do so. This flag is mainly provided for usage in language servers to optimize the build speed in some particular cases. do_not_expand_build_properties bool If set to true the returned build properties will be left unexpanded, with the variables placeholders exactly as defined in the platform. CompileRequest.SourceOverrideEntry \u00b6 Field Type Label Description key string value string CompileResponse \u00b6 Field Type Label Description out_stream bytes The output of the compilation process (stream) err_stream bytes The error output of the compilation process (stream) progress TaskProgress Completions reports of the compilation process (stream) result BuilderResult The compilation result ExecutableSectionSize \u00b6 Field Type Label Description name string size int64 max_size int64 InstanceNeedsReinitializationError \u00b6 Top cc/arduino/cli/commands/v1/core.proto \u00b6 AlreadyAtLatestVersionError \u00b6 AlreadyAtLatestVersionError is returned when an upgrade is not possible because already at latest version. PlatformDownloadRequest \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. platform_package string architecture string Architecture name of the platform (e.g., avr ). version string Platform version to download. PlatformDownloadResponse \u00b6 Field Type Label Description progress DownloadProgress Progress of the downloads of platform and tool files. PlatformInstallRequest \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. platform_package string Vendor name of the platform (e.g., arduino ). architecture string Architecture name of the platform (e.g., avr ). version string Platform version to install. skip_post_install bool Set to true to not run (eventual) post install scripts for trusted platforms no_overwrite bool Set to true to skip installation if a different version of the platform is already installed. skip_pre_uninstall bool Set to true to not run (eventual) pre uninstall scripts for trusted platforms when performing platform upgrades PlatformInstallResponse \u00b6 Field Type Label Description progress DownloadProgress Progress of the downloads of the platform and tool files. task_progress TaskProgress Description of the current stage of the installation. PlatformLoadingError \u00b6 PlatformSearchRequest \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. search_args string Keywords for the search. manually_installed bool Whether to show manually installed platforms. false causes to skip manually installed platforms. PlatformSearchResponse \u00b6 Field Type Label Description search_output PlatformSummary repeated Results of the search. PlatformUninstallRequest \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. platform_package string Vendor name of the platform (e.g., arduino ). architecture string Architecture name of the platform (e.g., avr ). skip_pre_uninstall bool Set to true to not run (eventual) pre uninstall scripts for trusted platforms PlatformUninstallResponse \u00b6 Field Type Label Description task_progress TaskProgress Description of the current stage of the uninstall. PlatformUpgradeRequest \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. platform_package string Vendor name of the platform (e.g., arduino ). architecture string Architecture name of the platform (e.g., avr ). skip_post_install bool Set to true to not run (eventual) post install scripts for trusted platforms skip_pre_uninstall bool Set to true to not run (eventual) pre uninstall scripts for trusted platforms when performing platform upgrades PlatformUpgradeResponse \u00b6 Field Type Label Description progress DownloadProgress Progress of the downloads of the platform and tool files. task_progress TaskProgress Description of the current stage of the upgrade. platform Platform The upgraded platform. Top cc/arduino/cli/commands/v1/debug.proto \u00b6 DebugGCCToolchainConfiguration \u00b6 Configurations specific for the 'gcc' toolchain DebugOpenOCDServerConfiguration \u00b6 Configuration specific for the 'openocd` server Field Type Label Description path string path to openocd scripts_dir string path to openocd scripts scripts string repeated list of scripts to execute by openocd DebugRequest \u00b6 The top-level message sent by the client for the Debug method. Multiple DebugRequest messages can be sent but the first message must contain a GetDebugConfigRequest message to initialize the debug session. All subsequent messages must contain bytes to be sent to the debug session and must not contain a GetDebugConfigRequest message. Content must be either a debug session config or data to be sent. Field Type Label Description debug_request GetDebugConfigRequest Provides information to the debug that specifies which is the target. The first DebugRequest message must contain a GetDebugConfigRequest message. data bytes The data to be sent to the target being monitored. send_interrupt bool Set this to true to send and Interrupt signal to the debugger process DebugResponse \u00b6 The streaming response may contain chunks of data from the debugger or an error. Field Type Label Description data bytes Incoming data from the debugger tool. error string Incoming error output from the debugger tool. GetDebugConfigRequest \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. fqbn string Fully qualified board name of the board in use (e.g., arduino:samd:mkr1000 ). If this is omitted, the FQBN attached to the sketch will be used. sketch_path string Path to the sketch that is running on the board. The compiled executable is expected to be located under this path. port Port Port of the debugger (optional). interpreter string Which GDB command interpreter to use. import_dir string Directory containing the compiled executable. If import_dir is not specified, the executable is assumed to be in {sketch_path}/build/{fqbn}/ . programmer string The programmer to use for debugging. GetDebugConfigResponse \u00b6 Field Type Label Description executable string The executable binary to debug toolchain string The toolchain type used for the build (for example \"gcc\") toolchain_path string The toolchain directory toolchain_prefix string The toolchain architecture prefix (for example \"arm-none-eabi\") server string The GDB server type used to connect to the programmer/board (for example \"openocd\") server_path string The GDB server directory toolchain_configuration google.protobuf.Any Extra configuration parameters wrt toolchain server_configuration google.protobuf.Any Extra configuration parameters wrt GDB server custom_configs GetDebugConfigResponse.CustomConfigsEntry repeated Custom debugger configurations (not handled directly by Arduino CLI but provided for 3rd party plugins/debuggers). The map keys identifies which 3rd party plugin/debugger is referred, the map string values contains a JSON configuration for it. svd_file string the SVD file to use programmer string The programmer specified in the request GetDebugConfigResponse.CustomConfigsEntry \u00b6 Field Type Label Description key string value string IsDebugSupportedRequest \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. fqbn string Fully qualified board name of the board in use (e.g., arduino:samd:mkr1000 ). port Port Port of the debugger (optional). interpreter string Which GDB command interpreter to use. programmer string The programmer to use for debugging. IsDebugSupportedResponse \u00b6 Field Type Label Description debugging_supported bool True if debugging is supported debug_fqbn string This is the same FQBN given in the IsDebugSupportedRequest but cleaned up of the board options that do not affect the debugger configuration. It may be used by clients/IDE to group slightly different boards option selections under the same debug configuration. Top cc/arduino/cli/commands/v1/lib.proto \u00b6 DownloadResource \u00b6 Field Type Label Description url string Download URL of the library archive. archive_filename string Filename of the library archive. checksum string Checksum of the library archive. size int64 File size of the library archive. cache_path string The directory under the staging subdirectory of the data directory the library archive file will be downloaded to. GitLibraryInstallRequest \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. url string URL to the repository containing the library overwrite bool Set to true to overwrite an already installed library with the same name. Defaults to false. GitLibraryInstallResponse \u00b6 Field Type Label Description task_progress TaskProgress Description of the current stage of the installation. InstalledLibrary \u00b6 Field Type Label Description library Library Information about the library. release LibraryRelease When the updatable field of the LibraryList request is set to true , this will contain information on the latest version of the library in the libraries index. Library \u00b6 Field Type Label Description name string Library name (value of name field in library.properties). author string Value of the author field in library.properties. maintainer string Value of the maintainer field in library.properties. sentence string Value of the sentence field in library.properties. paragraph string Value of the paragraph field in library.properties. website string Value of the url field in library.properties. category string Value of the category field in library.properties. architectures string repeated Value of the architectures field in library.properties. types string repeated The type categories of the library. Possible values: Arduino , Partner , Recommended , Contributed , Retired . install_dir string The path of the library directory. source_dir string The location of the library's source files. utility_dir string The location of the library's utility directory. container_platform string If location is platform_builtin or referenced_platform_builtin , the identifying string for the platform containing the library (e.g., arduino:avr@1.8.2 ). dot_a_linkage bool Value of the dot_a_linkage field in library.properties. precompiled bool Value of the precompiled field in library.properties. ld_flags string Value of the ldflags field in library.properties. is_legacy bool A library.properties file is not present in the library's root directory. version string Value of the version field in library.properties. license string Value of the license field in library.properties. properties Library.PropertiesEntry repeated The data from the library's library.properties file, including unused fields. location LibraryLocation The location type of the library installation. layout LibraryLayout The library format type. examples string repeated The example sketches provided by the library provides_includes string repeated Value of the includes field in library.properties or, if missing, the list of include files available on the library source root directory. compatible_with Library.CompatibleWithEntry repeated Map of FQBNs that specifies if library is compatible with this library in_development bool This value is set to true if the library is in development and should not be treated as read-only. This status is determined by the presence of a .development file in the library root directory. Library.CompatibleWithEntry \u00b6 Field Type Label Description key string value bool Library.PropertiesEntry \u00b6 Field Type Label Description key string value string LibraryDependency \u00b6 Field Type Label Description name string Library name of the dependency. version_constraint string Version constraint of the dependency. LibraryDependencyStatus \u00b6 Field Type Label Description name string The name of the library dependency. version_required string The required version of the library dependency. version_installed string Version of the library dependency currently installed. LibraryDownloadRequest \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. name string Name of the library. version string The version of the library to download. LibraryDownloadResponse \u00b6 Field Type Label Description progress DownloadProgress Progress of the library download. LibraryInstallRequest \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. name string Name of the library. version string The version of the library to install. no_deps bool Set to true to skip installation of specified library's dependencies, defaults to false. no_overwrite bool Set to true to skip installation if a different version of the library or one of its dependencies is already installed, defaults to false. install_location LibraryInstallLocation Install the library and dependencies in the specified location LibraryInstallResponse \u00b6 Field Type Label Description progress DownloadProgress Progress of the library download. task_progress TaskProgress Description of the current stage of the installation. LibraryListRequest \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. all bool Whether to include built-in libraries (from platforms and the Arduino IDE) in the listing. updatable bool Whether to list only libraries for which there is a newer version than the installed version available in the libraries index. name string If set filters out the libraries not matching name fqbn string By setting this field all duplicate libraries are filtered out leaving only the libraries that will be used to compile for the specified board FQBN. LibraryListResponse \u00b6 Field Type Label Description installed_libraries InstalledLibrary repeated List of installed libraries. LibraryRelease \u00b6 Field Type Label Description author string Value of the author field in library.properties. version string Value of the version field in library.properties. maintainer string Value of the maintainer field in library.properties. sentence string Value of the sentence field in library.properties. paragraph string Value of the paragraph field in library.properties. website string Value of the url field in library.properties. category string Value of the category field in library.properties. architectures string repeated Value of the architectures field in library.properties. types string repeated The type categories of the library, as defined in the libraries index. Possible values: Arduino , Partner , Recommended , Contributed , Retired . resources DownloadResource Information about the library archive file. license string Value of the license field in library.properties. provides_includes string repeated Value of the includes field in library.properties. dependencies LibraryDependency repeated The names of the library's dependencies, as defined by the 'depends' field of library.properties. LibraryResolveDependenciesRequest \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. name string Name of the library. version string The version of the library to check dependencies of. If no version is specified, dependencies of the newest version will be listed. do_not_update_installed_libraries bool If true the computed solution will try to keep exising libraries at their current version. LibraryResolveDependenciesResponse \u00b6 Field Type Label Description dependencies LibraryDependencyStatus repeated Dependencies of the library. LibrarySearchRequest \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. omit_releases_details bool Set to true to not populate the releases field in the response (may save a lot of bandwidth/CPU). search_args string Keywords for the search. LibrarySearchResponse \u00b6 Field Type Label Description libraries SearchedLibrary repeated The results of the search. status LibrarySearchStatus Whether the search yielded results. LibraryUninstallRequest \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. name string Name of the library. version string The version of the library to uninstall. LibraryUninstallResponse \u00b6 Field Type Label Description task_progress TaskProgress Description of the current stage of the uninstallation. LibraryUpgradeAllRequest \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. LibraryUpgradeAllResponse \u00b6 Field Type Label Description progress DownloadProgress Progress of the downloads of files needed for the upgrades. task_progress TaskProgress Description of the current stage of the upgrade. LibraryUpgradeRequest \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. name string Name of the library. no_deps bool Set to true to skip installation of specified library's dependencies, defaults to false. LibraryUpgradeResponse \u00b6 Field Type Label Description progress DownloadProgress Progress of the library download. task_progress TaskProgress Description of the current stage of the installation. SearchedLibrary \u00b6 Field Type Label Description name string Library name. releases SearchedLibrary.ReleasesEntry repeated The index data for the available versions of the library. The key of the map is the library version. latest LibraryRelease The index data for the latest version of the library. available_versions string repeated The available versions of this library. SearchedLibrary.ReleasesEntry \u00b6 Field Type Label Description key string value LibraryRelease ZipLibraryInstallRequest \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. path string Path to the archived library overwrite bool Set to true to overwrite an already installed library with the same name. Defaults to false. ZipLibraryInstallResponse \u00b6 Field Type Label Description task_progress TaskProgress Description of the current stage of the installation. LibraryInstallLocation \u00b6 Name Number Description LIBRARY_INSTALL_LOCATION_USER 0 In the libraries subdirectory of the user directory (sketchbook). This is the default if not specified. LIBRARY_INSTALL_LOCATION_BUILTIN 1 In the configured 'builtin.libraries' directory. LibraryLayout \u00b6 Name Number Description LIBRARY_LAYOUT_FLAT 0 Library is in the 1.0 Arduino library format. LIBRARY_LAYOUT_RECURSIVE 1 Library is in the 1.5 Arduino library format. LibraryLocation \u00b6 Name Number Description LIBRARY_LOCATION_BUILTIN 0 In the configured 'builtin.libraries' directory. LIBRARY_LOCATION_USER 1 In the libraries subdirectory of the user directory (sketchbook). LIBRARY_LOCATION_PLATFORM_BUILTIN 2 In the libraries subdirectory of a platform. LIBRARY_LOCATION_REFERENCED_PLATFORM_BUILTIN 3 When LibraryLocation is used in a context where a board is specified, this indicates the library is in the libraries subdirectory of a platform referenced by the board's platform. LIBRARY_LOCATION_UNMANAGED 4 Outside the libraries folders managed by the CLI. LibrarySearchStatus \u00b6 Name Number Description LIBRARY_SEARCH_STATUS_FAILED 0 No search results were found. LIBRARY_SEARCH_STATUS_SUCCESS 1 Search results were found. Top cc/arduino/cli/commands/v1/monitor.proto \u00b6 EnumerateMonitorPortSettingsRequest \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. port_protocol string The port protocol to enumerate settings. fqbn string The board FQBN we are trying to connect to. This is optional, and it's needed to disambiguate if more than one platform provides the pluggable monitor for a given port protocol. EnumerateMonitorPortSettingsResponse \u00b6 Field Type Label Description settings MonitorPortSettingDescriptor repeated A list of descriptors of the settings that may be changed for the monitor port. MonitorPortConfiguration \u00b6 Field Type Label Description settings MonitorPortSetting repeated The port configuration parameters to configure MonitorPortOpenRequest \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. port Port Port to open, must be filled only on the first request fqbn string The board FQBN we are trying to connect to. This is optional, and it's needed to disambiguate if more than one platform provides the pluggable monitor for a given port protocol. port_configuration MonitorPortConfiguration Port configuration, optional, contains settings of the port to be applied MonitorPortSetting \u00b6 Field Type Label Description setting_id string value string MonitorPortSettingDescriptor \u00b6 Field Type Label Description setting_id string The setting identifier label string A human-readable label of the setting (to be displayed on the GUI) type string The setting type (at the moment only \"enum\" is avaiable) enum_values string repeated The values allowed on \"enum\" types value string The selected or default value MonitorRequest \u00b6 Field Type Label Description open_request MonitorPortOpenRequest Open request, it must be the first incoming message tx_data bytes Data to send to the port updated_configuration MonitorPortConfiguration Port configuration, contains settings of the port to be changed close bool Close message, set to true to gracefully close a port (this ensure that the gRPC streaming call is closed by the daemon AFTER the port has been successfully closed) MonitorResponse \u00b6 Field Type Label Description error string Eventual errors dealing with monitor port rx_data bytes Data received from the port applied_settings MonitorPortSetting repeated Settings applied to the port, may be returned after a port is opened (to report the default settings) or after a new port_configuration is sent (to report the new settings applied) success bool A message with this field set to true is sent as soon as the port is succesfully opened Top cc/arduino/cli/commands/v1/port.proto \u00b6 Port \u00b6 Port represents a board port that may be used to upload or to monitor a board Field Type Label Description address string Address of the port (e.g., /dev/ttyACM0 ). label string The port label to show on the GUI (e.g. \"ttyACM0\") protocol string Protocol of the port (e.g., serial , network , ...). protocol_label string A human friendly description of the protocol (e.g., \"Serial Port (USB)\"). properties Port.PropertiesEntry repeated A set of properties of the port hardware_id string The hardware ID (serial number) of the board attached to the port Port.PropertiesEntry \u00b6 Field Type Label Description key string value string Top cc/arduino/cli/commands/v1/settings.proto \u00b6 SettingsDeleteRequest \u00b6 Field Type Label Description key string The key of the setting to delete. SettingsDeleteResponse \u00b6 SettingsGetAllRequest \u00b6 SettingsGetAllResponse \u00b6 Field Type Label Description json_data string The settings, in JSON format. SettingsGetValueRequest \u00b6 Field Type Label Description key string The key of the setting. SettingsGetValueResponse \u00b6 Field Type Label Description key string The key of the setting. json_data string The setting, in JSON format. SettingsMergeRequest \u00b6 Field Type Label Description json_data string The settings, in JSON format. SettingsMergeResponse \u00b6 SettingsSetValueRequest \u00b6 Field Type Label Description key string The key of the setting. json_data string The setting, in JSON format. SettingsSetValueResponse \u00b6 SettingsWriteRequest \u00b6 Field Type Label Description file_path string Path to settings file (e.g. /path/to/arduino-cli.yaml) SettingsWriteResponse \u00b6 Top cc/arduino/cli/commands/v1/upload.proto \u00b6 BurnBootloaderRequest \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. fqbn string Fully qualified board name of the target board (e.g., arduino:avr:uno ). port Port The port of the programmer used to program the bootloader. verbose bool Whether to turn on verbose output during the programming. verify bool After programming, verify the contents of the memory on the board match the uploaded binary. programmer string The programmer to use for burning bootloader. dry_run bool If set to true, the actual upload will not be performed but a trace output will be printed stdout. This is for debugging purposes. user_fields BurnBootloaderRequest.UserFieldsEntry repeated User provided fields usually used by upload tools that need authentication or in any case fields that can be customized by the user at upload time and cannot be known previously. For more info: https://arduino.github.io/arduino-cli/latest/platform-specification/#user-provided-fields BurnBootloaderRequest.UserFieldsEntry \u00b6 Field Type Label Description key string value string BurnBootloaderResponse \u00b6 Field Type Label Description out_stream bytes The output of the burn bootloader process. err_stream bytes The error output of the burn bootloader process. ListProgrammersAvailableForUploadRequest \u00b6 Field Type Label Description instance Instance fqbn string ListProgrammersAvailableForUploadResponse \u00b6 Field Type Label Description programmers Programmer repeated ProgrammerIsRequiredForUploadError \u00b6 SupportedUserFieldsRequest \u00b6 Field Type Label Description instance Instance fqbn string protocol string Protocol that will be used to upload, this information is necessary to pick the right upload tool for the board specified with the FQBN. SupportedUserFieldsResponse \u00b6 Field Type Label Description user_fields UserField repeated User fields supported by board specified in SupportedUserFieldsRequest. If board doesn't support any field it will be empty. UploadRequest \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. fqbn string Fully qualified board name of the target board (e.g., arduino:avr:uno ). If this field is not defined, the FQBN of the board attached to the sketch via the BoardAttach method is used. sketch_path string Path where the sketch to be uploaded is stored. Unless the import_file field is defined, the compiled binary is assumed to be at the location and filename under this path where it is saved by the Compile method. port Port The port of the board. verbose bool Whether to turn on verbose output during the upload. verify bool After upload, verify that the contents of the memory on the board match the uploaded binary. import_file string When import_file is specified, it overrides the import_dir and sketch_path params. import_dir string Custom path to a directory containing compiled files. When import_dir is not specified, the standard build directory under sketch_path is used. programmer string The programmer to use for upload. If set an UploadUsingProgrammer is triggered instead of a normal upload. The UploadUsingProgrammer call may also be used for explicit error check. dry_run bool If set to true, the actual upload will not be performed but a trace output will be printed stdout. This is for debugging purposes. user_fields UploadRequest.UserFieldsEntry repeated User provided fields usually used by upload tools that need authentication or in any case fields that can be customized by the user at upload time and cannot be known previously. For more info: https://arduino.github.io/arduino-cli/latest/platform-specification/#user-provided-fields UploadRequest.UserFieldsEntry \u00b6 Field Type Label Description key string value string UploadResponse \u00b6 Field Type Label Description out_stream bytes The output of the upload process. err_stream bytes The error output of the upload process. result UploadResult The upload result UploadResult \u00b6 Field Type Label Description updated_upload_port Port When a board requires a port disconnection to perform the upload, this field returns the port where the board reconnects after the upload. UploadUsingProgrammerRequest \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. fqbn string Fully qualified board name of the target board (e.g., arduino:avr:uno ). If this field is not defined, the FQBN of the board attached to the sketch via the BoardAttach method is used. sketch_path string Path where the sketch to be uploaded is stored. Unless the import_file field is defined, the compiled binary is assumed to be at the location and filename under this path where it is saved by the Compile method. port Port The port of the board. verbose bool Whether to turn on verbose output during the upload. verify bool After upload, verify that the contents of the memory on the board match the uploaded binary. import_file string When import_file is specified, it overrides the import_dir and sketch_path params. import_dir string Custom path to a directory containing compiled files. When import_dir is not specified, the standard build directory under sketch_path is used. programmer string The programmer to use for upload. dry_run bool If set to true, the actual upload will not be performed but a trace output will be printed stdout. This is for debugging purposes. user_fields UploadUsingProgrammerRequest.UserFieldsEntry repeated User provided fields usually used by upload tools that need authentication or in any case fields that can be customized by the user at upload time and cannot be known previously. For more info: https://arduino.github.io/arduino-cli/latest/platform-specification/#user-provided-fields UploadUsingProgrammerRequest.UserFieldsEntry \u00b6 Field Type Label Description key string value string UploadUsingProgrammerResponse \u00b6 Field Type Label Description out_stream bytes The output of the upload process. err_stream bytes The error output of the upload process. UserField \u00b6 Field Type Label Description tool_id string Id of the tool that supports this field name string Name used internally to store and retrieve this field label string Label is the text shown to the user when they need to input this field secret bool True if the value of the field must not be shown when typing, for example when the user inputs a network password Scalar Value Types \u00b6 .proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"commands"},{"location":"rpc/commands/#protocol-documentation","text":"","title":"Protocol Documentation"},{"location":"rpc/commands/#table-of-contents","text":"cc/arduino/cli/commands/v1/board.proto - BoardDetailsRequest - BoardDetailsResponse - BoardIdentificationProperties - BoardIdentificationProperties.PropertiesEntry - BoardListAllRequest - BoardListAllResponse - BoardListItem - BoardListRequest - BoardListResponse - BoardListWatchRequest - BoardListWatchResponse - BoardPlatform - BoardSearchRequest - BoardSearchResponse - ConfigOption - ConfigValue - DetectedPort - Help - Package - Systems - ToolsDependencies cc/arduino/cli/commands/v1/commands.proto - ArchiveSketchRequest - ArchiveSketchResponse - CheckForArduinoCLIUpdatesRequest - CheckForArduinoCLIUpdatesResponse - CleanDownloadCacheDirectoryRequest - CleanDownloadCacheDirectoryResponse - CreateRequest - CreateResponse - DestroyRequest - DestroyResponse - FailedInstanceInitError - IndexUpdateReport - InitRequest - InitResponse - InitResponse.Progress - LoadSketchRequest - LoadSketchResponse - NewSketchRequest - NewSketchResponse - SetSketchDefaultsRequest - SetSketchDefaultsResponse - UpdateIndexRequest - UpdateIndexResponse - UpdateIndexResponse.Result - UpdateLibrariesIndexRequest - UpdateLibrariesIndexResponse - UpdateLibrariesIndexResponse.Result - VersionRequest - VersionResponse - FailedInstanceInitReason - IndexUpdateReport.Status - ArduinoCoreService cc/arduino/cli/commands/v1/common.proto - Board - DownloadProgress - DownloadProgressEnd - DownloadProgressStart - DownloadProgressUpdate - HelpResources - InstalledPlatformReference - Instance - MissingProgrammerError - Platform - PlatformMetadata - PlatformRelease - PlatformSummary - PlatformSummary.ReleasesEntry - Programmer - Sketch - SketchProfile - TaskProgress cc/arduino/cli/commands/v1/compile.proto - BuilderResult - CompileDiagnostic - CompileDiagnosticContext - CompileDiagnosticNote - CompileRequest - CompileRequest.SourceOverrideEntry - CompileResponse - ExecutableSectionSize - InstanceNeedsReinitializationError cc/arduino/cli/commands/v1/core.proto - AlreadyAtLatestVersionError - PlatformDownloadRequest - PlatformDownloadResponse - PlatformInstallRequest - PlatformInstallResponse - PlatformLoadingError - PlatformSearchRequest - PlatformSearchResponse - PlatformUninstallRequest - PlatformUninstallResponse - PlatformUpgradeRequest - PlatformUpgradeResponse cc/arduino/cli/commands/v1/debug.proto - DebugGCCToolchainConfiguration - DebugOpenOCDServerConfiguration - DebugRequest - DebugResponse - GetDebugConfigRequest - GetDebugConfigResponse - GetDebugConfigResponse.CustomConfigsEntry - IsDebugSupportedRequest - IsDebugSupportedResponse cc/arduino/cli/commands/v1/lib.proto - DownloadResource - GitLibraryInstallRequest - GitLibraryInstallResponse - InstalledLibrary - Library - Library.CompatibleWithEntry - Library.PropertiesEntry - LibraryDependency - LibraryDependencyStatus - LibraryDownloadRequest - LibraryDownloadResponse - LibraryInstallRequest - LibraryInstallResponse - LibraryListRequest - LibraryListResponse - LibraryRelease - LibraryResolveDependenciesRequest - LibraryResolveDependenciesResponse - LibrarySearchRequest - LibrarySearchResponse - LibraryUninstallRequest - LibraryUninstallResponse - LibraryUpgradeAllRequest - LibraryUpgradeAllResponse - LibraryUpgradeRequest - LibraryUpgradeResponse - SearchedLibrary - SearchedLibrary.ReleasesEntry - ZipLibraryInstallRequest - ZipLibraryInstallResponse - LibraryInstallLocation - LibraryLayout - LibraryLocation - LibrarySearchStatus cc/arduino/cli/commands/v1/monitor.proto - EnumerateMonitorPortSettingsRequest - EnumerateMonitorPortSettingsResponse - MonitorPortConfiguration - MonitorPortOpenRequest - MonitorPortSetting - MonitorPortSettingDescriptor - MonitorRequest - MonitorResponse cc/arduino/cli/commands/v1/port.proto - Port - Port.PropertiesEntry cc/arduino/cli/commands/v1/settings.proto - SettingsDeleteRequest - SettingsDeleteResponse - SettingsGetAllRequest - SettingsGetAllResponse - SettingsGetValueRequest - SettingsGetValueResponse - SettingsMergeRequest - SettingsMergeResponse - SettingsSetValueRequest - SettingsSetValueResponse - SettingsWriteRequest - SettingsWriteResponse cc/arduino/cli/commands/v1/upload.proto - BurnBootloaderRequest - BurnBootloaderRequest.UserFieldsEntry - BurnBootloaderResponse - ListProgrammersAvailableForUploadRequest - ListProgrammersAvailableForUploadResponse - ProgrammerIsRequiredForUploadError - SupportedUserFieldsRequest - SupportedUserFieldsResponse - UploadRequest - UploadRequest.UserFieldsEntry - UploadResponse - UploadResult - UploadUsingProgrammerRequest - UploadUsingProgrammerRequest.UserFieldsEntry - UploadUsingProgrammerResponse - UserField Scalar Value Types Top","title":"Table of Contents"},{"location":"rpc/commands/#ccarduinoclicommandsv1boardproto","text":"","title":"cc/arduino/cli/commands/v1/board.proto"},{"location":"rpc/commands/#boarddetailsrequest","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. fqbn string The fully qualified board name of the board you want information about (e.g., arduino:avr:uno ). do_not_expand_build_properties bool If set to true the returned build properties will be left unexpanded, with the variables placeholders exactly as defined in the platform.","title":"BoardDetailsRequest"},{"location":"rpc/commands/#boarddetailsresponse","text":"Field Type Label Description fqbn string The fully qualified board name of the board. name string Name used to identify the board to humans (e.g., Arduino Uno). version string Installed version of the board's platform. properties_id string The board ID component of the FQBN (e.g., uno ). alias string Board alias that can be used as a more user friendly alternative to the FQBN. official bool Whether this is an official or 3rd party board. pinout string URL of the board's pinout documentation. package Package Data about the package that contains the board's platform. platform BoardPlatform Data about the board's platform. tools_dependencies ToolsDependencies repeated Tool dependencies of the board. config_options ConfigOption repeated The board's custom configuration options. programmers Programmer repeated List of programmers supported by the board identification_properties BoardIdentificationProperties repeated Identifying information for the board (e.g., USB VID/PID). build_properties string repeated Board build properties used for compiling default_programmer_id string Default programmer for the board","title":"BoardDetailsResponse"},{"location":"rpc/commands/#boardidentificationproperties","text":"Field Type Label Description properties BoardIdentificationProperties.PropertiesEntry repeated A set of properties that must all be matched to identify the board","title":"BoardIdentificationProperties"},{"location":"rpc/commands/#boardidentificationpropertiespropertiesentry","text":"Field Type Label Description key string value string","title":"BoardIdentificationProperties.PropertiesEntry"},{"location":"rpc/commands/#boardlistallrequest","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. search_args string repeated The search query to filter the board list by. include_hidden_boards bool Set to true to get also the boards marked as \"hidden\" in the platform","title":"BoardListAllRequest"},{"location":"rpc/commands/#boardlistallresponse","text":"Field Type Label Description boards BoardListItem repeated List of installed boards.","title":"BoardListAllResponse"},{"location":"rpc/commands/#boardlistitem","text":"Field Type Label Description name string The name for use when identifying the board to a human. fqbn string The fully qualified board name. Used to identify the board to a machine. is_hidden bool If the board is marked as \"hidden\" in the platform platform Platform Platform this board belongs to","title":"BoardListItem"},{"location":"rpc/commands/#boardlistrequest","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. timeout int64 Search for boards for the given time (in milliseconds) fqbn string The fully qualified board name of the board you want information about (e.g., arduino:avr:uno ).","title":"BoardListRequest"},{"location":"rpc/commands/#boardlistresponse","text":"Field Type Label Description ports DetectedPort repeated List of ports and the boards detected on those ports.","title":"BoardListResponse"},{"location":"rpc/commands/#boardlistwatchrequest","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response.","title":"BoardListWatchRequest"},{"location":"rpc/commands/#boardlistwatchresponse","text":"Field Type Label Description event_type string Event type as received from the serial discovery tool port DetectedPort Information about the port error string Eventual errors when detecting connected boards","title":"BoardListWatchResponse"},{"location":"rpc/commands/#boardplatform","text":"Field Type Label Description architecture string Architecture of the platform (e.g., avr ). category string Category of the platform. Set to Contributed for 3rd party platforms. url string Download URL of the platform archive file. archive_filename string File name of the platform archive. checksum string Checksum of the platform archive. size int64 File size of the platform archive. name string Name used to identify the platform to humans.","title":"BoardPlatform"},{"location":"rpc/commands/#boardsearchrequest","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. search_args string The search query to filter the board list by. include_hidden_boards bool Set to true to get also the boards marked as \"hidden\" in installed platforms","title":"BoardSearchRequest"},{"location":"rpc/commands/#boardsearchresponse","text":"Field Type Label Description boards BoardListItem repeated List of installed and installable boards.","title":"BoardSearchResponse"},{"location":"rpc/commands/#configoption","text":"Field Type Label Description option string ID of the configuration option. For identifying the option to machines. option_label string Name of the configuration option for identifying the option to humans. values ConfigValue repeated Possible values of the configuration option.","title":"ConfigOption"},{"location":"rpc/commands/#configvalue","text":"Field Type Label Description value string The configuration option value. value_label string Label to identify the configuration option to humans. selected bool Whether the configuration option is selected.","title":"ConfigValue"},{"location":"rpc/commands/#detectedport","text":"Field Type Label Description matching_boards BoardListItem repeated The possible boards attached to the port. port Port The port details","title":"DetectedPort"},{"location":"rpc/commands/#help","text":"Field Type Label Description online string URL for getting online help.","title":"Help"},{"location":"rpc/commands/#package","text":"Field Type Label Description maintainer string Maintainer of the package. url string The URL of the platforms index file (e.g., https://downloads.arduino.cc/packages/package_index.json ). website_url string A URL provided by the package author, intended to point to their website. email string Email address of the package maintainer. name string Package vendor name. help Help Resources for getting help about using the package.","title":"Package"},{"location":"rpc/commands/#systems","text":"Field Type Label Description checksum string Checksum of the tool archive. host string Operating system identifier. archive_filename string File name of the tool archive. url string Download URL of the tool archive. size int64 File size of the tool archive.","title":"Systems"},{"location":"rpc/commands/#toolsdependencies","text":"Field Type Label Description packager string Vendor name of the package containing the tool definition. name string Tool name. version string Tool version. systems Systems repeated Data for the operating system-specific builds of the tool. Top","title":"ToolsDependencies"},{"location":"rpc/commands/#ccarduinoclicommandsv1commandsproto","text":"","title":"cc/arduino/cli/commands/v1/commands.proto"},{"location":"rpc/commands/#archivesketchrequest","text":"Field Type Label Description sketch_path string Absolute path to Sketch file or folder containing Sketch file archive_path string Absolute path to archive that will be created or folder that will contain it include_build_dir bool Specifies if build directory should be included in the archive overwrite bool Allows to override an already existing archive","title":"ArchiveSketchRequest"},{"location":"rpc/commands/#archivesketchresponse","text":"","title":"ArchiveSketchResponse"},{"location":"rpc/commands/#checkforarduinocliupdatesrequest","text":"Field Type Label Description force_check bool Force the check, even if the configuration says not to check for updates.","title":"CheckForArduinoCLIUpdatesRequest"},{"location":"rpc/commands/#checkforarduinocliupdatesresponse","text":"Field Type Label Description newest_version string The latest version of Arduino CLI available, if bigger than the current version.","title":"CheckForArduinoCLIUpdatesResponse"},{"location":"rpc/commands/#cleandownloadcachedirectoryrequest","text":"Field Type Label Description instance Instance The Arduino Core Service instance.","title":"CleanDownloadCacheDirectoryRequest"},{"location":"rpc/commands/#cleandownloadcachedirectoryresponse","text":"","title":"CleanDownloadCacheDirectoryResponse"},{"location":"rpc/commands/#createrequest","text":"","title":"CreateRequest"},{"location":"rpc/commands/#createresponse","text":"Field Type Label Description instance Instance An Arduino Core instance.","title":"CreateResponse"},{"location":"rpc/commands/#destroyrequest","text":"Field Type Label Description instance Instance The Arduino Core Service instance to destroy.","title":"DestroyRequest"},{"location":"rpc/commands/#destroyresponse","text":"","title":"DestroyResponse"},{"location":"rpc/commands/#failedinstanceiniterror","text":"Field Type Label Description reason FailedInstanceInitReason specific cause of the error message string explanation of the error","title":"FailedInstanceInitError"},{"location":"rpc/commands/#indexupdatereport","text":"Field Type Label Description index_url string The URL of the index that was updated. status IndexUpdateReport.Status The result of the index update.","title":"IndexUpdateReport"},{"location":"rpc/commands/#initrequest","text":"Field Type Label Description instance Instance An Arduino Core instance. profile string Profile to use sketch_path string The path where the sketch is stored","title":"InitRequest"},{"location":"rpc/commands/#initresponse","text":"Field Type Label Description init_progress InitResponse.Progress error google.rpc.Status profile SketchProfile Selected profile information","title":"InitResponse"},{"location":"rpc/commands/#initresponseprogress","text":"Field Type Label Description download_progress DownloadProgress Progress of the downloads of platforms and libraries index files. task_progress TaskProgress Describes the current stage of the initialization.","title":"InitResponse.Progress"},{"location":"rpc/commands/#loadsketchrequest","text":"Field Type Label Description sketch_path string Absolute path to single sketch file or a sketch folder","title":"LoadSketchRequest"},{"location":"rpc/commands/#loadsketchresponse","text":"Field Type Label Description sketch Sketch The loaded sketch","title":"LoadSketchResponse"},{"location":"rpc/commands/#newsketchrequest","text":"Field Type Label Description sketch_name string New sketch name sketch_dir string Optional: create a Sketch in this directory (used as \"Sketchbook\" directory). Default Sketchbook directory \"directories.User\" is used if sketch_dir is empty. overwrite bool Specificies if an existing .ino sketch should be overwritten","title":"NewSketchRequest"},{"location":"rpc/commands/#newsketchresponse","text":"Field Type Label Description main_file string Absolute path to a main sketch file","title":"NewSketchResponse"},{"location":"rpc/commands/#setsketchdefaultsrequest","text":"Field Type Label Description sketch_path string Absolute path to Sketch file or folder containing Sketch file default_fqbn string The desired value for default_fqbn in project file (sketch.yaml) default_port_address string The desired value for default_port in project file (sketch.yaml) default_port_protocol string The desired value for default_protocol in project file (sketch.yaml) default_programmer string The desired value for default_programmer in project file (sketch.yaml)","title":"SetSketchDefaultsRequest"},{"location":"rpc/commands/#setsketchdefaultsresponse","text":"Field Type Label Description default_fqbn string The value of default_fqnn that has been written in project file (sketch.yaml) default_port_address string The value of default_port that has been written in project file (sketch.yaml) default_port_protocol string The value of default_protocol that has been written in project file (sketch.yaml) default_programmer string The value of default_programmer that has been written in project file (sketch.yaml)","title":"SetSketchDefaultsResponse"},{"location":"rpc/commands/#updateindexrequest","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. ignore_custom_package_indexes bool If set to true user defined package indexes will not be updated. update_if_older_than_secs int64 Only perform index update if the index file is older than this value in seconds.","title":"UpdateIndexRequest"},{"location":"rpc/commands/#updateindexresponse","text":"Field Type Label Description download_progress DownloadProgress Progress of the package index download. result UpdateIndexResponse.Result The result of the index update.","title":"UpdateIndexResponse"},{"location":"rpc/commands/#updateindexresponseresult","text":"Field Type Label Description updated_indexes IndexUpdateReport repeated The result of the packages index update.","title":"UpdateIndexResponse.Result"},{"location":"rpc/commands/#updatelibrariesindexrequest","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. update_if_older_than_secs int64 Only perform index update if the index file is older than this value in seconds.","title":"UpdateLibrariesIndexRequest"},{"location":"rpc/commands/#updatelibrariesindexresponse","text":"Field Type Label Description download_progress DownloadProgress Progress of the libraries index download. result UpdateLibrariesIndexResponse.Result The result of the index update.","title":"UpdateLibrariesIndexResponse"},{"location":"rpc/commands/#updatelibrariesindexresponseresult","text":"Field Type Label Description libraries_index IndexUpdateReport The result of the libraries index update.","title":"UpdateLibrariesIndexResponse.Result"},{"location":"rpc/commands/#versionrequest","text":"","title":"VersionRequest"},{"location":"rpc/commands/#versionresponse","text":"Field Type Label Description version string The version of Arduino CLI in use.","title":"VersionResponse"},{"location":"rpc/commands/#failedinstanceinitreason","text":"Name Number Description FAILED_INSTANCE_INIT_REASON_UNSPECIFIED 0 FAILED_INSTANCE_INIT_REASON_UNSPECIFIED the error reason is not specialized FAILED_INSTANCE_INIT_REASON_INVALID_INDEX_URL 1 INVALID_INDEX_URL a package index url is malformed FAILED_INSTANCE_INIT_REASON_INDEX_LOAD_ERROR 2 FAILED_INSTANCE_INIT_REASON_INDEX_LOAD_ERROR failure encountered while loading an index FAILED_INSTANCE_INIT_REASON_TOOL_LOAD_ERROR 3 FAILED_INSTANCE_INIT_REASON_TOOL_LOAD_ERROR failure encountered while loading a tool FAILED_INSTANCE_INIT_REASON_INDEX_DOWNLOAD_ERROR 4 FAILED_INSTANCE_INIT_REASON_INDEX_DOWNLOAD_ERROR failure encountered while downloading an index","title":"FailedInstanceInitReason"},{"location":"rpc/commands/#indexupdatereportstatus","text":"Name Number Description STATUS_UNSPECIFIED 0 The status of the index update is unspecified. STATUS_UPDATED 1 The index has been successfully updated. STATUS_ALREADY_UP_TO_DATE 2 The index was already up to date. STATUS_FAILED 3 The index update failed. STATUS_SKIPPED 4 The index update was skipped.","title":"IndexUpdateReport.Status"},{"location":"rpc/commands/#arduinocoreservice","text":"The main Arduino Platform service API Method Name Request Type Response Type Description Create CreateRequest CreateResponse Create a new Arduino Core instance Init InitRequest InitResponse stream Initializes an existing Arduino Core instance by loading platforms and libraries Destroy DestroyRequest DestroyResponse Destroy an instance of the Arduino Core Service UpdateIndex UpdateIndexRequest UpdateIndexResponse stream Update package index of the Arduino Core Service UpdateLibrariesIndex UpdateLibrariesIndexRequest UpdateLibrariesIndexResponse stream Update libraries index Version VersionRequest VersionResponse Get the version of Arduino CLI in use. NewSketch NewSketchRequest NewSketchResponse Create a new Sketch LoadSketch LoadSketchRequest LoadSketchResponse Returns all files composing a Sketch ArchiveSketch ArchiveSketchRequest ArchiveSketchResponse Creates a zip file containing all files of specified Sketch SetSketchDefaults SetSketchDefaultsRequest SetSketchDefaultsResponse Sets the sketch default FQBN and Port Address/Protocol in the sketch project file (sketch.yaml). These metadata can be retrieved using LoadSketch. BoardDetails BoardDetailsRequest BoardDetailsResponse Requests details about a board BoardList BoardListRequest BoardListResponse List the boards currently connected to the computer. BoardListAll BoardListAllRequest BoardListAllResponse List all the boards provided by installed platforms. BoardSearch BoardSearchRequest BoardSearchResponse Search boards in installed and not installed Platforms. BoardListWatch BoardListWatchRequest BoardListWatchResponse stream List boards connection and disconnected events. Compile CompileRequest CompileResponse stream Compile an Arduino sketch. PlatformInstall PlatformInstallRequest PlatformInstallResponse stream Download and install a platform and its tool dependencies. PlatformDownload PlatformDownloadRequest PlatformDownloadResponse stream Download a platform and its tool dependencies to the staging/packages subdirectory of the data directory. PlatformUninstall PlatformUninstallRequest PlatformUninstallResponse stream Uninstall a platform as well as its tool dependencies that are not used by other installed platforms. PlatformUpgrade PlatformUpgradeRequest PlatformUpgradeResponse stream Upgrade an installed platform to the latest version. Upload UploadRequest UploadResponse stream Upload a compiled sketch to a board. UploadUsingProgrammer UploadUsingProgrammerRequest UploadUsingProgrammerResponse stream Upload a compiled sketch to a board using a programmer. SupportedUserFields SupportedUserFieldsRequest SupportedUserFieldsResponse Returns the list of users fields necessary to upload to that board using the specified protocol. ListProgrammersAvailableForUpload ListProgrammersAvailableForUploadRequest ListProgrammersAvailableForUploadResponse List programmers available for a board. BurnBootloader BurnBootloaderRequest BurnBootloaderResponse stream Burn bootloader to a board. PlatformSearch PlatformSearchRequest PlatformSearchResponse Search for a platform in the platforms indexes. LibraryDownload LibraryDownloadRequest LibraryDownloadResponse stream Download the archive file of an Arduino library in the libraries index to the staging directory. LibraryInstall LibraryInstallRequest LibraryInstallResponse stream Download and install an Arduino library from the libraries index. LibraryUpgrade LibraryUpgradeRequest LibraryUpgradeResponse stream Upgrade a library to the newest version available. ZipLibraryInstall ZipLibraryInstallRequest ZipLibraryInstallResponse stream Install a library from a Zip File GitLibraryInstall GitLibraryInstallRequest GitLibraryInstallResponse stream Download and install a library from a git url LibraryUninstall LibraryUninstallRequest LibraryUninstallResponse stream Uninstall an Arduino library. LibraryUpgradeAll LibraryUpgradeAllRequest LibraryUpgradeAllResponse stream Upgrade all installed Arduino libraries to the newest version available. LibraryResolveDependencies LibraryResolveDependenciesRequest LibraryResolveDependenciesResponse List the recursive dependencies of a library, as defined by the depends field of the library.properties files. LibrarySearch LibrarySearchRequest LibrarySearchResponse Search the Arduino libraries index for libraries. LibraryList LibraryListRequest LibraryListResponse List the installed libraries. Monitor MonitorRequest stream MonitorResponse stream Open a monitor connection to a board port EnumerateMonitorPortSettings EnumerateMonitorPortSettingsRequest EnumerateMonitorPortSettingsResponse Returns the parameters that can be set in the MonitorRequest calls Debug DebugRequest stream DebugResponse stream Start a debug session and communicate with the debugger tool. IsDebugSupported IsDebugSupportedRequest IsDebugSupportedResponse Determine if debugging is suported given a specific configuration. GetDebugConfig GetDebugConfigRequest GetDebugConfigResponse Query the debugger information given a specific configuration. CheckForArduinoCLIUpdates CheckForArduinoCLIUpdatesRequest CheckForArduinoCLIUpdatesResponse Check for updates to the Arduino CLI. CleanDownloadCacheDirectory CleanDownloadCacheDirectoryRequest CleanDownloadCacheDirectoryResponse Clean the download cache directory (where archives are downloaded). SettingsGetAll SettingsGetAllRequest SettingsGetAllResponse List all the settings. SettingsMerge SettingsMergeRequest SettingsMergeResponse Set multiple settings values at once. SettingsGetValue SettingsGetValueRequest SettingsGetValueResponse Get the value of a specific setting. SettingsSetValue SettingsSetValueRequest SettingsSetValueResponse Set the value of a specific setting. SettingsWrite SettingsWriteRequest SettingsWriteResponse Writes to file settings currently stored in memory SettingsDelete SettingsDeleteRequest SettingsDeleteResponse Deletes an entry and rewrites the file settings Top","title":"ArduinoCoreService"},{"location":"rpc/commands/#ccarduinoclicommandsv1commonproto","text":"","title":"cc/arduino/cli/commands/v1/common.proto"},{"location":"rpc/commands/#board","text":"Field Type Label Description name string Name used to identify the board to humans. fqbn string Fully qualified board name used to identify the board to machines. The FQBN is only available for installed boards.","title":"Board"},{"location":"rpc/commands/#downloadprogress","text":"Field Type Label Description start DownloadProgressStart update DownloadProgressUpdate end DownloadProgressEnd","title":"DownloadProgress"},{"location":"rpc/commands/#downloadprogressend","text":"Field Type Label Description success bool True if the download is successful message string Info or error message, depending on the value of 'success'. Some examples: \"File xxx already downloaded\" or \"Connection timeout\"","title":"DownloadProgressEnd"},{"location":"rpc/commands/#downloadprogressstart","text":"Field Type Label Description url string URL of the download. label string The label to display on the progress bar.","title":"DownloadProgressStart"},{"location":"rpc/commands/#downloadprogressupdate","text":"Field Type Label Description downloaded int64 Size of the downloaded portion of the file. total_size int64 Total size of the file being downloaded.","title":"DownloadProgressUpdate"},{"location":"rpc/commands/#helpresources","text":"Field Type Label Description online string A URL provided by the author of the platform's package, intended to point to their online help service.","title":"HelpResources"},{"location":"rpc/commands/#installedplatformreference","text":"Field Type Label Description id string Platform ID (e.g., arduino:avr ). version string Version of the platform. install_dir string Installation directory of the platform package_url string 3rd party platform URL","title":"InstalledPlatformReference"},{"location":"rpc/commands/#instance","text":"Field Type Label Description id int32 The ID of the instance.","title":"Instance"},{"location":"rpc/commands/#missingprogrammererror","text":"MissingProgrammerError is a status error detail that is returned when the operation can not be completed due to a missing programmer argument.","title":"MissingProgrammerError"},{"location":"rpc/commands/#platform","text":"Platform is a structure containing all the information about a single platform release. Field Type Label Description metadata PlatformMetadata Generic information about a platform release PlatformRelease Information about a specific release of a platform","title":"Platform"},{"location":"rpc/commands/#platformmetadata","text":"PlatformMetadata contains generic information about a platform (not correlated to a specific release). Field Type Label Description id string Platform ID (e.g., arduino:avr ). maintainer string Maintainer of the platform's package. website string A URL provided by the author of the platform's package, intended to point to their website. email string Email of the maintainer of the platform's package. manually_installed bool If true this Platform has been installed manually in the user' sketchbook hardware folder deprecated bool True if the latest release of this Platform has been deprecated indexed bool If true the platform is indexed","title":"PlatformMetadata"},{"location":"rpc/commands/#platformrelease","text":"PlatformRelease contains information about a specific release of a platform. Field Type Label Description name string Name used to identify the platform to humans (e.g., \"Arduino AVR Boards\"). version string Version of the platform release type string repeated Type of the platform. installed bool True if the platform is installed boards Board repeated List of boards provided by the platform. If the platform is installed, this is the boards listed in the platform's boards.txt. If the platform is not installed, this is an arbitrary list of board names provided by the platform author for display and may not match boards.txt. help HelpResources A URL provided by the author of the platform's package, intended to point to their online help service. missing_metadata bool This field is true if the platform is missing installation metadata (this happens if the platform has been installed with the legacy Arduino IDE <=1.8.x). If the platform miss metadata and it's not indexed through a package index, it may fail to work correctly in some circumstances, and it may need to be reinstalled. This should be evaluated only when the PlatformRelease is Installed otherwise is an undefined behaviour. deprecated bool True this release is deprecated compatible bool True if the platform dependencies are available for the current OS/ARCH. This also means that the platform is installable.","title":"PlatformRelease"},{"location":"rpc/commands/#platformsummary","text":"PlatformSummary is a structure containing all the information about a platform and all its available releases. Field Type Label Description metadata PlatformMetadata Generic information about a platform releases PlatformSummary.ReleasesEntry repeated Maps version to the corresponding PlatformRelease installed_version string The installed version of the platform, or empty string if none installed latest_version string The latest available version of the platform that can be installable, or empty if none available.","title":"PlatformSummary"},{"location":"rpc/commands/#platformsummaryreleasesentry","text":"Field Type Label Description key string value PlatformRelease","title":"PlatformSummary.ReleasesEntry"},{"location":"rpc/commands/#programmer","text":"Field Type Label Description platform string Platform name id string Programmer ID name string Programmer name","title":"Programmer"},{"location":"rpc/commands/#sketch","text":"Field Type Label Description main_file string Absolute path to a main sketch files location_path string Absolute path to folder that contains main_file other_sketch_files string repeated List of absolute paths to other sketch files additional_files string repeated List of absolute paths to additional sketch files root_folder_files string repeated List of absolute paths to supported files in the sketch root folder, main file excluded default_fqbn string Default FQBN set in project file (sketch.yaml) default_port string Default Port set in project file (sketch.yaml) default_protocol string Default Protocol set in project file (sketch.yaml) profiles SketchProfile repeated List of profiles present in the project file (sketch.yaml) default_profile SketchProfile Default profile set in the project file (sketch.yaml) default_programmer string Default Programmer set in project file (sketch.yaml)","title":"Sketch"},{"location":"rpc/commands/#sketchprofile","text":"Field Type Label Description name string Name of the profile fqbn string FQBN used by the profile programmer string Programmer used by the profile","title":"SketchProfile"},{"location":"rpc/commands/#taskprogress","text":"Field Type Label Description name string Description of the task. message string Additional information about the task. completed bool Whether the task is complete. percent float Amount in percent of the task completion (optional) Top","title":"TaskProgress"},{"location":"rpc/commands/#ccarduinoclicommandsv1compileproto","text":"","title":"cc/arduino/cli/commands/v1/compile.proto"},{"location":"rpc/commands/#builderresult","text":"Field Type Label Description build_path string The compiler build path used_libraries Library repeated The libraries used in the build executable_sections_size ExecutableSectionSize repeated The size of the executable split by sections board_platform InstalledPlatformReference The platform where the board is defined build_platform InstalledPlatformReference The platform used for the build (if referenced from the board platform) build_properties string repeated Build properties used for compiling diagnostics CompileDiagnostic repeated Compiler errors and warnings","title":"BuilderResult"},{"location":"rpc/commands/#compilediagnostic","text":"Field Type Label Description severity string Severity of the diagnostic message string The explanation of the diagnostic (it may be multiple preformatted lines) file string The file containing the diagnostic line int64 The line of the diagnostic if available (starts from 1) column int64 The column of the diagnostic if available (starts from 1) context CompileDiagnosticContext repeated The context where this diagnostic is found (it may be multiple files that represents a chain of includes, or a text describing where the diagnostic is found) notes CompileDiagnosticNote repeated Annotations or suggestions to the diagnostic made by the compiler","title":"CompileDiagnostic"},{"location":"rpc/commands/#compilediagnosticcontext","text":"Field Type Label Description message string The message describing the context reference file string The file of the context reference line int64 The line of the context reference column int64 The column of the context reference","title":"CompileDiagnosticContext"},{"location":"rpc/commands/#compilediagnosticnote","text":"Field Type Label Description message string The message describing the compiler note file string The file of the compiler note line int64 The line of the compiler note column int64 The column of the compiler note","title":"CompileDiagnosticNote"},{"location":"rpc/commands/#compilerequest","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno . If this field is not defined, the FQBN of the board attached to the sketch via the BoardAttach method is used. sketch_path string The path where the sketch is stored. show_properties bool Just get the build properties and do not run the full compile. preprocess bool Print preprocessed code to stdout instead of compiling. build_cache_path string Builds of 'core.a' are saved into this path to be cached and reused. build_path string Path to use to store the files used for the compilation. If omitted, a directory will be created in the operating system's default temporary path. build_properties string repeated List of custom build properties separated by commas. warnings string Used to tell gcc which warning level to use. The level names are: \"none\", \"default\", \"more\" and \"all\". verbose bool Turns on verbose mode. quiet bool Suppresses almost every output. jobs int32 The max number of concurrent compiler instances to run (as make -jx ). If jobs is set to 0, it will use the number of available CPUs as the maximum. libraries string repeated A list of paths to directories containing a collection of libraries. optimize_for_debug bool Optimize compile output for debug, not for release. export_dir string Optional: save the build artifacts in this directory, the directory must exist. clean bool Optional: cleanup the build folder and do not use any previously cached build create_compilation_database_only bool When set to true only the compilation database will be produced and no actual build will be performed. source_override CompileRequest.SourceOverrideEntry repeated This map (source file -> new content) let the builder use the provided content instead of reading the corresponding file on disk. This is useful for IDE that have unsaved changes in memory. The path must be relative to the sketch directory. Only files from the sketch are allowed. export_binaries bool optional When set to true the compiled binary will be copied to the export directory. library string repeated A list of paths to single libraries root directory. keys_keychain string The path where to search for the custom signing key name and the encrypt key name sign_key string The name of the custom key to use for signing during the compile process encrypt_key string The name of the custom key to use for encrypting during the compile process skip_libraries_discovery bool If set to true the build will skip the library discovery process and will use the same libraries of latest build. Enabling this flag may produce a wrong output and should not be used in regular compiles unless there is a very specific reason to do so. This flag is mainly provided for usage in language servers to optimize the build speed in some particular cases. do_not_expand_build_properties bool If set to true the returned build properties will be left unexpanded, with the variables placeholders exactly as defined in the platform.","title":"CompileRequest"},{"location":"rpc/commands/#compilerequestsourceoverrideentry","text":"Field Type Label Description key string value string","title":"CompileRequest.SourceOverrideEntry"},{"location":"rpc/commands/#compileresponse","text":"Field Type Label Description out_stream bytes The output of the compilation process (stream) err_stream bytes The error output of the compilation process (stream) progress TaskProgress Completions reports of the compilation process (stream) result BuilderResult The compilation result","title":"CompileResponse"},{"location":"rpc/commands/#executablesectionsize","text":"Field Type Label Description name string size int64 max_size int64","title":"ExecutableSectionSize"},{"location":"rpc/commands/#instanceneedsreinitializationerror","text":"Top","title":"InstanceNeedsReinitializationError"},{"location":"rpc/commands/#ccarduinoclicommandsv1coreproto","text":"","title":"cc/arduino/cli/commands/v1/core.proto"},{"location":"rpc/commands/#alreadyatlatestversionerror","text":"AlreadyAtLatestVersionError is returned when an upgrade is not possible because already at latest version.","title":"AlreadyAtLatestVersionError"},{"location":"rpc/commands/#platformdownloadrequest","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. platform_package string architecture string Architecture name of the platform (e.g., avr ). version string Platform version to download.","title":"PlatformDownloadRequest"},{"location":"rpc/commands/#platformdownloadresponse","text":"Field Type Label Description progress DownloadProgress Progress of the downloads of platform and tool files.","title":"PlatformDownloadResponse"},{"location":"rpc/commands/#platforminstallrequest","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. platform_package string Vendor name of the platform (e.g., arduino ). architecture string Architecture name of the platform (e.g., avr ). version string Platform version to install. skip_post_install bool Set to true to not run (eventual) post install scripts for trusted platforms no_overwrite bool Set to true to skip installation if a different version of the platform is already installed. skip_pre_uninstall bool Set to true to not run (eventual) pre uninstall scripts for trusted platforms when performing platform upgrades","title":"PlatformInstallRequest"},{"location":"rpc/commands/#platforminstallresponse","text":"Field Type Label Description progress DownloadProgress Progress of the downloads of the platform and tool files. task_progress TaskProgress Description of the current stage of the installation.","title":"PlatformInstallResponse"},{"location":"rpc/commands/#platformloadingerror","text":"","title":"PlatformLoadingError"},{"location":"rpc/commands/#platformsearchrequest","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. search_args string Keywords for the search. manually_installed bool Whether to show manually installed platforms. false causes to skip manually installed platforms.","title":"PlatformSearchRequest"},{"location":"rpc/commands/#platformsearchresponse","text":"Field Type Label Description search_output PlatformSummary repeated Results of the search.","title":"PlatformSearchResponse"},{"location":"rpc/commands/#platformuninstallrequest","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. platform_package string Vendor name of the platform (e.g., arduino ). architecture string Architecture name of the platform (e.g., avr ). skip_pre_uninstall bool Set to true to not run (eventual) pre uninstall scripts for trusted platforms","title":"PlatformUninstallRequest"},{"location":"rpc/commands/#platformuninstallresponse","text":"Field Type Label Description task_progress TaskProgress Description of the current stage of the uninstall.","title":"PlatformUninstallResponse"},{"location":"rpc/commands/#platformupgraderequest","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. platform_package string Vendor name of the platform (e.g., arduino ). architecture string Architecture name of the platform (e.g., avr ). skip_post_install bool Set to true to not run (eventual) post install scripts for trusted platforms skip_pre_uninstall bool Set to true to not run (eventual) pre uninstall scripts for trusted platforms when performing platform upgrades","title":"PlatformUpgradeRequest"},{"location":"rpc/commands/#platformupgraderesponse","text":"Field Type Label Description progress DownloadProgress Progress of the downloads of the platform and tool files. task_progress TaskProgress Description of the current stage of the upgrade. platform Platform The upgraded platform. Top","title":"PlatformUpgradeResponse"},{"location":"rpc/commands/#ccarduinoclicommandsv1debugproto","text":"","title":"cc/arduino/cli/commands/v1/debug.proto"},{"location":"rpc/commands/#debuggcctoolchainconfiguration","text":"Configurations specific for the 'gcc' toolchain","title":"DebugGCCToolchainConfiguration"},{"location":"rpc/commands/#debugopenocdserverconfiguration","text":"Configuration specific for the 'openocd` server Field Type Label Description path string path to openocd scripts_dir string path to openocd scripts scripts string repeated list of scripts to execute by openocd","title":"DebugOpenOCDServerConfiguration"},{"location":"rpc/commands/#debugrequest","text":"The top-level message sent by the client for the Debug method. Multiple DebugRequest messages can be sent but the first message must contain a GetDebugConfigRequest message to initialize the debug session. All subsequent messages must contain bytes to be sent to the debug session and must not contain a GetDebugConfigRequest message. Content must be either a debug session config or data to be sent. Field Type Label Description debug_request GetDebugConfigRequest Provides information to the debug that specifies which is the target. The first DebugRequest message must contain a GetDebugConfigRequest message. data bytes The data to be sent to the target being monitored. send_interrupt bool Set this to true to send and Interrupt signal to the debugger process","title":"DebugRequest"},{"location":"rpc/commands/#debugresponse","text":"The streaming response may contain chunks of data from the debugger or an error. Field Type Label Description data bytes Incoming data from the debugger tool. error string Incoming error output from the debugger tool.","title":"DebugResponse"},{"location":"rpc/commands/#getdebugconfigrequest","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. fqbn string Fully qualified board name of the board in use (e.g., arduino:samd:mkr1000 ). If this is omitted, the FQBN attached to the sketch will be used. sketch_path string Path to the sketch that is running on the board. The compiled executable is expected to be located under this path. port Port Port of the debugger (optional). interpreter string Which GDB command interpreter to use. import_dir string Directory containing the compiled executable. If import_dir is not specified, the executable is assumed to be in {sketch_path}/build/{fqbn}/ . programmer string The programmer to use for debugging.","title":"GetDebugConfigRequest"},{"location":"rpc/commands/#getdebugconfigresponse","text":"Field Type Label Description executable string The executable binary to debug toolchain string The toolchain type used for the build (for example \"gcc\") toolchain_path string The toolchain directory toolchain_prefix string The toolchain architecture prefix (for example \"arm-none-eabi\") server string The GDB server type used to connect to the programmer/board (for example \"openocd\") server_path string The GDB server directory toolchain_configuration google.protobuf.Any Extra configuration parameters wrt toolchain server_configuration google.protobuf.Any Extra configuration parameters wrt GDB server custom_configs GetDebugConfigResponse.CustomConfigsEntry repeated Custom debugger configurations (not handled directly by Arduino CLI but provided for 3rd party plugins/debuggers). The map keys identifies which 3rd party plugin/debugger is referred, the map string values contains a JSON configuration for it. svd_file string the SVD file to use programmer string The programmer specified in the request","title":"GetDebugConfigResponse"},{"location":"rpc/commands/#getdebugconfigresponsecustomconfigsentry","text":"Field Type Label Description key string value string","title":"GetDebugConfigResponse.CustomConfigsEntry"},{"location":"rpc/commands/#isdebugsupportedrequest","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. fqbn string Fully qualified board name of the board in use (e.g., arduino:samd:mkr1000 ). port Port Port of the debugger (optional). interpreter string Which GDB command interpreter to use. programmer string The programmer to use for debugging.","title":"IsDebugSupportedRequest"},{"location":"rpc/commands/#isdebugsupportedresponse","text":"Field Type Label Description debugging_supported bool True if debugging is supported debug_fqbn string This is the same FQBN given in the IsDebugSupportedRequest but cleaned up of the board options that do not affect the debugger configuration. It may be used by clients/IDE to group slightly different boards option selections under the same debug configuration. Top","title":"IsDebugSupportedResponse"},{"location":"rpc/commands/#ccarduinoclicommandsv1libproto","text":"","title":"cc/arduino/cli/commands/v1/lib.proto"},{"location":"rpc/commands/#downloadresource","text":"Field Type Label Description url string Download URL of the library archive. archive_filename string Filename of the library archive. checksum string Checksum of the library archive. size int64 File size of the library archive. cache_path string The directory under the staging subdirectory of the data directory the library archive file will be downloaded to.","title":"DownloadResource"},{"location":"rpc/commands/#gitlibraryinstallrequest","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. url string URL to the repository containing the library overwrite bool Set to true to overwrite an already installed library with the same name. Defaults to false.","title":"GitLibraryInstallRequest"},{"location":"rpc/commands/#gitlibraryinstallresponse","text":"Field Type Label Description task_progress TaskProgress Description of the current stage of the installation.","title":"GitLibraryInstallResponse"},{"location":"rpc/commands/#installedlibrary","text":"Field Type Label Description library Library Information about the library. release LibraryRelease When the updatable field of the LibraryList request is set to true , this will contain information on the latest version of the library in the libraries index.","title":"InstalledLibrary"},{"location":"rpc/commands/#library","text":"Field Type Label Description name string Library name (value of name field in library.properties). author string Value of the author field in library.properties. maintainer string Value of the maintainer field in library.properties. sentence string Value of the sentence field in library.properties. paragraph string Value of the paragraph field in library.properties. website string Value of the url field in library.properties. category string Value of the category field in library.properties. architectures string repeated Value of the architectures field in library.properties. types string repeated The type categories of the library. Possible values: Arduino , Partner , Recommended , Contributed , Retired . install_dir string The path of the library directory. source_dir string The location of the library's source files. utility_dir string The location of the library's utility directory. container_platform string If location is platform_builtin or referenced_platform_builtin , the identifying string for the platform containing the library (e.g., arduino:avr@1.8.2 ). dot_a_linkage bool Value of the dot_a_linkage field in library.properties. precompiled bool Value of the precompiled field in library.properties. ld_flags string Value of the ldflags field in library.properties. is_legacy bool A library.properties file is not present in the library's root directory. version string Value of the version field in library.properties. license string Value of the license field in library.properties. properties Library.PropertiesEntry repeated The data from the library's library.properties file, including unused fields. location LibraryLocation The location type of the library installation. layout LibraryLayout The library format type. examples string repeated The example sketches provided by the library provides_includes string repeated Value of the includes field in library.properties or, if missing, the list of include files available on the library source root directory. compatible_with Library.CompatibleWithEntry repeated Map of FQBNs that specifies if library is compatible with this library in_development bool This value is set to true if the library is in development and should not be treated as read-only. This status is determined by the presence of a .development file in the library root directory.","title":"Library"},{"location":"rpc/commands/#librarycompatiblewithentry","text":"Field Type Label Description key string value bool","title":"Library.CompatibleWithEntry"},{"location":"rpc/commands/#librarypropertiesentry","text":"Field Type Label Description key string value string","title":"Library.PropertiesEntry"},{"location":"rpc/commands/#librarydependency","text":"Field Type Label Description name string Library name of the dependency. version_constraint string Version constraint of the dependency.","title":"LibraryDependency"},{"location":"rpc/commands/#librarydependencystatus","text":"Field Type Label Description name string The name of the library dependency. version_required string The required version of the library dependency. version_installed string Version of the library dependency currently installed.","title":"LibraryDependencyStatus"},{"location":"rpc/commands/#librarydownloadrequest","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. name string Name of the library. version string The version of the library to download.","title":"LibraryDownloadRequest"},{"location":"rpc/commands/#librarydownloadresponse","text":"Field Type Label Description progress DownloadProgress Progress of the library download.","title":"LibraryDownloadResponse"},{"location":"rpc/commands/#libraryinstallrequest","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. name string Name of the library. version string The version of the library to install. no_deps bool Set to true to skip installation of specified library's dependencies, defaults to false. no_overwrite bool Set to true to skip installation if a different version of the library or one of its dependencies is already installed, defaults to false. install_location LibraryInstallLocation Install the library and dependencies in the specified location","title":"LibraryInstallRequest"},{"location":"rpc/commands/#libraryinstallresponse","text":"Field Type Label Description progress DownloadProgress Progress of the library download. task_progress TaskProgress Description of the current stage of the installation.","title":"LibraryInstallResponse"},{"location":"rpc/commands/#librarylistrequest","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. all bool Whether to include built-in libraries (from platforms and the Arduino IDE) in the listing. updatable bool Whether to list only libraries for which there is a newer version than the installed version available in the libraries index. name string If set filters out the libraries not matching name fqbn string By setting this field all duplicate libraries are filtered out leaving only the libraries that will be used to compile for the specified board FQBN.","title":"LibraryListRequest"},{"location":"rpc/commands/#librarylistresponse","text":"Field Type Label Description installed_libraries InstalledLibrary repeated List of installed libraries.","title":"LibraryListResponse"},{"location":"rpc/commands/#libraryrelease","text":"Field Type Label Description author string Value of the author field in library.properties. version string Value of the version field in library.properties. maintainer string Value of the maintainer field in library.properties. sentence string Value of the sentence field in library.properties. paragraph string Value of the paragraph field in library.properties. website string Value of the url field in library.properties. category string Value of the category field in library.properties. architectures string repeated Value of the architectures field in library.properties. types string repeated The type categories of the library, as defined in the libraries index. Possible values: Arduino , Partner , Recommended , Contributed , Retired . resources DownloadResource Information about the library archive file. license string Value of the license field in library.properties. provides_includes string repeated Value of the includes field in library.properties. dependencies LibraryDependency repeated The names of the library's dependencies, as defined by the 'depends' field of library.properties.","title":"LibraryRelease"},{"location":"rpc/commands/#libraryresolvedependenciesrequest","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. name string Name of the library. version string The version of the library to check dependencies of. If no version is specified, dependencies of the newest version will be listed. do_not_update_installed_libraries bool If true the computed solution will try to keep exising libraries at their current version.","title":"LibraryResolveDependenciesRequest"},{"location":"rpc/commands/#libraryresolvedependenciesresponse","text":"Field Type Label Description dependencies LibraryDependencyStatus repeated Dependencies of the library.","title":"LibraryResolveDependenciesResponse"},{"location":"rpc/commands/#librarysearchrequest","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. omit_releases_details bool Set to true to not populate the releases field in the response (may save a lot of bandwidth/CPU). search_args string Keywords for the search.","title":"LibrarySearchRequest"},{"location":"rpc/commands/#librarysearchresponse","text":"Field Type Label Description libraries SearchedLibrary repeated The results of the search. status LibrarySearchStatus Whether the search yielded results.","title":"LibrarySearchResponse"},{"location":"rpc/commands/#libraryuninstallrequest","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. name string Name of the library. version string The version of the library to uninstall.","title":"LibraryUninstallRequest"},{"location":"rpc/commands/#libraryuninstallresponse","text":"Field Type Label Description task_progress TaskProgress Description of the current stage of the uninstallation.","title":"LibraryUninstallResponse"},{"location":"rpc/commands/#libraryupgradeallrequest","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response.","title":"LibraryUpgradeAllRequest"},{"location":"rpc/commands/#libraryupgradeallresponse","text":"Field Type Label Description progress DownloadProgress Progress of the downloads of files needed for the upgrades. task_progress TaskProgress Description of the current stage of the upgrade.","title":"LibraryUpgradeAllResponse"},{"location":"rpc/commands/#libraryupgraderequest","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. name string Name of the library. no_deps bool Set to true to skip installation of specified library's dependencies, defaults to false.","title":"LibraryUpgradeRequest"},{"location":"rpc/commands/#libraryupgraderesponse","text":"Field Type Label Description progress DownloadProgress Progress of the library download. task_progress TaskProgress Description of the current stage of the installation.","title":"LibraryUpgradeResponse"},{"location":"rpc/commands/#searchedlibrary","text":"Field Type Label Description name string Library name. releases SearchedLibrary.ReleasesEntry repeated The index data for the available versions of the library. The key of the map is the library version. latest LibraryRelease The index data for the latest version of the library. available_versions string repeated The available versions of this library.","title":"SearchedLibrary"},{"location":"rpc/commands/#searchedlibraryreleasesentry","text":"Field Type Label Description key string value LibraryRelease","title":"SearchedLibrary.ReleasesEntry"},{"location":"rpc/commands/#ziplibraryinstallrequest","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. path string Path to the archived library overwrite bool Set to true to overwrite an already installed library with the same name. Defaults to false.","title":"ZipLibraryInstallRequest"},{"location":"rpc/commands/#ziplibraryinstallresponse","text":"Field Type Label Description task_progress TaskProgress Description of the current stage of the installation.","title":"ZipLibraryInstallResponse"},{"location":"rpc/commands/#libraryinstalllocation","text":"Name Number Description LIBRARY_INSTALL_LOCATION_USER 0 In the libraries subdirectory of the user directory (sketchbook). This is the default if not specified. LIBRARY_INSTALL_LOCATION_BUILTIN 1 In the configured 'builtin.libraries' directory.","title":"LibraryInstallLocation"},{"location":"rpc/commands/#librarylayout","text":"Name Number Description LIBRARY_LAYOUT_FLAT 0 Library is in the 1.0 Arduino library format. LIBRARY_LAYOUT_RECURSIVE 1 Library is in the 1.5 Arduino library format.","title":"LibraryLayout"},{"location":"rpc/commands/#librarylocation","text":"Name Number Description LIBRARY_LOCATION_BUILTIN 0 In the configured 'builtin.libraries' directory. LIBRARY_LOCATION_USER 1 In the libraries subdirectory of the user directory (sketchbook). LIBRARY_LOCATION_PLATFORM_BUILTIN 2 In the libraries subdirectory of a platform. LIBRARY_LOCATION_REFERENCED_PLATFORM_BUILTIN 3 When LibraryLocation is used in a context where a board is specified, this indicates the library is in the libraries subdirectory of a platform referenced by the board's platform. LIBRARY_LOCATION_UNMANAGED 4 Outside the libraries folders managed by the CLI.","title":"LibraryLocation"},{"location":"rpc/commands/#librarysearchstatus","text":"Name Number Description LIBRARY_SEARCH_STATUS_FAILED 0 No search results were found. LIBRARY_SEARCH_STATUS_SUCCESS 1 Search results were found. Top","title":"LibrarySearchStatus"},{"location":"rpc/commands/#ccarduinoclicommandsv1monitorproto","text":"","title":"cc/arduino/cli/commands/v1/monitor.proto"},{"location":"rpc/commands/#enumeratemonitorportsettingsrequest","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. port_protocol string The port protocol to enumerate settings. fqbn string The board FQBN we are trying to connect to. This is optional, and it's needed to disambiguate if more than one platform provides the pluggable monitor for a given port protocol.","title":"EnumerateMonitorPortSettingsRequest"},{"location":"rpc/commands/#enumeratemonitorportsettingsresponse","text":"Field Type Label Description settings MonitorPortSettingDescriptor repeated A list of descriptors of the settings that may be changed for the monitor port.","title":"EnumerateMonitorPortSettingsResponse"},{"location":"rpc/commands/#monitorportconfiguration","text":"Field Type Label Description settings MonitorPortSetting repeated The port configuration parameters to configure","title":"MonitorPortConfiguration"},{"location":"rpc/commands/#monitorportopenrequest","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. port Port Port to open, must be filled only on the first request fqbn string The board FQBN we are trying to connect to. This is optional, and it's needed to disambiguate if more than one platform provides the pluggable monitor for a given port protocol. port_configuration MonitorPortConfiguration Port configuration, optional, contains settings of the port to be applied","title":"MonitorPortOpenRequest"},{"location":"rpc/commands/#monitorportsetting","text":"Field Type Label Description setting_id string value string","title":"MonitorPortSetting"},{"location":"rpc/commands/#monitorportsettingdescriptor","text":"Field Type Label Description setting_id string The setting identifier label string A human-readable label of the setting (to be displayed on the GUI) type string The setting type (at the moment only \"enum\" is avaiable) enum_values string repeated The values allowed on \"enum\" types value string The selected or default value","title":"MonitorPortSettingDescriptor"},{"location":"rpc/commands/#monitorrequest","text":"Field Type Label Description open_request MonitorPortOpenRequest Open request, it must be the first incoming message tx_data bytes Data to send to the port updated_configuration MonitorPortConfiguration Port configuration, contains settings of the port to be changed close bool Close message, set to true to gracefully close a port (this ensure that the gRPC streaming call is closed by the daemon AFTER the port has been successfully closed)","title":"MonitorRequest"},{"location":"rpc/commands/#monitorresponse","text":"Field Type Label Description error string Eventual errors dealing with monitor port rx_data bytes Data received from the port applied_settings MonitorPortSetting repeated Settings applied to the port, may be returned after a port is opened (to report the default settings) or after a new port_configuration is sent (to report the new settings applied) success bool A message with this field set to true is sent as soon as the port is succesfully opened Top","title":"MonitorResponse"},{"location":"rpc/commands/#ccarduinoclicommandsv1portproto","text":"","title":"cc/arduino/cli/commands/v1/port.proto"},{"location":"rpc/commands/#port","text":"Port represents a board port that may be used to upload or to monitor a board Field Type Label Description address string Address of the port (e.g., /dev/ttyACM0 ). label string The port label to show on the GUI (e.g. \"ttyACM0\") protocol string Protocol of the port (e.g., serial , network , ...). protocol_label string A human friendly description of the protocol (e.g., \"Serial Port (USB)\"). properties Port.PropertiesEntry repeated A set of properties of the port hardware_id string The hardware ID (serial number) of the board attached to the port","title":"Port"},{"location":"rpc/commands/#portpropertiesentry","text":"Field Type Label Description key string value string Top","title":"Port.PropertiesEntry"},{"location":"rpc/commands/#ccarduinoclicommandsv1settingsproto","text":"","title":"cc/arduino/cli/commands/v1/settings.proto"},{"location":"rpc/commands/#settingsdeleterequest","text":"Field Type Label Description key string The key of the setting to delete.","title":"SettingsDeleteRequest"},{"location":"rpc/commands/#settingsdeleteresponse","text":"","title":"SettingsDeleteResponse"},{"location":"rpc/commands/#settingsgetallrequest","text":"","title":"SettingsGetAllRequest"},{"location":"rpc/commands/#settingsgetallresponse","text":"Field Type Label Description json_data string The settings, in JSON format.","title":"SettingsGetAllResponse"},{"location":"rpc/commands/#settingsgetvaluerequest","text":"Field Type Label Description key string The key of the setting.","title":"SettingsGetValueRequest"},{"location":"rpc/commands/#settingsgetvalueresponse","text":"Field Type Label Description key string The key of the setting. json_data string The setting, in JSON format.","title":"SettingsGetValueResponse"},{"location":"rpc/commands/#settingsmergerequest","text":"Field Type Label Description json_data string The settings, in JSON format.","title":"SettingsMergeRequest"},{"location":"rpc/commands/#settingsmergeresponse","text":"","title":"SettingsMergeResponse"},{"location":"rpc/commands/#settingssetvaluerequest","text":"Field Type Label Description key string The key of the setting. json_data string The setting, in JSON format.","title":"SettingsSetValueRequest"},{"location":"rpc/commands/#settingssetvalueresponse","text":"","title":"SettingsSetValueResponse"},{"location":"rpc/commands/#settingswriterequest","text":"Field Type Label Description file_path string Path to settings file (e.g. /path/to/arduino-cli.yaml)","title":"SettingsWriteRequest"},{"location":"rpc/commands/#settingswriteresponse","text":"Top","title":"SettingsWriteResponse"},{"location":"rpc/commands/#ccarduinoclicommandsv1uploadproto","text":"","title":"cc/arduino/cli/commands/v1/upload.proto"},{"location":"rpc/commands/#burnbootloaderrequest","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. fqbn string Fully qualified board name of the target board (e.g., arduino:avr:uno ). port Port The port of the programmer used to program the bootloader. verbose bool Whether to turn on verbose output during the programming. verify bool After programming, verify the contents of the memory on the board match the uploaded binary. programmer string The programmer to use for burning bootloader. dry_run bool If set to true, the actual upload will not be performed but a trace output will be printed stdout. This is for debugging purposes. user_fields BurnBootloaderRequest.UserFieldsEntry repeated User provided fields usually used by upload tools that need authentication or in any case fields that can be customized by the user at upload time and cannot be known previously. For more info: https://arduino.github.io/arduino-cli/latest/platform-specification/#user-provided-fields","title":"BurnBootloaderRequest"},{"location":"rpc/commands/#burnbootloaderrequestuserfieldsentry","text":"Field Type Label Description key string value string","title":"BurnBootloaderRequest.UserFieldsEntry"},{"location":"rpc/commands/#burnbootloaderresponse","text":"Field Type Label Description out_stream bytes The output of the burn bootloader process. err_stream bytes The error output of the burn bootloader process.","title":"BurnBootloaderResponse"},{"location":"rpc/commands/#listprogrammersavailableforuploadrequest","text":"Field Type Label Description instance Instance fqbn string","title":"ListProgrammersAvailableForUploadRequest"},{"location":"rpc/commands/#listprogrammersavailableforuploadresponse","text":"Field Type Label Description programmers Programmer repeated","title":"ListProgrammersAvailableForUploadResponse"},{"location":"rpc/commands/#programmerisrequiredforuploaderror","text":"","title":"ProgrammerIsRequiredForUploadError"},{"location":"rpc/commands/#supporteduserfieldsrequest","text":"Field Type Label Description instance Instance fqbn string protocol string Protocol that will be used to upload, this information is necessary to pick the right upload tool for the board specified with the FQBN.","title":"SupportedUserFieldsRequest"},{"location":"rpc/commands/#supporteduserfieldsresponse","text":"Field Type Label Description user_fields UserField repeated User fields supported by board specified in SupportedUserFieldsRequest. If board doesn't support any field it will be empty.","title":"SupportedUserFieldsResponse"},{"location":"rpc/commands/#uploadrequest","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. fqbn string Fully qualified board name of the target board (e.g., arduino:avr:uno ). If this field is not defined, the FQBN of the board attached to the sketch via the BoardAttach method is used. sketch_path string Path where the sketch to be uploaded is stored. Unless the import_file field is defined, the compiled binary is assumed to be at the location and filename under this path where it is saved by the Compile method. port Port The port of the board. verbose bool Whether to turn on verbose output during the upload. verify bool After upload, verify that the contents of the memory on the board match the uploaded binary. import_file string When import_file is specified, it overrides the import_dir and sketch_path params. import_dir string Custom path to a directory containing compiled files. When import_dir is not specified, the standard build directory under sketch_path is used. programmer string The programmer to use for upload. If set an UploadUsingProgrammer is triggered instead of a normal upload. The UploadUsingProgrammer call may also be used for explicit error check. dry_run bool If set to true, the actual upload will not be performed but a trace output will be printed stdout. This is for debugging purposes. user_fields UploadRequest.UserFieldsEntry repeated User provided fields usually used by upload tools that need authentication or in any case fields that can be customized by the user at upload time and cannot be known previously. For more info: https://arduino.github.io/arduino-cli/latest/platform-specification/#user-provided-fields","title":"UploadRequest"},{"location":"rpc/commands/#uploadrequestuserfieldsentry","text":"Field Type Label Description key string value string","title":"UploadRequest.UserFieldsEntry"},{"location":"rpc/commands/#uploadresponse","text":"Field Type Label Description out_stream bytes The output of the upload process. err_stream bytes The error output of the upload process. result UploadResult The upload result","title":"UploadResponse"},{"location":"rpc/commands/#uploadresult","text":"Field Type Label Description updated_upload_port Port When a board requires a port disconnection to perform the upload, this field returns the port where the board reconnects after the upload.","title":"UploadResult"},{"location":"rpc/commands/#uploadusingprogrammerrequest","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. fqbn string Fully qualified board name of the target board (e.g., arduino:avr:uno ). If this field is not defined, the FQBN of the board attached to the sketch via the BoardAttach method is used. sketch_path string Path where the sketch to be uploaded is stored. Unless the import_file field is defined, the compiled binary is assumed to be at the location and filename under this path where it is saved by the Compile method. port Port The port of the board. verbose bool Whether to turn on verbose output during the upload. verify bool After upload, verify that the contents of the memory on the board match the uploaded binary. import_file string When import_file is specified, it overrides the import_dir and sketch_path params. import_dir string Custom path to a directory containing compiled files. When import_dir is not specified, the standard build directory under sketch_path is used. programmer string The programmer to use for upload. dry_run bool If set to true, the actual upload will not be performed but a trace output will be printed stdout. This is for debugging purposes. user_fields UploadUsingProgrammerRequest.UserFieldsEntry repeated User provided fields usually used by upload tools that need authentication or in any case fields that can be customized by the user at upload time and cannot be known previously. For more info: https://arduino.github.io/arduino-cli/latest/platform-specification/#user-provided-fields","title":"UploadUsingProgrammerRequest"},{"location":"rpc/commands/#uploadusingprogrammerrequestuserfieldsentry","text":"Field Type Label Description key string value string","title":"UploadUsingProgrammerRequest.UserFieldsEntry"},{"location":"rpc/commands/#uploadusingprogrammerresponse","text":"Field Type Label Description out_stream bytes The output of the upload process. err_stream bytes The error output of the upload process.","title":"UploadUsingProgrammerResponse"},{"location":"rpc/commands/#userfield","text":"Field Type Label Description tool_id string Id of the tool that supports this field name string Name used internally to store and retrieve this field label string Label is the text shown to the user when they need to input this field secret bool True if the value of the field must not be shown when typing, for example when the user inputs a network password","title":"UserField"},{"location":"rpc/commands/#scalar-value-types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Scalar Value Types"}]}