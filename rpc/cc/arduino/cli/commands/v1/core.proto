// This file is part of arduino-cli.
//
// Copyright 2020 ARDUINO SA (http://www.arduino.cc/)
//
// This software is released under the GNU General Public License version 3,
// which covers the main part of arduino-cli.
// The terms of this license can be found at:
// https://www.gnu.org/licenses/gpl-3.0.en.html
//
// You can be released from the requirements of the above licenses by purchasing
// a commercial license. Buying such a license is mandatory if you want to
// modify or otherwise use the software for commercial activities involving the
// Arduino software without disclosing the source code of your own applications.
// To purchase a commercial license, send an email to license@arduino.cc.

syntax = "proto3";

package cc.arduino.cli.commands.v1;

option go_package = "github.com/arduino/arduino-cli/rpc/cc/arduino/cli/commands/v1;commands";

import "cc/arduino/cli/commands/v1/common.proto";

message PlatformInstallRequest {
  // Arduino Core Service instance from the `Init` response.
  Instance instance = 1;
  // Vendor name of the platform (e.g., `arduino`).
  string platform_package = 2;
  // Architecture name of the platform (e.g., `avr`).
  string architecture = 3;
  // Platform version to install.
  string version = 4;
  // Set to true to not run (eventual) post install scripts for trusted
  // platforms
  bool skip_post_install = 5;
  // Set to true to skip installation if a different version of the platform
  // is already installed.
  bool no_overwrite = 6;
  // Set to true to not run (eventual) pre uninstall scripts for trusted
  // platforms when performing platform upgrades
  bool skip_pre_uninstall = 7;
}

message PlatformInstallResponse {
  message Result {
    // Empty message, reserved for future expansion.
  }
  oneof message {
    // Progress of the downloads of the platform and tool files.
    DownloadProgress progress = 1;
    // Description of the current stage of the installation.
    TaskProgress task_progress = 2;
    // The installation result.
    Result result = 3;
  }
}

message PlatformLoadingError {}

message PlatformDownloadRequest {
  // Arduino Core Service instance from the `Init` response.
  Instance instance = 1;
  string platform_package = 2;
  // Architecture name of the platform (e.g., `avr`).
  string architecture = 3;
  // Platform version to download.
  string version = 4;
}

message PlatformDownloadResponse {
  message Result {
    // Empty message, reserved for future expansion.
  }
  oneof message {
    // Progress of the downloads of platform and tool files.
    DownloadProgress progress = 1;
    // The download result.
    Result result = 2;
  }
}

message PlatformUninstallRequest {
  // Arduino Core Service instance from the `Init` response.
  Instance instance = 1;
  // Vendor name of the platform (e.g., `arduino`).
  string platform_package = 2;
  // Architecture name of the platform (e.g., `avr`).
  string architecture = 3;
  // Set to true to not run (eventual) pre uninstall scripts for trusted
  // platforms
  bool skip_pre_uninstall = 4;
}

message PlatformUninstallResponse {
  message Result {
    // Empty message, reserved for future expansion.
  }
  oneof message {
    // Description of the current stage of the uninstall.
    TaskProgress task_progress = 1;
    // The uninstall result.
    Result result = 2;
  }
}

// AlreadyAtLatestVersionError is returned when an upgrade is not possible
// because already at latest version.
message AlreadyAtLatestVersionError {}

message PlatformUpgradeRequest {
  // Arduino Core Service instance from the `Init` response.
  Instance instance = 1;
  // Vendor name of the platform (e.g., `arduino`).
  string platform_package = 2;
  // Architecture name of the platform (e.g., `avr`).
  string architecture = 3;
  // Set to true to not run (eventual) post install scripts for trusted
  // platforms
  bool skip_post_install = 4;
  // Set to true to not run (eventual) pre uninstall scripts for trusted
  // platforms when performing platform upgrades
  bool skip_pre_uninstall = 5;
}

message PlatformUpgradeResponse {
  message Result {
    // The upgraded platform.
    Platform platform = 1;
  }
  oneof message {
    // Progress of the downloads of the platform and tool files.
    DownloadProgress progress = 1;
    // Description of the current stage of the upgrade.
    TaskProgress task_progress = 2;
    // The upgrade result.
    Result result = 3;
  }
}

message PlatformSearchRequest {
  // Arduino Core Service instance from the `Init` response.
  Instance instance = 1;
  // Keywords for the search.
  string search_args = 2;
  // Whether to show manually installed platforms. `false` causes to skip
  // manually installed platforms.
  bool manually_installed = 3;
}

message PlatformSearchResponse {
  // Results of the search.
  repeated PlatformSummary search_output = 1;
}
